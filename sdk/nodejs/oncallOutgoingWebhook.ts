// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * * [HTTP API](https://grafana.com/docs/oncall/latest/oncall-api-reference/outgoing_webhooks/)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as grafana from "@lbrlabs/pulumi-grafana";
 *
 * const test_acc_outgoingWebhook = new grafana.OncallOutgoingWebhook("test-acc-outgoingWebhook", {url: "https://example.com/"}, {
 *     provider: grafana.oncall,
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import grafana:index/oncallOutgoingWebhook:OncallOutgoingWebhook outgoing_webhook_name {{outgoing_webhook_id}}
 * ```
 */
export class OncallOutgoingWebhook extends pulumi.CustomResource {
    /**
     * Get an existing OncallOutgoingWebhook resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OncallOutgoingWebhookState, opts?: pulumi.CustomResourceOptions): OncallOutgoingWebhook {
        return new OncallOutgoingWebhook(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'grafana:index/oncallOutgoingWebhook:OncallOutgoingWebhook';

    /**
     * Returns true if the given object is an instance of OncallOutgoingWebhook.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OncallOutgoingWebhook {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OncallOutgoingWebhook.__pulumiType;
    }

    /**
     * The auth data of the webhook. Used in Authorization header instead of user/password auth.
     */
    public readonly authorizationHeader!: pulumi.Output<string | undefined>;
    /**
     * The data of the webhook.
     */
    public readonly data!: pulumi.Output<string | undefined>;
    /**
     * Forwards whole payload of the alert to the webhook's url as POST data.
     */
    public readonly forwardWholePayload!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the outgoing webhook.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The auth data of the webhook. Used for Basic authentication
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `grafana.getOncallTeam` datasource.
     */
    public readonly teamId!: pulumi.Output<string | undefined>;
    /**
     * The webhook URL.
     */
    public readonly url!: pulumi.Output<string>;
    /**
     * The auth data of the webhook. Used for Basic authentication.
     */
    public readonly user!: pulumi.Output<string | undefined>;

    /**
     * Create a OncallOutgoingWebhook resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OncallOutgoingWebhookArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OncallOutgoingWebhookArgs | OncallOutgoingWebhookState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OncallOutgoingWebhookState | undefined;
            resourceInputs["authorizationHeader"] = state ? state.authorizationHeader : undefined;
            resourceInputs["data"] = state ? state.data : undefined;
            resourceInputs["forwardWholePayload"] = state ? state.forwardWholePayload : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["user"] = state ? state.user : undefined;
        } else {
            const args = argsOrState as OncallOutgoingWebhookArgs | undefined;
            if ((!args || args.url === undefined) && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            resourceInputs["authorizationHeader"] = args?.authorizationHeader ? pulumi.secret(args.authorizationHeader) : undefined;
            resourceInputs["data"] = args ? args.data : undefined;
            resourceInputs["forwardWholePayload"] = args ? args.forwardWholePayload : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["teamId"] = args ? args.teamId : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["user"] = args ? args.user : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["authorizationHeader", "password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(OncallOutgoingWebhook.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OncallOutgoingWebhook resources.
 */
export interface OncallOutgoingWebhookState {
    /**
     * The auth data of the webhook. Used in Authorization header instead of user/password auth.
     */
    authorizationHeader?: pulumi.Input<string>;
    /**
     * The data of the webhook.
     */
    data?: pulumi.Input<string>;
    /**
     * Forwards whole payload of the alert to the webhook's url as POST data.
     */
    forwardWholePayload?: pulumi.Input<boolean>;
    /**
     * The name of the outgoing webhook.
     */
    name?: pulumi.Input<string>;
    /**
     * The auth data of the webhook. Used for Basic authentication
     */
    password?: pulumi.Input<string>;
    /**
     * The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `grafana.getOncallTeam` datasource.
     */
    teamId?: pulumi.Input<string>;
    /**
     * The webhook URL.
     */
    url?: pulumi.Input<string>;
    /**
     * The auth data of the webhook. Used for Basic authentication.
     */
    user?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OncallOutgoingWebhook resource.
 */
export interface OncallOutgoingWebhookArgs {
    /**
     * The auth data of the webhook. Used in Authorization header instead of user/password auth.
     */
    authorizationHeader?: pulumi.Input<string>;
    /**
     * The data of the webhook.
     */
    data?: pulumi.Input<string>;
    /**
     * Forwards whole payload of the alert to the webhook's url as POST data.
     */
    forwardWholePayload?: pulumi.Input<boolean>;
    /**
     * The name of the outgoing webhook.
     */
    name?: pulumi.Input<string>;
    /**
     * The auth data of the webhook. Used for Basic authentication
     */
    password?: pulumi.Input<string>;
    /**
     * The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `grafana.getOncallTeam` datasource.
     */
    teamId?: pulumi.Input<string>;
    /**
     * The webhook URL.
     */
    url: pulumi.Input<string>;
    /**
     * The auth data of the webhook. Used for Basic authentication.
     */
    user?: pulumi.Input<string>;
}
