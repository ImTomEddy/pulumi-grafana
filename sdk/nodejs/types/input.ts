// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface BuiltinRoleAssignmentRole {
    /**
     * States whether the assignment is available across all organizations or not. Defaults to `false`.
     */
    global?: pulumi.Input<boolean>;
    /**
     * Unique identifier of the role to assign to `builtinRole`.
     */
    uid: pulumi.Input<string>;
}

export interface CloudAccessPolicyRealm {
    /**
     * The identifier of the org or stack. For orgs, this is the slug, for stacks, this is the stack ID.
     */
    identifier: pulumi.Input<string>;
    labelPolicies?: pulumi.Input<pulumi.Input<inputs.CloudAccessPolicyRealmLabelPolicy>[]>;
    /**
     * Whether a policy applies to a Cloud org or a specific stack. Should be one of `org` or `stack`.
     */
    type: pulumi.Input<string>;
}

export interface CloudAccessPolicyRealmLabelPolicy {
    selector: pulumi.Input<string>;
}

export interface ContactPointAlertmanager {
    /**
     * The password component of the basic auth credentials to use.
     */
    basicAuthPassword?: pulumi.Input<string>;
    /**
     * The username component of the basic auth credentials to use.
     */
    basicAuthUser?: pulumi.Input<string>;
    /**
     * Whether to disable sending resolve messages. Defaults to `false`.
     */
    disableResolveMessage?: pulumi.Input<boolean>;
    /**
     * Additional custom properties to attach to the notifier. Defaults to `map[]`.
     */
    settings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The UID of the contact point.
     */
    uid?: pulumi.Input<string>;
    /**
     * The URL of the Alertmanager instance.
     */
    url: pulumi.Input<string>;
}

export interface ContactPointDingding {
    /**
     * Whether to disable sending resolve messages. Defaults to `false`.
     */
    disableResolveMessage?: pulumi.Input<boolean>;
    /**
     * The templated content of the message.
     */
    message?: pulumi.Input<string>;
    /**
     * The format of message to send - either 'link' or 'actionCard'
     */
    messageType?: pulumi.Input<string>;
    /**
     * Additional custom properties to attach to the notifier. Defaults to `map[]`.
     */
    settings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The templated title of the message.
     */
    title?: pulumi.Input<string>;
    /**
     * The UID of the contact point.
     */
    uid?: pulumi.Input<string>;
    /**
     * The DingDing webhook URL.
     */
    url: pulumi.Input<string>;
}

export interface ContactPointDiscord {
    /**
     * The URL of a custom avatar image to use. Defaults to ``.
     */
    avatarUrl?: pulumi.Input<string>;
    /**
     * Whether to disable sending resolve messages. Defaults to `false`.
     */
    disableResolveMessage?: pulumi.Input<boolean>;
    /**
     * The templated content of the message. Defaults to ``.
     */
    message?: pulumi.Input<string>;
    /**
     * Additional custom properties to attach to the notifier. Defaults to `map[]`.
     */
    settings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The UID of the contact point.
     */
    uid?: pulumi.Input<string>;
    /**
     * The discord webhook URL.
     */
    url: pulumi.Input<string>;
    /**
     * Whether to use the bot account's plain username instead of "Grafana." Defaults to `false`.
     */
    useDiscordUsername?: pulumi.Input<boolean>;
}

export interface ContactPointEmail {
    /**
     * The addresses to send emails to.
     */
    addresses: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether to disable sending resolve messages. Defaults to `false`.
     */
    disableResolveMessage?: pulumi.Input<boolean>;
    /**
     * The templated content of the email. Defaults to ``.
     */
    message?: pulumi.Input<string>;
    /**
     * Additional custom properties to attach to the notifier. Defaults to `map[]`.
     */
    settings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Whether to send a single email CC'ing all addresses, rather than a separate email to each address. Defaults to `false`.
     */
    singleEmail?: pulumi.Input<boolean>;
    /**
     * The templated subject line of the email. Defaults to ``.
     */
    subject?: pulumi.Input<string>;
    /**
     * The UID of the contact point.
     */
    uid?: pulumi.Input<string>;
}

export interface ContactPointGooglechat {
    /**
     * Whether to disable sending resolve messages. Defaults to `false`.
     */
    disableResolveMessage?: pulumi.Input<boolean>;
    /**
     * The templated content of the message.
     */
    message?: pulumi.Input<string>;
    /**
     * Additional custom properties to attach to the notifier. Defaults to `map[]`.
     */
    settings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The UID of the contact point.
     */
    uid?: pulumi.Input<string>;
    /**
     * The Google Chat webhook URL.
     */
    url: pulumi.Input<string>;
}

export interface ContactPointKafka {
    /**
     * Whether to disable sending resolve messages. Defaults to `false`.
     */
    disableResolveMessage?: pulumi.Input<boolean>;
    /**
     * The URL of the Kafka REST proxy to send requests to.
     */
    restProxyUrl: pulumi.Input<string>;
    /**
     * Additional custom properties to attach to the notifier. Defaults to `map[]`.
     */
    settings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the Kafka topic to publish to.
     */
    topic: pulumi.Input<string>;
    /**
     * The UID of the contact point.
     */
    uid?: pulumi.Input<string>;
}

export interface ContactPointOpsgeny {
    /**
     * The OpsGenie API key to use.
     */
    apiKey: pulumi.Input<string>;
    /**
     * Whether to auto-close alerts in OpsGenie when they resolve in the Alertmanager.
     */
    autoClose?: pulumi.Input<boolean>;
    /**
     * A templated high-level description to use for the alert.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether to disable sending resolve messages. Defaults to `false`.
     */
    disableResolveMessage?: pulumi.Input<boolean>;
    /**
     * The templated content of the message.
     */
    message?: pulumi.Input<string>;
    /**
     * Whether to allow the alert priority to be configured via the value of the `ogPriority` annotation on the alert.
     */
    overridePriority?: pulumi.Input<boolean>;
    /**
     * Whether to send annotations to OpsGenie as Tags, Details, or both. Supported values are `tags`, `details`, `both`, or empty to use the default behavior of Tags.
     */
    sendTagsAs?: pulumi.Input<string>;
    /**
     * Additional custom properties to attach to the notifier. Defaults to `map[]`.
     */
    settings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The UID of the contact point.
     */
    uid?: pulumi.Input<string>;
    /**
     * Allows customization of the OpsGenie API URL.
     */
    url?: pulumi.Input<string>;
}

export interface ContactPointPagerduty {
    /**
     * The class or type of event, for example `ping failure`.
     */
    class?: pulumi.Input<string>;
    /**
     * The name of the monitoring client that is triggering this event.
     */
    client?: pulumi.Input<string>;
    /**
     * The URL of the monitoring client that is triggering this event.
     */
    clientUrl?: pulumi.Input<string>;
    /**
     * The component being affected by the event.
     */
    component?: pulumi.Input<string>;
    /**
     * A set of arbitrary key/value pairs that provide further detail about the incident.
     */
    details?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Whether to disable sending resolve messages. Defaults to `false`.
     */
    disableResolveMessage?: pulumi.Input<boolean>;
    /**
     * The group to which the provided component belongs to.
     */
    group?: pulumi.Input<string>;
    /**
     * The PagerDuty API key.
     */
    integrationKey: pulumi.Input<string>;
    /**
     * Additional custom properties to attach to the notifier. Defaults to `map[]`.
     */
    settings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The PagerDuty event severity level. Default is `critical`.
     */
    severity?: pulumi.Input<string>;
    /**
     * The unique location of the affected system.
     */
    source?: pulumi.Input<string>;
    /**
     * The templated summary message of the event.
     */
    summary?: pulumi.Input<string>;
    /**
     * The UID of the contact point.
     */
    uid?: pulumi.Input<string>;
}

export interface ContactPointPushover {
    /**
     * The Pushover API token.
     */
    apiToken: pulumi.Input<string>;
    /**
     * Comma-separated list of devices to which the event is associated.
     */
    device?: pulumi.Input<string>;
    /**
     * Whether to disable sending resolve messages. Defaults to `false`.
     */
    disableResolveMessage?: pulumi.Input<boolean>;
    /**
     * How many seconds for which the notification will continue to be retried by Pushover.
     */
    expire?: pulumi.Input<number>;
    /**
     * The templated notification message content.
     */
    message?: pulumi.Input<string>;
    /**
     * The priority level of the resolved event.
     */
    okPriority?: pulumi.Input<number>;
    /**
     * The sound associated with the resolved notification.
     */
    okSound?: pulumi.Input<string>;
    /**
     * The priority level of the event.
     */
    priority?: pulumi.Input<number>;
    /**
     * How often, in seconds, the Pushover servers will send the same notification to the user.
     */
    retry?: pulumi.Input<number>;
    /**
     * Additional custom properties to attach to the notifier. Defaults to `map[]`.
     */
    settings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The sound associated with the notification.
     */
    sound?: pulumi.Input<string>;
    /**
     * The templated title of the message.
     */
    title?: pulumi.Input<string>;
    /**
     * The UID of the contact point.
     */
    uid?: pulumi.Input<string>;
    /**
     * The Pushover user key.
     */
    userKey: pulumi.Input<string>;
}

export interface ContactPointSensugo {
    /**
     * The SensuGo API key.
     */
    apiKey: pulumi.Input<string>;
    /**
     * The SensuGo check to which the event should be routed.
     */
    check?: pulumi.Input<string>;
    /**
     * Whether to disable sending resolve messages. Defaults to `false`.
     */
    disableResolveMessage?: pulumi.Input<boolean>;
    /**
     * The entity being monitored.
     */
    entity?: pulumi.Input<string>;
    /**
     * A custom handler to execute in addition to the check.
     */
    handler?: pulumi.Input<string>;
    /**
     * Templated message content describing the alert.
     */
    message?: pulumi.Input<string>;
    /**
     * The namespace in which the check resides.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Additional custom properties to attach to the notifier. Defaults to `map[]`.
     */
    settings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The UID of the contact point.
     */
    uid?: pulumi.Input<string>;
    /**
     * The SensuGo URL to send requests to.
     */
    url: pulumi.Input<string>;
}

export interface ContactPointSlack {
    /**
     * Whether to disable sending resolve messages. Defaults to `false`.
     */
    disableResolveMessage?: pulumi.Input<boolean>;
    /**
     * Use this to override the Slack API endpoint URL to send requests to.
     */
    endpointUrl?: pulumi.Input<string>;
    /**
     * The name of a Slack workspace emoji to use as the bot icon.
     */
    iconEmoji?: pulumi.Input<string>;
    /**
     * A URL of an image to use as the bot icon.
     */
    iconUrl?: pulumi.Input<string>;
    /**
     * Describes how to ping the slack channel that messages are being sent to. Options are `here` for an @here ping, `channel` for @channel, or empty for no ping.
     */
    mentionChannel?: pulumi.Input<string>;
    /**
     * Comma-separated list of groups to mention in the message.
     */
    mentionGroups?: pulumi.Input<string>;
    /**
     * Comma-separated list of users to mention in the message.
     */
    mentionUsers?: pulumi.Input<string>;
    /**
     * Channel, private group, or IM channel (can be an encoded ID or a name) to send messages to.
     */
    recipient?: pulumi.Input<string>;
    /**
     * Additional custom properties to attach to the notifier. Defaults to `map[]`.
     */
    settings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Templated content of the message.
     */
    text?: pulumi.Input<string>;
    /**
     * Templated title of the message.
     */
    title?: pulumi.Input<string>;
    /**
     * A Slack API token,for sending messages directly without the webhook method.
     */
    token?: pulumi.Input<string>;
    /**
     * The UID of the contact point.
     */
    uid?: pulumi.Input<string>;
    /**
     * A Slack webhook URL,for sending messages via the webhook method.
     */
    url?: pulumi.Input<string>;
    /**
     * Username for the bot to use.
     */
    username?: pulumi.Input<string>;
}

export interface ContactPointTeam {
    /**
     * Whether to disable sending resolve messages. Defaults to `false`.
     */
    disableResolveMessage?: pulumi.Input<boolean>;
    /**
     * The templated message content to send.
     */
    message?: pulumi.Input<string>;
    /**
     * The templated subtitle for each message section.
     */
    sectionTitle?: pulumi.Input<string>;
    /**
     * Additional custom properties to attach to the notifier. Defaults to `map[]`.
     */
    settings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The templated title of the message.
     */
    title?: pulumi.Input<string>;
    /**
     * The UID of the contact point.
     */
    uid?: pulumi.Input<string>;
    /**
     * A Teams webhook URL.
     */
    url: pulumi.Input<string>;
}

export interface ContactPointTelegram {
    /**
     * The chat ID to send messages to.
     */
    chatId: pulumi.Input<string>;
    /**
     * Whether to disable sending resolve messages. Defaults to `false`.
     */
    disableResolveMessage?: pulumi.Input<boolean>;
    /**
     * The templated content of the message.
     */
    message?: pulumi.Input<string>;
    /**
     * Additional custom properties to attach to the notifier. Defaults to `map[]`.
     */
    settings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The Telegram bot token.
     */
    token: pulumi.Input<string>;
    /**
     * The UID of the contact point.
     */
    uid?: pulumi.Input<string>;
}

export interface ContactPointThreema {
    /**
     * The Threema API key.
     */
    apiSecret: pulumi.Input<string>;
    /**
     * The templated description of the message.
     */
    description: pulumi.Input<string>;
    /**
     * Whether to disable sending resolve messages. Defaults to `false`.
     */
    disableResolveMessage?: pulumi.Input<boolean>;
    /**
     * The Threema gateway ID.
     */
    gatewayId: pulumi.Input<string>;
    /**
     * The ID of the recipient of the message.
     */
    recipientId: pulumi.Input<string>;
    /**
     * Additional custom properties to attach to the notifier. Defaults to `map[]`.
     */
    settings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The templated title of the message.
     */
    title: pulumi.Input<string>;
    /**
     * The UID of the contact point.
     */
    uid?: pulumi.Input<string>;
}

export interface ContactPointVictorop {
    /**
     * Templated description of the message.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether to disable sending resolve messages. Defaults to `false`.
     */
    disableResolveMessage?: pulumi.Input<boolean>;
    /**
     * The VictorOps alert state - typically either `CRITICAL` or `RECOVERY`.
     */
    messageType?: pulumi.Input<string>;
    /**
     * Additional custom properties to attach to the notifier. Defaults to `map[]`.
     */
    settings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Templated title to display.
     */
    title?: pulumi.Input<string>;
    /**
     * The UID of the contact point.
     */
    uid?: pulumi.Input<string>;
    /**
     * The VictorOps webhook URL.
     */
    url: pulumi.Input<string>;
}

export interface ContactPointWebhook {
    /**
     * Allows a custom authorization scheme - attaches an auth header with this value. Do not use in conjunction with basic auth parameters.
     */
    authorizationCredentials?: pulumi.Input<string>;
    /**
     * Allows a custom authorization scheme - attaches an auth header with this name. Do not use in conjunction with basic auth parameters.
     */
    authorizationScheme?: pulumi.Input<string>;
    /**
     * The username to use in basic auth headers attached to the request. If omitted, basic auth will not be used.
     */
    basicAuthPassword?: pulumi.Input<string>;
    /**
     * The username to use in basic auth headers attached to the request. If omitted, basic auth will not be used.
     */
    basicAuthUser?: pulumi.Input<string>;
    /**
     * Whether to disable sending resolve messages. Defaults to `false`.
     */
    disableResolveMessage?: pulumi.Input<boolean>;
    /**
     * The HTTP method to use in the request. Defaults to `POST`.
     */
    httpMethod?: pulumi.Input<string>;
    /**
     * The maximum number of alerts to send in a single request. This can be helpful in limiting the size of the request body. The default is 0, which indicates no limit.
     */
    maxAlerts?: pulumi.Input<number>;
    /**
     * Custom message. You can use template variables.
     */
    message?: pulumi.Input<string>;
    /**
     * Additional custom properties to attach to the notifier. Defaults to `map[]`.
     */
    settings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Templated title of the message.
     */
    title?: pulumi.Input<string>;
    /**
     * The UID of the contact point.
     */
    uid?: pulumi.Input<string>;
    /**
     * The URL to send webhook requests to.
     */
    url: pulumi.Input<string>;
}

export interface ContactPointWecom {
    /**
     * Whether to disable sending resolve messages. Defaults to `false`.
     */
    disableResolveMessage?: pulumi.Input<boolean>;
    /**
     * The templated content of the message to send.
     */
    message?: pulumi.Input<string>;
    /**
     * Additional custom properties to attach to the notifier. Defaults to `map[]`.
     */
    settings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The templated title of the message to send.
     */
    title?: pulumi.Input<string>;
    /**
     * The UID of the contact point.
     */
    uid?: pulumi.Input<string>;
    /**
     * The WeCom webhook URL.
     */
    url: pulumi.Input<string>;
}

export interface DashboardPermissionPermission {
    /**
     * Permission to associate with item. Must be one of `View`, `Edit`, or `Admin`.
     */
    permission: pulumi.Input<string>;
    /**
     * Manage permissions for `Viewer` or `Editor` roles.
     */
    role?: pulumi.Input<string>;
    /**
     * ID of the team to manage permissions for. Defaults to `0`.
     */
    teamId?: pulumi.Input<number>;
    /**
     * ID of the user to manage permissions for. Defaults to `0`.
     */
    userId?: pulumi.Input<number>;
}

export interface DataSourceJsonData {
    /**
     * (Prometheus) The name of the Alertmanager datasource to manage alerts via UI
     */
    alertmanagerUid?: pulumi.Input<string>;
    /**
     * (CloudWatch, Athena) The ARN of the role to be assumed by Grafana when using the CloudWatch or Athena data source.
     */
    assumeRoleArn?: pulumi.Input<string>;
    /**
     * (CloudWatch, Athena) The authentication type used to access the data source.
     */
    authType?: pulumi.Input<string>;
    /**
     * (Stackdriver) The authentication type: `jwt` or `gce`.
     */
    authenticationType?: pulumi.Input<string>;
    /**
     * (Athena) Athena catalog.
     */
    catalog?: pulumi.Input<string>;
    /**
     * (Stackdriver) Service account email address.
     */
    clientEmail?: pulumi.Input<string>;
    /**
     * (Azure Monitor) The service account client id.
     */
    clientId?: pulumi.Input<string>;
    /**
     * (Azure Monitor) The cloud name.
     */
    cloudName?: pulumi.Input<string>;
    /**
     * (MySQL, PostgreSQL, and MSSQL) Maximum amount of time in seconds a connection may be reused (Grafana v5.4+).
     */
    connMaxLifetime?: pulumi.Input<number>;
    /**
     * (CloudWatch) A comma-separated list of custom namespaces to be queried by the CloudWatch data source.
     */
    customMetricsNamespaces?: pulumi.Input<string>;
    /**
     * (Athena) Name of the database within the catalog.
     */
    database?: pulumi.Input<string>;
    /**
     * (InfluxDB) The default bucket for the data source.
     */
    defaultBucket?: pulumi.Input<string>;
    /**
     * (Stackdriver) The default project for the data source.
     */
    defaultProject?: pulumi.Input<string>;
    /**
     * (CloudWatch, Athena) The default region for the data source.
     */
    defaultRegion?: pulumi.Input<string>;
    /**
     * (Loki) See https://grafana.com/docs/grafana/latest/datasources/loki/#derived-fields
     */
    derivedFields?: pulumi.Input<pulumi.Input<inputs.DataSourceJsonDataDerivedField>[]>;
    /**
     * (MSSQL) Connection SSL encryption handling: 'disable', 'false' or 'true'.
     */
    encrypt?: pulumi.Input<string>;
    /**
     * (Elasticsearch) Elasticsearch semantic version (Grafana v8.0+).
     */
    esVersion?: pulumi.Input<string>;
    /**
     * (CloudWatch, Athena) If you are assuming a role in another account, that has been created with an external ID, specify the external ID here.
     */
    externalId?: pulumi.Input<string>;
    /**
     * (Github) Github URL
     */
    githubUrl?: pulumi.Input<string>;
    /**
     * (Graphite) Graphite version.
     */
    graphiteVersion?: pulumi.Input<string>;
    /**
     * (Prometheus) HTTP method to use for making requests.
     */
    httpMethod?: pulumi.Input<string>;
    /**
     * (Alertmanager) Implementation of Alertmanager. Either 'cortex' or 'prometheus'
     */
    implementation?: pulumi.Input<string>;
    /**
     * (Elasticsearch) Index date time format. nil(No Pattern), 'Hourly', 'Daily', 'Weekly', 'Monthly' or 'Yearly'.
     */
    interval?: pulumi.Input<string>;
    /**
     * (Elasticsearch) Which field should be used to indicate the priority of the log message.
     */
    logLevelField?: pulumi.Input<string>;
    /**
     * (Elasticsearch) Which field should be used as the log message.
     */
    logMessageField?: pulumi.Input<string>;
    /**
     * (Prometheus) Manage alerts.
     */
    manageAlerts?: pulumi.Input<boolean>;
    /**
     * (Elasticsearch) Maximum number of concurrent shard requests.
     */
    maxConcurrentShardRequests?: pulumi.Input<number>;
    /**
     * (MySQL, PostgreSQL and MSSQL) Maximum number of connections in the idle connection pool (Grafana v5.4+).
     */
    maxIdleConns?: pulumi.Input<number>;
    /**
     * (Loki) Upper limit for the number of log lines returned by Loki
     */
    maxLines?: pulumi.Input<number>;
    /**
     * (MySQL, PostgreSQL and MSSQL) Maximum number of open connections to the database (Grafana v5.4+).
     */
    maxOpenConns?: pulumi.Input<number>;
    /**
     * (Sentry) Organization slug.
     */
    orgSlug?: pulumi.Input<string>;
    /**
     * (InfluxDB) An organization is a workspace for a group of users. All dashboards, tasks, buckets, members, etc., belong to an organization.
     */
    organization?: pulumi.Input<string>;
    /**
     * (Athena) AWS S3 bucket to store execution outputs. If not specified, the default query result location from the Workgroup configuration will be used.
     */
    outputLocation?: pulumi.Input<string>;
    /**
     * (PostgreSQL) Postgres version as a number (903/904/905/906/1000) meaning v9.3, v9.4, etc.
     */
    postgresVersion?: pulumi.Input<number>;
    /**
     * (CloudWatch, Athena) The credentials profile name to use when authentication type is set as 'Credentials file'.
     */
    profile?: pulumi.Input<string>;
    /**
     * (Prometheus) Timeout for queries made to the Prometheus data source in seconds.
     */
    queryTimeout?: pulumi.Input<string>;
    /**
     * (Elasticsearch and Prometheus) Specifies the ARN of an IAM role to assume.
     */
    sigv4AssumeRoleArn?: pulumi.Input<string>;
    /**
     * (Elasticsearch and Prometheus) Enable usage of SigV4.
     */
    sigv4Auth?: pulumi.Input<boolean>;
    /**
     * (Elasticsearch and Prometheus) The Sigv4 authentication provider to use: 'default', 'credentials' or 'keys' (AMG: 'workspace-iam-role').
     */
    sigv4AuthType?: pulumi.Input<string>;
    /**
     * (Elasticsearch and Prometheus) When assuming a role in another account use this external ID.
     */
    sigv4ExternalId?: pulumi.Input<string>;
    /**
     * (Elasticsearch and Prometheus) Credentials profile name, leave blank for default.
     */
    sigv4Profile?: pulumi.Input<string>;
    /**
     * (Elasticsearch and Prometheus) AWS region to use for Sigv4.
     */
    sigv4Region?: pulumi.Input<string>;
    /**
     * (PostgreSQL) SSLmode. 'disable', 'require', 'verify-ca' or 'verify-full'.
     */
    sslMode?: pulumi.Input<string>;
    /**
     * (Azure Monitor) The subscription id
     */
    subscriptionId?: pulumi.Input<string>;
    /**
     * (Azure Monitor) Service account tenant ID.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * (Elasticsearch) Which field that should be used as timestamp.
     */
    timeField?: pulumi.Input<string>;
    /**
     * (Prometheus, Elasticsearch, InfluxDB, MySQL, PostgreSQL, and MSSQL) Lowest interval/step value that should be used for this data source. Sometimes called "Scrape Interval" in the Grafana UI.
     */
    timeInterval?: pulumi.Input<string>;
    /**
     * (PostgreSQL) Enable usage of TimescaleDB extension.
     */
    timescaledb?: pulumi.Input<boolean>;
    /**
     * (All) Enable TLS authentication using client cert configured in secure json data.
     */
    tlsAuth?: pulumi.Input<boolean>;
    /**
     * (All) Enable TLS authentication using CA cert.
     */
    tlsAuthWithCaCert?: pulumi.Input<boolean>;
    /**
     * (All) SSL Certificate configuration, either by ‘file-path’ or ‘file-content’.
     */
    tlsConfigurationMethod?: pulumi.Input<string>;
    /**
     * (All) Controls whether a client verifies the server’s certificate chain and host name.
     */
    tlsSkipVerify?: pulumi.Input<boolean>;
    /**
     * (Stackdriver) The token URI used, provided in the service account key.
     */
    tokenUri?: pulumi.Input<string>;
    /**
     * (Cloudwatch) The X-Ray datasource uid to associate to this Cloudwatch datasource.
     */
    tracingDatasourceUid?: pulumi.Input<string>;
    /**
     * (OpenTSDB) Resolution.
     */
    tsdbResolution?: pulumi.Input<number>;
    /**
     * (OpenTSDB) Version.
     */
    tsdbVersion?: pulumi.Input<number>;
    /**
     * (InfluxDB) InfluxQL or Flux.
     */
    version?: pulumi.Input<string>;
    /**
     * (Athena) Workgroup to use.
     */
    workgroup?: pulumi.Input<string>;
    /**
     * (Elasticsearch) Enable X-Pack support.
     */
    xpackEnabled?: pulumi.Input<boolean>;
}

export interface DataSourceJsonDataDerivedField {
    datasourceUid?: pulumi.Input<string>;
    matcherRegex?: pulumi.Input<string>;
    /**
     * A unique name for the data source.
     */
    name?: pulumi.Input<string>;
    /**
     * The URL for the data source. The type of URL required varies depending on the chosen data source type.
     */
    url?: pulumi.Input<string>;
}

export interface DataSourcePermissionPermission {
    /**
     * Name of the basic role to manage permissions for. Options: `Viewer`, `Editor` or `Admin`. Can only be set from Grafana v9.2.3+. Defaults to ``.
     */
    builtInRole?: pulumi.Input<string>;
    /**
     * Permission to associate with item. Options: `Query` or `Edit` (`Edit` can only be used with Grafana v9.2.3+).
     */
    permission: pulumi.Input<string>;
    /**
     * ID of the team to manage permissions for. Defaults to `0`.
     */
    teamId?: pulumi.Input<number>;
    /**
     * ID of the user to manage permissions for. Defaults to `0`.
     */
    userId?: pulumi.Input<number>;
}

export interface DataSourceSecureJsonData {
    /**
     * (CloudWatch, Athena) The access key used to access the data source.
     */
    accessKey?: pulumi.Input<string>;
    /**
     * (Github) The access token used to access the data source.
     */
    accessToken?: pulumi.Input<string>;
    /**
     * (Sentry) Authorization token.
     */
    authToken?: pulumi.Input<string>;
    /**
     * (All) Password to use for basic authentication.
     */
    basicAuthPassword?: pulumi.Input<string>;
    /**
     * (Azure Monitor) Client secret for authentication.
     */
    clientSecret?: pulumi.Input<string>;
    /**
     * (All) Password to use for authentication.
     */
    password?: pulumi.Input<string>;
    /**
     * (Stackdriver) The service account key `privateKey` to use to access the data source.
     */
    privateKey?: pulumi.Input<string>;
    /**
     * (CloudWatch, Athena) The secret key to use to access the data source.
     */
    secretKey?: pulumi.Input<string>;
    /**
     * (Elasticsearch and Prometheus) SigV4 access key. Required when using 'keys' auth provider.
     */
    sigv4AccessKey?: pulumi.Input<string>;
    /**
     * (Elasticsearch and Prometheus) SigV4 secret key. Required when using 'keys' auth provider.
     */
    sigv4SecretKey?: pulumi.Input<string>;
    /**
     * (All) CA cert for out going requests.
     */
    tlsCaCert?: pulumi.Input<string>;
    /**
     * (All) TLS Client cert for outgoing requests.
     */
    tlsClientCert?: pulumi.Input<string>;
    /**
     * (All) TLS Client key for outgoing requests.
     */
    tlsClientKey?: pulumi.Input<string>;
}

export interface FolderPermissionPermission {
    /**
     * Permission to associate with item. Must be one of `View`, `Edit`, or `Admin`.
     */
    permission: pulumi.Input<string>;
    /**
     * Manage permissions for `Viewer` or `Editor` roles.
     */
    role?: pulumi.Input<string>;
    /**
     * ID of the team to manage permissions for. Defaults to `0`.
     */
    teamId?: pulumi.Input<number>;
    /**
     * ID of the user to manage permissions for. Defaults to `0`.
     */
    userId?: pulumi.Input<number>;
}

export interface MachineLearningHolidayCustomPeriod {
    endTime: pulumi.Input<string>;
    /**
     * The name of the custom period.
     */
    name?: pulumi.Input<string>;
    startTime: pulumi.Input<string>;
}

export interface MachineLearningOutlierDetectorAlgorithm {
    /**
     * For DBSCAN only, specify the configuration map
     */
    config?: pulumi.Input<inputs.MachineLearningOutlierDetectorAlgorithmConfig>;
    /**
     * The name of the algorithm to use ('mad' or 'dbscan').
     */
    name: pulumi.Input<string>;
    /**
     * Specify the sensitivity of the detector (in range [0,1]).
     */
    sensitivity: pulumi.Input<number>;
}

export interface MachineLearningOutlierDetectorAlgorithmConfig {
    epsilon: pulumi.Input<number>;
}

export interface MuteTimingInterval {
    /**
     * An inclusive range of days, 1-31, within a month, e.g. "1" or "14:16". Negative values can be used to represent days counting from the end of a month, e.g. "-1".
     */
    daysOfMonths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An inclusive range of months, either numerical or full calendar month, e.g. "1:3", "december", or "may:august".
     */
    months?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The time ranges, represented in minutes, during which to mute in a given day.
     */
    times?: pulumi.Input<pulumi.Input<inputs.MuteTimingIntervalTime>[]>;
    /**
     * An inclusive range of weekdays, e.g. "monday" or "tuesday:thursday".
     */
    weekdays?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A positive inclusive range of years, e.g. "2030" or "2025:2026".
     */
    years?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface MuteTimingIntervalTime {
    end: pulumi.Input<string>;
    start: pulumi.Input<string>;
}

export interface NotificationPolicyPolicy {
    /**
     * The contact point to route notifications that match this rule to.
     */
    contactPoint: pulumi.Input<string>;
    /**
     * Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.
     */
    continue?: pulumi.Input<boolean>;
    /**
     * A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping.
     */
    groupBies: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Minimum time interval between two notifications for the same group. Default is 5 minutes.
     */
    groupInterval?: pulumi.Input<string>;
    /**
     * Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
     */
    groupWait?: pulumi.Input<string>;
    /**
     * Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.
     */
    matchers?: pulumi.Input<pulumi.Input<inputs.NotificationPolicyPolicyMatcher>[]>;
    /**
     * A list of mute timing names to apply to alerts that match this policy.
     */
    muteTimings?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Routing rules for specific label sets.
     */
    policies?: pulumi.Input<pulumi.Input<inputs.NotificationPolicyPolicyPolicy>[]>;
    /**
     * Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
     */
    repeatInterval?: pulumi.Input<string>;
}

export interface NotificationPolicyPolicyMatcher {
    label: pulumi.Input<string>;
    match: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface NotificationPolicyPolicyPolicy {
    /**
     * The contact point to route notifications that match this rule to.
     */
    contactPoint: pulumi.Input<string>;
    /**
     * Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.
     */
    continue?: pulumi.Input<boolean>;
    /**
     * A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping.
     */
    groupBies: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Minimum time interval between two notifications for the same group. Default is 5 minutes.
     */
    groupInterval?: pulumi.Input<string>;
    /**
     * Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
     */
    groupWait?: pulumi.Input<string>;
    /**
     * Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.
     */
    matchers?: pulumi.Input<pulumi.Input<inputs.NotificationPolicyPolicyPolicyMatcher>[]>;
    /**
     * A list of mute timing names to apply to alerts that match this policy.
     */
    muteTimings?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Routing rules for specific label sets.
     */
    policies?: pulumi.Input<pulumi.Input<inputs.NotificationPolicyPolicyPolicyPolicy>[]>;
    /**
     * Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
     */
    repeatInterval?: pulumi.Input<string>;
}

export interface NotificationPolicyPolicyPolicyMatcher {
    label: pulumi.Input<string>;
    match: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface NotificationPolicyPolicyPolicyPolicy {
    /**
     * The contact point to route notifications that match this rule to.
     */
    contactPoint: pulumi.Input<string>;
    /**
     * Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.
     */
    continue?: pulumi.Input<boolean>;
    /**
     * A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping.
     */
    groupBies: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Minimum time interval between two notifications for the same group. Default is 5 minutes.
     */
    groupInterval?: pulumi.Input<string>;
    /**
     * Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
     */
    groupWait?: pulumi.Input<string>;
    /**
     * Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.
     */
    matchers?: pulumi.Input<pulumi.Input<inputs.NotificationPolicyPolicyPolicyPolicyMatcher>[]>;
    /**
     * A list of mute timing names to apply to alerts that match this policy.
     */
    muteTimings?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Routing rules for specific label sets.
     */
    policies?: pulumi.Input<pulumi.Input<inputs.NotificationPolicyPolicyPolicyPolicyPolicy>[]>;
    /**
     * Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
     */
    repeatInterval?: pulumi.Input<string>;
}

export interface NotificationPolicyPolicyPolicyPolicyMatcher {
    label: pulumi.Input<string>;
    match: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface NotificationPolicyPolicyPolicyPolicyPolicy {
    /**
     * The contact point to route notifications that match this rule to.
     */
    contactPoint: pulumi.Input<string>;
    /**
     * Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.
     */
    continue?: pulumi.Input<boolean>;
    /**
     * A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping.
     */
    groupBies: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Minimum time interval between two notifications for the same group. Default is 5 minutes.
     */
    groupInterval?: pulumi.Input<string>;
    /**
     * Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
     */
    groupWait?: pulumi.Input<string>;
    /**
     * Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.
     */
    matchers?: pulumi.Input<pulumi.Input<inputs.NotificationPolicyPolicyPolicyPolicyPolicyMatcher>[]>;
    /**
     * A list of mute timing names to apply to alerts that match this policy.
     */
    muteTimings?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
     */
    repeatInterval?: pulumi.Input<string>;
}

export interface NotificationPolicyPolicyPolicyPolicyPolicyMatcher {
    label: pulumi.Input<string>;
    match: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface OncallIntegrationDefaultRoute {
    /**
     * The ID of the escalation chain.
     */
    escalationChainId?: pulumi.Input<string>;
    /**
     * The ID of this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * MS teams-specific settings for a route.
     */
    msteams?: pulumi.Input<inputs.OncallIntegrationDefaultRouteMsteams>;
    /**
     * Slack-specific settings for a route.
     */
    slack?: pulumi.Input<inputs.OncallIntegrationDefaultRouteSlack>;
    /**
     * Telegram-specific settings for a route.
     */
    telegram?: pulumi.Input<inputs.OncallIntegrationDefaultRouteTelegram>;
}

export interface OncallIntegrationDefaultRouteMsteams {
    enabled?: pulumi.Input<boolean>;
    /**
     * The ID of this resource.
     */
    id?: pulumi.Input<string>;
}

export interface OncallIntegrationDefaultRouteSlack {
    channelId?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
}

export interface OncallIntegrationDefaultRouteTelegram {
    enabled?: pulumi.Input<boolean>;
    /**
     * The ID of this resource.
     */
    id?: pulumi.Input<string>;
}

export interface OncallIntegrationTemplates {
    /**
     * Template for sending a signal to acknowledge the Incident.
     */
    acknowledgeSignal?: pulumi.Input<string>;
    /**
     * Templates for Email.
     */
    email?: pulumi.Input<inputs.OncallIntegrationTemplatesEmail>;
    /**
     * Template for the key by which alerts are grouped.
     */
    groupingKey?: pulumi.Input<string>;
    /**
     * Templates for Microsoft Teams.
     */
    microsoftTeams?: pulumi.Input<inputs.OncallIntegrationTemplatesMicrosoftTeams>;
    /**
     * Templates for Phone Call.
     */
    phoneCall?: pulumi.Input<inputs.OncallIntegrationTemplatesPhoneCall>;
    /**
     * Template for sending a signal to resolve the Incident.
     */
    resolveSignal?: pulumi.Input<string>;
    /**
     * Templates for Slack.
     */
    slack?: pulumi.Input<inputs.OncallIntegrationTemplatesSlack>;
    /**
     * Templates for SMS.
     */
    sms?: pulumi.Input<inputs.OncallIntegrationTemplatesSms>;
    /**
     * Template for a source link.
     */
    sourceLink?: pulumi.Input<string>;
    /**
     * Templates for Telegram.
     */
    telegram?: pulumi.Input<inputs.OncallIntegrationTemplatesTelegram>;
    /**
     * Templates for Web.
     */
    web?: pulumi.Input<inputs.OncallIntegrationTemplatesWeb>;
}

export interface OncallIntegrationTemplatesEmail {
    message?: pulumi.Input<string>;
    title?: pulumi.Input<string>;
}

export interface OncallIntegrationTemplatesMicrosoftTeams {
    imageUrl?: pulumi.Input<string>;
    message?: pulumi.Input<string>;
    title?: pulumi.Input<string>;
}

export interface OncallIntegrationTemplatesPhoneCall {
    title?: pulumi.Input<string>;
}

export interface OncallIntegrationTemplatesSlack {
    imageUrl?: pulumi.Input<string>;
    message?: pulumi.Input<string>;
    title?: pulumi.Input<string>;
}

export interface OncallIntegrationTemplatesSms {
    title?: pulumi.Input<string>;
}

export interface OncallIntegrationTemplatesTelegram {
    imageUrl?: pulumi.Input<string>;
    message?: pulumi.Input<string>;
    title?: pulumi.Input<string>;
}

export interface OncallIntegrationTemplatesWeb {
    imageUrl?: pulumi.Input<string>;
    message?: pulumi.Input<string>;
    title?: pulumi.Input<string>;
}

export interface OncallRouteMsteams {
    /**
     * Enable notification in MS teams. Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * MS teams channel id. Alerts will be directed to this channel in Microsoft teams.
     */
    id?: pulumi.Input<string>;
}

export interface OncallRouteSlack {
    /**
     * Slack channel id. Alerts will be directed to this channel in Slack.
     */
    channelId?: pulumi.Input<string>;
    /**
     * Enable notification in Slack. Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
}

export interface OncallRouteTelegram {
    /**
     * Enable notification in Telegram. Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Telegram channel id. Alerts will be directed to this channel in Telegram.
     */
    id?: pulumi.Input<string>;
}

export interface OncallScheduleSlack {
    /**
     * Slack channel id. Reminder about schedule shifts will be directed to this channel in Slack.
     */
    channelId?: pulumi.Input<string>;
    /**
     * Slack user group id. Members of user group will be updated when on-call users change.
     */
    userGroupId?: pulumi.Input<string>;
}

export interface PlaylistItem {
    /**
     * The ID of this resource.
     */
    id?: pulumi.Input<string>;
    order: pulumi.Input<number>;
    title: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ReportSchedule {
    /**
     * Custom interval of the report.
     * **Note:** This field is only available when frequency is set to `custom`.
     */
    customInterval?: pulumi.Input<string>;
    /**
     * End time of the report. If empty, the report will be sent indefinitely (according to frequency). Note that times will be saved as UTC in Grafana.
     */
    endTime?: pulumi.Input<string>;
    /**
     * Frequency of the report. Allowed values: `never`, `once`, `hourly`, `daily`, `weekly`, `monthly`, `custom`.
     */
    frequency: pulumi.Input<string>;
    /**
     * Send the report on the last day of the month Defaults to `false`.
     */
    lastDayOfMonth?: pulumi.Input<boolean>;
    /**
     * Start time of the report. If empty, the start date will be set to the creation time. Note that times will be saved as UTC in Grafana.
     */
    startTime?: pulumi.Input<string>;
    /**
     * Whether to send the report only on work days. Defaults to `false`.
     */
    workdaysOnly?: pulumi.Input<boolean>;
}

export interface ReportTimeRange {
    /**
     * Start of the time range.
     */
    from?: pulumi.Input<string>;
    /**
     * End of the time range.
     */
    to?: pulumi.Input<string>;
}

export interface RolePermission {
    /**
     * Specific action users granted with the role will be allowed to perform (for example: `users:read`)
     */
    action: pulumi.Input<string>;
    /**
     * Scope to restrict the action to a set of resources (for example: `users:*` or `roles:customrole1`) Defaults to ``.
     */
    scope?: pulumi.Input<string>;
}

export interface RuleGroupRule {
    /**
     * Key-value pairs of metadata to attach to the alert rule that may add user-defined context, but cannot be used for matching, grouping, or routing. Defaults to `map[]`.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The `refId` of the query node in the `data` field to use as the alert condition.
     */
    condition: pulumi.Input<string>;
    /**
     * A sequence of stages that describe the contents of the rule.
     */
    datas: pulumi.Input<pulumi.Input<inputs.RuleGroupRuleData>[]>;
    /**
     * Describes what state to enter when the rule's query is invalid and the rule cannot be executed. Options are OK, Error, and Alerting. Defaults to `Alerting`.
     */
    execErrState?: pulumi.Input<string>;
    /**
     * The amount of time for which the rule must be breached for the rule to be considered to be Firing. Before this time has elapsed, the rule is only considered to be Pending. Defaults to `0`.
     */
    for?: pulumi.Input<string>;
    /**
     * Sets whether the alert should be paused or not. Defaults to `false`.
     */
    isPaused?: pulumi.Input<boolean>;
    /**
     * Key-value pairs to attach to the alert rule that can be used in matching, grouping, and routing. Defaults to `map[]`.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the alert rule.
     */
    name: pulumi.Input<string>;
    /**
     * Describes what state to enter when the rule's query returns No Data. Options are OK, NoData, and Alerting. Defaults to `NoData`.
     */
    noDataState?: pulumi.Input<string>;
    /**
     * The unique identifier of the alert rule.
     */
    uid?: pulumi.Input<string>;
}

export interface RuleGroupRuleData {
    datasourceUid: pulumi.Input<string>;
    model: pulumi.Input<string>;
    queryType?: pulumi.Input<string>;
    refId: pulumi.Input<string>;
    relativeTimeRange: pulumi.Input<inputs.RuleGroupRuleDataRelativeTimeRange>;
}

export interface RuleGroupRuleDataRelativeTimeRange {
    from: pulumi.Input<number>;
    to: pulumi.Input<number>;
}

export interface SLOAlerting {
    /**
     * Annotations will be attached to all alerts generated by any of these rules.
     */
    annotations?: pulumi.Input<pulumi.Input<inputs.SLOAlertingAnnotation>[]>;
    /**
     * Alerting Rules generated for Fast Burn alerts
     */
    fastburns?: pulumi.Input<pulumi.Input<inputs.SLOAlertingFastburn>[]>;
    /**
     * Labels will be attached to all alerts generated by any of these rules.
     */
    labels?: pulumi.Input<pulumi.Input<inputs.SLOAlertingLabel>[]>;
    /**
     * Alerting Rules generated for Slow Burn alerts
     */
    slowburns?: pulumi.Input<pulumi.Input<inputs.SLOAlertingSlowburn>[]>;
}

export interface SLOAlertingAnnotation {
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface SLOAlertingFastburn {
    annotations?: pulumi.Input<pulumi.Input<inputs.SLOAlertingFastburnAnnotation>[]>;
    /**
     * Additional labels that will be attached to all metrics generated from the query. These labels are useful for grouping SLOs in dashboard views that you create by hand.
     */
    labels?: pulumi.Input<pulumi.Input<inputs.SLOAlertingFastburnLabel>[]>;
}

export interface SLOAlertingFastburnAnnotation {
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface SLOAlertingFastburnLabel {
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface SLOAlertingLabel {
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface SLOAlertingSlowburn {
    annotations?: pulumi.Input<pulumi.Input<inputs.SLOAlertingSlowburnAnnotation>[]>;
    /**
     * Additional labels that will be attached to all metrics generated from the query. These labels are useful for grouping SLOs in dashboard views that you create by hand.
     */
    labels?: pulumi.Input<pulumi.Input<inputs.SLOAlertingSlowburnLabel>[]>;
}

export interface SLOAlertingSlowburnAnnotation {
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface SLOAlertingSlowburnLabel {
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface SLOLabel {
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface SLOObjective {
    /**
     * Value between 0 and 1. If the value of the query is above the objective, the SLO is met.
     */
    value: pulumi.Input<number>;
    /**
     * A Prometheus-parsable time duration string like 24h, 60m. This is the time window the objective is measured over.
     */
    window: pulumi.Input<string>;
}

export interface SLOQuery {
    freeform: pulumi.Input<inputs.SLOQueryFreeform>;
    /**
     * Query type must be one of: "freeform", "query", "ratio", or "threshold"
     */
    type: pulumi.Input<string>;
}

export interface SLOQueryFreeform {
    /**
     * Query describes the indicator that will be measured against the objective. Freeform Query types are currently supported.
     */
    query?: pulumi.Input<string>;
}

export interface ServiceAccountPermissionPermission {
    /**
     * Permission to associate with item. Must be `Edit` or `Admin`.
     */
    permission: pulumi.Input<string>;
    /**
     * ID of the team to manage permissions for. Specify either this or `userId`. Defaults to `0`.
     */
    teamId?: pulumi.Input<number>;
    /**
     * ID of the user to manage permissions for. Specify either this or `teamId`. Defaults to `0`.
     */
    userId?: pulumi.Input<number>;
}

export interface SyntheticMonitoringCheckSettings {
    /**
     * Settings for DNS check. The target must be a valid hostname (or IP address for `PTR` records).
     */
    dns?: pulumi.Input<inputs.SyntheticMonitoringCheckSettingsDns>;
    /**
     * Settings for HTTP check. The target must be a URL (http or https).
     */
    http?: pulumi.Input<inputs.SyntheticMonitoringCheckSettingsHttp>;
    /**
     * Settings for ping (ICMP) check. The target must be a valid hostname or IP address.
     */
    ping?: pulumi.Input<inputs.SyntheticMonitoringCheckSettingsPing>;
    /**
     * Settings for TCP check. The target must be of the form `<host>:<port>`, where the host portion must be a valid hostname or IP address.
     */
    tcp?: pulumi.Input<inputs.SyntheticMonitoringCheckSettingsTcp>;
    /**
     * Settings for traceroute check. The target must be a valid hostname or IP address
     */
    traceroute?: pulumi.Input<inputs.SyntheticMonitoringCheckSettingsTraceroute>;
}

export interface SyntheticMonitoringCheckSettingsDns {
    ipVersion?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
    recordType?: pulumi.Input<string>;
    server?: pulumi.Input<string>;
    sourceIpAddress?: pulumi.Input<string>;
    validRCodes?: pulumi.Input<pulumi.Input<string>[]>;
    validateAdditionalRrs?: pulumi.Input<pulumi.Input<inputs.SyntheticMonitoringCheckSettingsDnsValidateAdditionalRr>[]>;
    validateAnswerRrs?: pulumi.Input<inputs.SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs>;
    validateAuthorityRrs?: pulumi.Input<inputs.SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs>;
}

export interface SyntheticMonitoringCheckSettingsDnsValidateAdditionalRr {
    failIfMatchesRegexps?: pulumi.Input<pulumi.Input<string>[]>;
    failIfNotMatchesRegexps?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs {
    failIfMatchesRegexps?: pulumi.Input<pulumi.Input<string>[]>;
    failIfNotMatchesRegexps?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs {
    failIfMatchesRegexps?: pulumi.Input<pulumi.Input<string>[]>;
    failIfNotMatchesRegexps?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SyntheticMonitoringCheckSettingsHttp {
    basicAuth?: pulumi.Input<inputs.SyntheticMonitoringCheckSettingsHttpBasicAuth>;
    bearerToken?: pulumi.Input<string>;
    body?: pulumi.Input<string>;
    cacheBustingQueryParamName?: pulumi.Input<string>;
    failIfBodyMatchesRegexps?: pulumi.Input<pulumi.Input<string>[]>;
    failIfBodyNotMatchesRegexps?: pulumi.Input<pulumi.Input<string>[]>;
    failIfHeaderMatchesRegexps?: pulumi.Input<pulumi.Input<inputs.SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexp>[]>;
    failIfHeaderNotMatchesRegexps?: pulumi.Input<pulumi.Input<inputs.SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexp>[]>;
    failIfNotSsl?: pulumi.Input<boolean>;
    failIfSsl?: pulumi.Input<boolean>;
    headers?: pulumi.Input<pulumi.Input<string>[]>;
    ipVersion?: pulumi.Input<string>;
    method?: pulumi.Input<string>;
    noFollowRedirects?: pulumi.Input<boolean>;
    proxyUrl?: pulumi.Input<string>;
    tlsConfig?: pulumi.Input<inputs.SyntheticMonitoringCheckSettingsHttpTlsConfig>;
    validHttpVersions?: pulumi.Input<pulumi.Input<string>[]>;
    validStatusCodes?: pulumi.Input<pulumi.Input<number>[]>;
}

export interface SyntheticMonitoringCheckSettingsHttpBasicAuth {
    password: pulumi.Input<string>;
    username: pulumi.Input<string>;
}

export interface SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexp {
    allowMissing?: pulumi.Input<boolean>;
    header: pulumi.Input<string>;
    regexp: pulumi.Input<string>;
}

export interface SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexp {
    allowMissing?: pulumi.Input<boolean>;
    header: pulumi.Input<string>;
    regexp: pulumi.Input<string>;
}

export interface SyntheticMonitoringCheckSettingsHttpTlsConfig {
    caCert?: pulumi.Input<string>;
    clientCert?: pulumi.Input<string>;
    clientKey?: pulumi.Input<string>;
    insecureSkipVerify?: pulumi.Input<boolean>;
    serverName?: pulumi.Input<string>;
}

export interface SyntheticMonitoringCheckSettingsPing {
    dontFragment?: pulumi.Input<boolean>;
    ipVersion?: pulumi.Input<string>;
    payloadSize?: pulumi.Input<number>;
    sourceIpAddress?: pulumi.Input<string>;
}

export interface SyntheticMonitoringCheckSettingsTcp {
    ipVersion?: pulumi.Input<string>;
    queryResponses?: pulumi.Input<pulumi.Input<inputs.SyntheticMonitoringCheckSettingsTcpQueryResponse>[]>;
    sourceIpAddress?: pulumi.Input<string>;
    tls?: pulumi.Input<boolean>;
    tlsConfig?: pulumi.Input<inputs.SyntheticMonitoringCheckSettingsTcpTlsConfig>;
}

export interface SyntheticMonitoringCheckSettingsTcpQueryResponse {
    expect: pulumi.Input<string>;
    send: pulumi.Input<string>;
    startTls?: pulumi.Input<boolean>;
}

export interface SyntheticMonitoringCheckSettingsTcpTlsConfig {
    caCert?: pulumi.Input<string>;
    clientCert?: pulumi.Input<string>;
    clientKey?: pulumi.Input<string>;
    insecureSkipVerify?: pulumi.Input<boolean>;
    serverName?: pulumi.Input<string>;
}

export interface SyntheticMonitoringCheckSettingsTraceroute {
    maxHops?: pulumi.Input<number>;
    maxUnknownHops?: pulumi.Input<number>;
    ptrLookup?: pulumi.Input<boolean>;
}

export interface TeamPreferences {
    /**
     * The UID of the dashboard to display when a team member logs in. Defaults to ``.
     */
    homeDashboardUid?: pulumi.Input<string>;
    /**
     * The default theme for this team. Available themes are `light`, `dark`, or an empty string for the default theme. Defaults to ``.
     */
    theme?: pulumi.Input<string>;
    /**
     * The default timezone for this team. Available values are `utc`, `browser`, or an empty string for the default. Defaults to ``.
     */
    timezone?: pulumi.Input<string>;
}
