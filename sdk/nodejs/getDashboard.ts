// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * * [Official documentation](https://grafana.com/docs/grafana/latest/dashboards/)
 * * [Folder/Dashboard Search HTTP API](https://grafana.com/docs/grafana/latest/http_api/folder_dashboard_search/)
 * * [Dashboard HTTP API](https://grafana.com/docs/grafana/latest/http_api/dashboard/)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as grafana from "@lbrlabs/pulumi-grafana";
 * import * as grafana from "@pulumi/grafana";
 *
 * const test = new grafana.Dashboard("test", {configJson: JSON.stringify({
 *     id: 12345,
 *     uid: "test-ds-dashboard-uid",
 *     title: "Production Overview",
 *     tags: ["templated"],
 *     timezone: "browser",
 *     schemaVersion: 16,
 *     version: 0,
 *     refresh: "25s",
 * })});
 * const fromId = grafana.getDashboardOutput({
 *     dashboardId: test.dashboardId,
 * });
 * const fromUid = grafana.getDashboard({
 *     uid: "test-ds-dashboard-uid",
 * });
 * ```
 */
export function getDashboard(args?: GetDashboardArgs, opts?: pulumi.InvokeOptions): Promise<GetDashboardResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("grafana:index/getDashboard:getDashboard", {
        "dashboardId": args.dashboardId,
        "uid": args.uid,
    }, opts);
}

/**
 * A collection of arguments for invoking getDashboard.
 */
export interface GetDashboardArgs {
    /**
     * The numerical ID of the Grafana dashboard. Specify either this or `uid`. Defaults to `-1`.
     */
    dashboardId?: number;
    /**
     * The uid of the Grafana dashboard. Specify either this or `dashboardId`. Defaults to ``.
     */
    uid?: string;
}

/**
 * A collection of values returned by getDashboard.
 */
export interface GetDashboardResult {
    /**
     * The complete dashboard model JSON.
     */
    readonly configJson: string;
    /**
     * The numerical ID of the Grafana dashboard. Specify either this or `uid`. Defaults to `-1`.
     */
    readonly dashboardId?: number;
    /**
     * The numerical ID of the folder where the Grafana dashboard is found.
     */
    readonly folder: number;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Whether or not the Grafana dashboard is starred. Starred Dashboards will show up on your own Home Dashboard by default, and are a convenient way to mark Dashboards that youâ€™re interested in.
     */
    readonly isStarred: boolean;
    /**
     * URL slug of the dashboard (deprecated).
     */
    readonly slug: string;
    /**
     * The title of the Grafana dashboard.
     */
    readonly title: string;
    /**
     * The uid of the Grafana dashboard. Specify either this or `dashboardId`. Defaults to ``.
     */
    readonly uid?: string;
    /**
     * The full URL of the dashboard.
     */
    readonly url: string;
    /**
     * The numerical version of the Grafana dashboard.
     */
    readonly version: number;
}
/**
 * * [Official documentation](https://grafana.com/docs/grafana/latest/dashboards/)
 * * [Folder/Dashboard Search HTTP API](https://grafana.com/docs/grafana/latest/http_api/folder_dashboard_search/)
 * * [Dashboard HTTP API](https://grafana.com/docs/grafana/latest/http_api/dashboard/)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as grafana from "@lbrlabs/pulumi-grafana";
 * import * as grafana from "@pulumi/grafana";
 *
 * const test = new grafana.Dashboard("test", {configJson: JSON.stringify({
 *     id: 12345,
 *     uid: "test-ds-dashboard-uid",
 *     title: "Production Overview",
 *     tags: ["templated"],
 *     timezone: "browser",
 *     schemaVersion: 16,
 *     version: 0,
 *     refresh: "25s",
 * })});
 * const fromId = grafana.getDashboardOutput({
 *     dashboardId: test.dashboardId,
 * });
 * const fromUid = grafana.getDashboard({
 *     uid: "test-ds-dashboard-uid",
 * });
 * ```
 */
export function getDashboardOutput(args?: GetDashboardOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDashboardResult> {
    return pulumi.output(args).apply((a: any) => getDashboard(a, opts))
}

/**
 * A collection of arguments for invoking getDashboard.
 */
export interface GetDashboardOutputArgs {
    /**
     * The numerical ID of the Grafana dashboard. Specify either this or `uid`. Defaults to `-1`.
     */
    dashboardId?: pulumi.Input<number>;
    /**
     * The uid of the Grafana dashboard. Specify either this or `dashboardId`. Defaults to ``.
     */
    uid?: pulumi.Input<string>;
}
