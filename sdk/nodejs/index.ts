// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./alertNotification";
export * from "./annotation";
export * from "./apiKey";
export * from "./builtinRoleAssignment";
export * from "./cloudApiKey";
export * from "./cloudPluginInstallation";
export * from "./cloudStack";
export * from "./contactPoint";
export * from "./dashboard";
export * from "./dashboardPermission";
export * from "./dataSource";
export * from "./dataSourcePermission";
export * from "./folder";
export * from "./folderPermission";
export * from "./getCloudIps";
export * from "./getCloudStack";
export * from "./getDashboard";
export * from "./getDashboards";
export * from "./getFolder";
export * from "./getFolders";
export * from "./getLibraryPanel";
export * from "./getOnCallSlackChannel";
export * from "./getOncallAction";
export * from "./getOncallEscalationChain";
export * from "./getOncallOutgoingWebhook";
export * from "./getOncallSchedule";
export * from "./getOncallTeam";
export * from "./getOncallUser";
export * from "./getOncallUserGroup";
export * from "./getOrganization";
export * from "./getSyntheticMonitoringProbe";
export * from "./getSyntheticMonitoringProbes";
export * from "./getTeam";
export * from "./getUser";
export * from "./libraryPanel";
export * from "./machineLearningJob";
export * from "./messageTemplate";
export * from "./muteTiming";
export * from "./notificationPolicy";
export * from "./oncallEscalation";
export * from "./oncallEscalationChain";
export * from "./oncallIntegration";
export * from "./oncallOnCallShift";
export * from "./oncallOutgoingWebhook";
export * from "./oncallRoute";
export * from "./oncallSchedule";
export * from "./organization";
export * from "./playlist";
export * from "./provider";
export * from "./report";
export * from "./role";
export * from "./ruleGroup";
export * from "./serviceAccount";
export * from "./serviceAccountToken";
export * from "./syntheticMonitoringCheck";
export * from "./syntheticMonitoringInstallation";
export * from "./syntheticMonitoringProbe";
export * from "./team";
export * from "./teamExternalGroup";
export * from "./teamPreferences";
export * from "./user";

// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

// Import resources to register:
import { AlertNotification } from "./alertNotification";
import { Annotation } from "./annotation";
import { ApiKey } from "./apiKey";
import { BuiltinRoleAssignment } from "./builtinRoleAssignment";
import { CloudApiKey } from "./cloudApiKey";
import { CloudPluginInstallation } from "./cloudPluginInstallation";
import { CloudStack } from "./cloudStack";
import { ContactPoint } from "./contactPoint";
import { Dashboard } from "./dashboard";
import { DashboardPermission } from "./dashboardPermission";
import { DataSource } from "./dataSource";
import { DataSourcePermission } from "./dataSourcePermission";
import { Folder } from "./folder";
import { FolderPermission } from "./folderPermission";
import { LibraryPanel } from "./libraryPanel";
import { MachineLearningJob } from "./machineLearningJob";
import { MessageTemplate } from "./messageTemplate";
import { MuteTiming } from "./muteTiming";
import { NotificationPolicy } from "./notificationPolicy";
import { OncallEscalation } from "./oncallEscalation";
import { OncallEscalationChain } from "./oncallEscalationChain";
import { OncallIntegration } from "./oncallIntegration";
import { OncallOnCallShift } from "./oncallOnCallShift";
import { OncallOutgoingWebhook } from "./oncallOutgoingWebhook";
import { OncallRoute } from "./oncallRoute";
import { OncallSchedule } from "./oncallSchedule";
import { Organization } from "./organization";
import { Playlist } from "./playlist";
import { Report } from "./report";
import { Role } from "./role";
import { RuleGroup } from "./ruleGroup";
import { ServiceAccount } from "./serviceAccount";
import { ServiceAccountToken } from "./serviceAccountToken";
import { SyntheticMonitoringCheck } from "./syntheticMonitoringCheck";
import { SyntheticMonitoringInstallation } from "./syntheticMonitoringInstallation";
import { SyntheticMonitoringProbe } from "./syntheticMonitoringProbe";
import { Team } from "./team";
import { TeamExternalGroup } from "./teamExternalGroup";
import { TeamPreferences } from "./teamPreferences";
import { User } from "./user";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "grafana:index/alertNotification:AlertNotification":
                return new AlertNotification(name, <any>undefined, { urn })
            case "grafana:index/annotation:Annotation":
                return new Annotation(name, <any>undefined, { urn })
            case "grafana:index/apiKey:ApiKey":
                return new ApiKey(name, <any>undefined, { urn })
            case "grafana:index/builtinRoleAssignment:BuiltinRoleAssignment":
                return new BuiltinRoleAssignment(name, <any>undefined, { urn })
            case "grafana:index/cloudApiKey:CloudApiKey":
                return new CloudApiKey(name, <any>undefined, { urn })
            case "grafana:index/cloudPluginInstallation:CloudPluginInstallation":
                return new CloudPluginInstallation(name, <any>undefined, { urn })
            case "grafana:index/cloudStack:CloudStack":
                return new CloudStack(name, <any>undefined, { urn })
            case "grafana:index/contactPoint:ContactPoint":
                return new ContactPoint(name, <any>undefined, { urn })
            case "grafana:index/dashboard:Dashboard":
                return new Dashboard(name, <any>undefined, { urn })
            case "grafana:index/dashboardPermission:DashboardPermission":
                return new DashboardPermission(name, <any>undefined, { urn })
            case "grafana:index/dataSource:DataSource":
                return new DataSource(name, <any>undefined, { urn })
            case "grafana:index/dataSourcePermission:DataSourcePermission":
                return new DataSourcePermission(name, <any>undefined, { urn })
            case "grafana:index/folder:Folder":
                return new Folder(name, <any>undefined, { urn })
            case "grafana:index/folderPermission:FolderPermission":
                return new FolderPermission(name, <any>undefined, { urn })
            case "grafana:index/libraryPanel:LibraryPanel":
                return new LibraryPanel(name, <any>undefined, { urn })
            case "grafana:index/machineLearningJob:MachineLearningJob":
                return new MachineLearningJob(name, <any>undefined, { urn })
            case "grafana:index/messageTemplate:MessageTemplate":
                return new MessageTemplate(name, <any>undefined, { urn })
            case "grafana:index/muteTiming:MuteTiming":
                return new MuteTiming(name, <any>undefined, { urn })
            case "grafana:index/notificationPolicy:NotificationPolicy":
                return new NotificationPolicy(name, <any>undefined, { urn })
            case "grafana:index/oncallEscalation:OncallEscalation":
                return new OncallEscalation(name, <any>undefined, { urn })
            case "grafana:index/oncallEscalationChain:OncallEscalationChain":
                return new OncallEscalationChain(name, <any>undefined, { urn })
            case "grafana:index/oncallIntegration:OncallIntegration":
                return new OncallIntegration(name, <any>undefined, { urn })
            case "grafana:index/oncallOnCallShift:OncallOnCallShift":
                return new OncallOnCallShift(name, <any>undefined, { urn })
            case "grafana:index/oncallOutgoingWebhook:OncallOutgoingWebhook":
                return new OncallOutgoingWebhook(name, <any>undefined, { urn })
            case "grafana:index/oncallRoute:OncallRoute":
                return new OncallRoute(name, <any>undefined, { urn })
            case "grafana:index/oncallSchedule:OncallSchedule":
                return new OncallSchedule(name, <any>undefined, { urn })
            case "grafana:index/organization:Organization":
                return new Organization(name, <any>undefined, { urn })
            case "grafana:index/playlist:Playlist":
                return new Playlist(name, <any>undefined, { urn })
            case "grafana:index/report:Report":
                return new Report(name, <any>undefined, { urn })
            case "grafana:index/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "grafana:index/ruleGroup:RuleGroup":
                return new RuleGroup(name, <any>undefined, { urn })
            case "grafana:index/serviceAccount:ServiceAccount":
                return new ServiceAccount(name, <any>undefined, { urn })
            case "grafana:index/serviceAccountToken:ServiceAccountToken":
                return new ServiceAccountToken(name, <any>undefined, { urn })
            case "grafana:index/syntheticMonitoringCheck:SyntheticMonitoringCheck":
                return new SyntheticMonitoringCheck(name, <any>undefined, { urn })
            case "grafana:index/syntheticMonitoringInstallation:SyntheticMonitoringInstallation":
                return new SyntheticMonitoringInstallation(name, <any>undefined, { urn })
            case "grafana:index/syntheticMonitoringProbe:SyntheticMonitoringProbe":
                return new SyntheticMonitoringProbe(name, <any>undefined, { urn })
            case "grafana:index/team:Team":
                return new Team(name, <any>undefined, { urn })
            case "grafana:index/teamExternalGroup:TeamExternalGroup":
                return new TeamExternalGroup(name, <any>undefined, { urn })
            case "grafana:index/teamPreferences:TeamPreferences":
                return new TeamPreferences(name, <any>undefined, { urn })
            case "grafana:index/user:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("grafana", "index/alertNotification", _module)
pulumi.runtime.registerResourceModule("grafana", "index/annotation", _module)
pulumi.runtime.registerResourceModule("grafana", "index/apiKey", _module)
pulumi.runtime.registerResourceModule("grafana", "index/builtinRoleAssignment", _module)
pulumi.runtime.registerResourceModule("grafana", "index/cloudApiKey", _module)
pulumi.runtime.registerResourceModule("grafana", "index/cloudPluginInstallation", _module)
pulumi.runtime.registerResourceModule("grafana", "index/cloudStack", _module)
pulumi.runtime.registerResourceModule("grafana", "index/contactPoint", _module)
pulumi.runtime.registerResourceModule("grafana", "index/dashboard", _module)
pulumi.runtime.registerResourceModule("grafana", "index/dashboardPermission", _module)
pulumi.runtime.registerResourceModule("grafana", "index/dataSource", _module)
pulumi.runtime.registerResourceModule("grafana", "index/dataSourcePermission", _module)
pulumi.runtime.registerResourceModule("grafana", "index/folder", _module)
pulumi.runtime.registerResourceModule("grafana", "index/folderPermission", _module)
pulumi.runtime.registerResourceModule("grafana", "index/libraryPanel", _module)
pulumi.runtime.registerResourceModule("grafana", "index/machineLearningJob", _module)
pulumi.runtime.registerResourceModule("grafana", "index/messageTemplate", _module)
pulumi.runtime.registerResourceModule("grafana", "index/muteTiming", _module)
pulumi.runtime.registerResourceModule("grafana", "index/notificationPolicy", _module)
pulumi.runtime.registerResourceModule("grafana", "index/oncallEscalation", _module)
pulumi.runtime.registerResourceModule("grafana", "index/oncallEscalationChain", _module)
pulumi.runtime.registerResourceModule("grafana", "index/oncallIntegration", _module)
pulumi.runtime.registerResourceModule("grafana", "index/oncallOnCallShift", _module)
pulumi.runtime.registerResourceModule("grafana", "index/oncallOutgoingWebhook", _module)
pulumi.runtime.registerResourceModule("grafana", "index/oncallRoute", _module)
pulumi.runtime.registerResourceModule("grafana", "index/oncallSchedule", _module)
pulumi.runtime.registerResourceModule("grafana", "index/organization", _module)
pulumi.runtime.registerResourceModule("grafana", "index/playlist", _module)
pulumi.runtime.registerResourceModule("grafana", "index/report", _module)
pulumi.runtime.registerResourceModule("grafana", "index/role", _module)
pulumi.runtime.registerResourceModule("grafana", "index/ruleGroup", _module)
pulumi.runtime.registerResourceModule("grafana", "index/serviceAccount", _module)
pulumi.runtime.registerResourceModule("grafana", "index/serviceAccountToken", _module)
pulumi.runtime.registerResourceModule("grafana", "index/syntheticMonitoringCheck", _module)
pulumi.runtime.registerResourceModule("grafana", "index/syntheticMonitoringInstallation", _module)
pulumi.runtime.registerResourceModule("grafana", "index/syntheticMonitoringProbe", _module)
pulumi.runtime.registerResourceModule("grafana", "index/team", _module)
pulumi.runtime.registerResourceModule("grafana", "index/teamExternalGroup", _module)
pulumi.runtime.registerResourceModule("grafana", "index/teamPreferences", _module)
pulumi.runtime.registerResourceModule("grafana", "index/user", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("grafana", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:grafana") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
