// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package config

import (
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
)

// API token or basic auth `username:password`. May alternatively be set via the `GRAFANA_AUTH` environment variable.
func GetAuth(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "grafana:auth")
	if err == nil {
		return v
	}
	return getEnvOrDefault("", nil, "GRAFANA_AUTH").(string)
}

// Certificate CA bundle to use to verify the Grafana server's certificate. May alternatively be set via the
// `GRAFANA_CA_CERT` environment variable.
func GetCaCert(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "grafana:caCert")
	if err == nil {
		return v
	}
	return getEnvOrDefault("", nil, "GRAFANA_CA_CERT").(string)
}

// API key for Grafana Cloud. May alternatively be set via the `GRAFANA_CLOUD_API_KEY` environment variable.
func GetCloudApiKey(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "grafana:cloudApiKey")
	if err == nil {
		return v
	}
	return getEnvOrDefault("", nil, "GRAFANA_CLOUD_API_KEY").(string)
}

// Grafana Cloud's API URL. May alternatively be set via the `GRAFANA_CLOUD_API_URL` environment variable.
func GetCloudApiUrl(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "grafana:cloudApiUrl")
	if err == nil {
		return v
	}
	return getEnvOrDefault("", nil, "GRAFANA_CLOUD_API_URL").(string)
}

// Optional. HTTP headers mapping keys to values used for accessing the Grafana API. May alternatively be set via the
// `GRAFANA_HTTP_HEADERS` environment variable in JSON format.
func GetHttpHeaders(ctx *pulumi.Context) string {
	return config.Get(ctx, "grafana:httpHeaders")
}

// Skip TLS certificate verification. May alternatively be set via the `GRAFANA_INSECURE_SKIP_VERIFY` environment variable.
func GetInsecureSkipVerify(ctx *pulumi.Context) bool {
	v, err := config.TryBool(ctx, "grafana:insecureSkipVerify")
	if err == nil {
		return v
	}
	return getEnvOrDefault(false, parseEnvBool, "GRAFANA_INSECURE_SKIP_VERIFY").(bool)
}

// A Grafana OnCall access token. May alternatively be set via the `GRAFANA_ONCALL_ACCESS_TOKEN` environment variable.
func GetOncallAccessToken(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "grafana:oncallAccessToken")
	if err == nil {
		return v
	}
	return getEnvOrDefault("", nil, "GRAFANA_ONCALL_ACCESS_TOKEN").(string)
}

// An Grafana OnCall backend address. May alternatively be set via the `GRAFANA_ONCALL_URL` environment variable.
func GetOncallUrl(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "grafana:oncallUrl")
	if err == nil {
		return v
	}
	return getEnvOrDefault("", nil, "GRAFANA_ONCALL_URL").(string)
}

// The organization id to operate on within grafana. May alternatively be set via the `GRAFANA_ORG_ID` environment
// variable.
func GetOrgId(ctx *pulumi.Context) int {
	v, err := config.TryInt(ctx, "grafana:orgId")
	if err == nil {
		return v
	}
	return getEnvOrDefault(0, parseEnvInt, "GRAFANA_ORG_ID").(int)
}

// The amount of retries to use for Grafana API calls. May alternatively be set via the `GRAFANA_RETRIES` environment
// variable.
func GetRetries(ctx *pulumi.Context) int {
	v, err := config.TryInt(ctx, "grafana:retries")
	if err == nil {
		return v
	}
	return getEnvOrDefault(0, parseEnvInt, "GRAFANA_RETRIES").(int)
}

// A Synthetic Monitoring access token. May alternatively be set via the `GRAFANA_SM_ACCESS_TOKEN` environment variable.
func GetSmAccessToken(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "grafana:smAccessToken")
	if err == nil {
		return v
	}
	return getEnvOrDefault("", nil, "GRAFANA_SM_ACCESS_TOKEN").(string)
}

// Synthetic monitoring backend address. May alternatively be set via the `GRAFANA_SM_URL` environment variable. The
// correct value for each service region is cited in the [Synthetic Monitoring
// documentation](https://grafana.com/docs/grafana-cloud/synthetic-monitoring/private-probes/#probe-api-server-url). Note
// the `sm_url` value is optional, but it must correspond with the value specified as the `region_slug` in the
// `grafana_cloud_stack` resource. Also note that when a Terraform configuration contains multiple provider instances
// managing SM resources associated with the same Grafana stack, specifying an explicit `sm_url` set to the same value for
// each provider ensures all providers interact with the same SM API.
func GetSmUrl(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "grafana:smUrl")
	if err == nil {
		return v
	}
	return getEnvOrDefault("", nil, "GRAFANA_SM_URL").(string)
}

// Set to true if you want to save only the sha256sum instead of complete dashboard model JSON in the tfstate.
func GetStoreDashboardSha256(ctx *pulumi.Context) bool {
	v, err := config.TryBool(ctx, "grafana:storeDashboardSha256")
	if err == nil {
		return v
	}
	return getEnvOrDefault(false, parseEnvBool, "GRAFANA_STORE_DASHBOARD_SHA256").(bool)
}

// Client TLS certificate file to use to authenticate to the Grafana server. May alternatively be set via the
// `GRAFANA_TLS_CERT` environment variable.
func GetTlsCert(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "grafana:tlsCert")
	if err == nil {
		return v
	}
	return getEnvOrDefault("", nil, "GRAFANA_TLS_CERT").(string)
}

// Client TLS key file to use to authenticate to the Grafana server. May alternatively be set via the `GRAFANA_TLS_KEY`
// environment variable.
func GetTlsKey(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "grafana:tlsKey")
	if err == nil {
		return v
	}
	return getEnvOrDefault("", nil, "GRAFANA_TLS_KEY").(string)
}

// The root URL of a Grafana server. May alternatively be set via the `GRAFANA_URL` environment variable.
func GetUrl(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "grafana:url")
	if err == nil {
		return v
	}
	return getEnvOrDefault("", nil, "GRAFANA_URL").(string)
}
