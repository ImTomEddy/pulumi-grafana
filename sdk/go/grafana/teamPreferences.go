// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// * [Official documentation](https://grafana.com/docs/grafana/latest/administration/preferences/)
// * [HTTP API](https://grafana.com/docs/grafana/latest/http_api/team/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"io/ioutil"
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func readFileOrPanic(path string) pulumi.StringPtrInput {
//		data, err := ioutil.ReadFile(path)
//		if err != nil {
//			panic(err.Error())
//		}
//		return pulumi.String(string(data))
//	}
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			metrics, err := grafana.NewDashboard(ctx, "metrics", &grafana.DashboardArgs{
//				ConfigJson: readFileOrPanic("grafana-dashboard.json"),
//			})
//			if err != nil {
//				return err
//			}
//			team, err := grafana.NewTeam(ctx, "team", nil)
//			if err != nil {
//				return err
//			}
//			_, err = grafana.NewTeamPreferences(ctx, "teamPreferences", &grafana.TeamPreferencesArgs{
//				TeamId:          team.ID(),
//				Theme:           pulumi.String("dark"),
//				Timezone:        pulumi.String("browser"),
//				HomeDashboardId: metrics.DashboardId,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type TeamPreferences struct {
	pulumi.CustomResourceState

	// The numeric ID of the dashboard to display when a team member logs in.
	HomeDashboardId pulumi.IntPtrOutput `pulumi:"homeDashboardId"`
	// The numeric team ID.
	TeamId pulumi.IntOutput `pulumi:"teamId"`
	// The theme for the specified team. Available themes are `light`, `dark`, or an empty string for the default theme.
	Theme pulumi.StringPtrOutput `pulumi:"theme"`
	// The timezone for the specified team. Available values are `utc`, `browser`, or an empty string for the default.
	Timezone pulumi.StringPtrOutput `pulumi:"timezone"`
}

// NewTeamPreferences registers a new resource with the given unique name, arguments, and options.
func NewTeamPreferences(ctx *pulumi.Context,
	name string, args *TeamPreferencesArgs, opts ...pulumi.ResourceOption) (*TeamPreferences, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TeamId == nil {
		return nil, errors.New("invalid value for required argument 'TeamId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource TeamPreferences
	err := ctx.RegisterResource("grafana:index/teamPreferences:TeamPreferences", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTeamPreferences gets an existing TeamPreferences resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTeamPreferences(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TeamPreferencesState, opts ...pulumi.ResourceOption) (*TeamPreferences, error) {
	var resource TeamPreferences
	err := ctx.ReadResource("grafana:index/teamPreferences:TeamPreferences", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TeamPreferences resources.
type teamPreferencesState struct {
	// The numeric ID of the dashboard to display when a team member logs in.
	HomeDashboardId *int `pulumi:"homeDashboardId"`
	// The numeric team ID.
	TeamId *int `pulumi:"teamId"`
	// The theme for the specified team. Available themes are `light`, `dark`, or an empty string for the default theme.
	Theme *string `pulumi:"theme"`
	// The timezone for the specified team. Available values are `utc`, `browser`, or an empty string for the default.
	Timezone *string `pulumi:"timezone"`
}

type TeamPreferencesState struct {
	// The numeric ID of the dashboard to display when a team member logs in.
	HomeDashboardId pulumi.IntPtrInput
	// The numeric team ID.
	TeamId pulumi.IntPtrInput
	// The theme for the specified team. Available themes are `light`, `dark`, or an empty string for the default theme.
	Theme pulumi.StringPtrInput
	// The timezone for the specified team. Available values are `utc`, `browser`, or an empty string for the default.
	Timezone pulumi.StringPtrInput
}

func (TeamPreferencesState) ElementType() reflect.Type {
	return reflect.TypeOf((*teamPreferencesState)(nil)).Elem()
}

type teamPreferencesArgs struct {
	// The numeric ID of the dashboard to display when a team member logs in.
	HomeDashboardId *int `pulumi:"homeDashboardId"`
	// The numeric team ID.
	TeamId int `pulumi:"teamId"`
	// The theme for the specified team. Available themes are `light`, `dark`, or an empty string for the default theme.
	Theme *string `pulumi:"theme"`
	// The timezone for the specified team. Available values are `utc`, `browser`, or an empty string for the default.
	Timezone *string `pulumi:"timezone"`
}

// The set of arguments for constructing a TeamPreferences resource.
type TeamPreferencesArgs struct {
	// The numeric ID of the dashboard to display when a team member logs in.
	HomeDashboardId pulumi.IntPtrInput
	// The numeric team ID.
	TeamId pulumi.IntInput
	// The theme for the specified team. Available themes are `light`, `dark`, or an empty string for the default theme.
	Theme pulumi.StringPtrInput
	// The timezone for the specified team. Available values are `utc`, `browser`, or an empty string for the default.
	Timezone pulumi.StringPtrInput
}

func (TeamPreferencesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*teamPreferencesArgs)(nil)).Elem()
}

type TeamPreferencesInput interface {
	pulumi.Input

	ToTeamPreferencesOutput() TeamPreferencesOutput
	ToTeamPreferencesOutputWithContext(ctx context.Context) TeamPreferencesOutput
}

func (*TeamPreferences) ElementType() reflect.Type {
	return reflect.TypeOf((**TeamPreferences)(nil)).Elem()
}

func (i *TeamPreferences) ToTeamPreferencesOutput() TeamPreferencesOutput {
	return i.ToTeamPreferencesOutputWithContext(context.Background())
}

func (i *TeamPreferences) ToTeamPreferencesOutputWithContext(ctx context.Context) TeamPreferencesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamPreferencesOutput)
}

// TeamPreferencesArrayInput is an input type that accepts TeamPreferencesArray and TeamPreferencesArrayOutput values.
// You can construct a concrete instance of `TeamPreferencesArrayInput` via:
//
//	TeamPreferencesArray{ TeamPreferencesArgs{...} }
type TeamPreferencesArrayInput interface {
	pulumi.Input

	ToTeamPreferencesArrayOutput() TeamPreferencesArrayOutput
	ToTeamPreferencesArrayOutputWithContext(context.Context) TeamPreferencesArrayOutput
}

type TeamPreferencesArray []TeamPreferencesInput

func (TeamPreferencesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TeamPreferences)(nil)).Elem()
}

func (i TeamPreferencesArray) ToTeamPreferencesArrayOutput() TeamPreferencesArrayOutput {
	return i.ToTeamPreferencesArrayOutputWithContext(context.Background())
}

func (i TeamPreferencesArray) ToTeamPreferencesArrayOutputWithContext(ctx context.Context) TeamPreferencesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamPreferencesArrayOutput)
}

// TeamPreferencesMapInput is an input type that accepts TeamPreferencesMap and TeamPreferencesMapOutput values.
// You can construct a concrete instance of `TeamPreferencesMapInput` via:
//
//	TeamPreferencesMap{ "key": TeamPreferencesArgs{...} }
type TeamPreferencesMapInput interface {
	pulumi.Input

	ToTeamPreferencesMapOutput() TeamPreferencesMapOutput
	ToTeamPreferencesMapOutputWithContext(context.Context) TeamPreferencesMapOutput
}

type TeamPreferencesMap map[string]TeamPreferencesInput

func (TeamPreferencesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TeamPreferences)(nil)).Elem()
}

func (i TeamPreferencesMap) ToTeamPreferencesMapOutput() TeamPreferencesMapOutput {
	return i.ToTeamPreferencesMapOutputWithContext(context.Background())
}

func (i TeamPreferencesMap) ToTeamPreferencesMapOutputWithContext(ctx context.Context) TeamPreferencesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamPreferencesMapOutput)
}

type TeamPreferencesOutput struct{ *pulumi.OutputState }

func (TeamPreferencesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TeamPreferences)(nil)).Elem()
}

func (o TeamPreferencesOutput) ToTeamPreferencesOutput() TeamPreferencesOutput {
	return o
}

func (o TeamPreferencesOutput) ToTeamPreferencesOutputWithContext(ctx context.Context) TeamPreferencesOutput {
	return o
}

// The numeric ID of the dashboard to display when a team member logs in.
func (o TeamPreferencesOutput) HomeDashboardId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TeamPreferences) pulumi.IntPtrOutput { return v.HomeDashboardId }).(pulumi.IntPtrOutput)
}

// The numeric team ID.
func (o TeamPreferencesOutput) TeamId() pulumi.IntOutput {
	return o.ApplyT(func(v *TeamPreferences) pulumi.IntOutput { return v.TeamId }).(pulumi.IntOutput)
}

// The theme for the specified team. Available themes are `light`, `dark`, or an empty string for the default theme.
func (o TeamPreferencesOutput) Theme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TeamPreferences) pulumi.StringPtrOutput { return v.Theme }).(pulumi.StringPtrOutput)
}

// The timezone for the specified team. Available values are `utc`, `browser`, or an empty string for the default.
func (o TeamPreferencesOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TeamPreferences) pulumi.StringPtrOutput { return v.Timezone }).(pulumi.StringPtrOutput)
}

type TeamPreferencesArrayOutput struct{ *pulumi.OutputState }

func (TeamPreferencesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TeamPreferences)(nil)).Elem()
}

func (o TeamPreferencesArrayOutput) ToTeamPreferencesArrayOutput() TeamPreferencesArrayOutput {
	return o
}

func (o TeamPreferencesArrayOutput) ToTeamPreferencesArrayOutputWithContext(ctx context.Context) TeamPreferencesArrayOutput {
	return o
}

func (o TeamPreferencesArrayOutput) Index(i pulumi.IntInput) TeamPreferencesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TeamPreferences {
		return vs[0].([]*TeamPreferences)[vs[1].(int)]
	}).(TeamPreferencesOutput)
}

type TeamPreferencesMapOutput struct{ *pulumi.OutputState }

func (TeamPreferencesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TeamPreferences)(nil)).Elem()
}

func (o TeamPreferencesMapOutput) ToTeamPreferencesMapOutput() TeamPreferencesMapOutput {
	return o
}

func (o TeamPreferencesMapOutput) ToTeamPreferencesMapOutputWithContext(ctx context.Context) TeamPreferencesMapOutput {
	return o
}

func (o TeamPreferencesMapOutput) MapIndex(k pulumi.StringInput) TeamPreferencesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TeamPreferences {
		return vs[0].(map[string]*TeamPreferences)[vs[1].(string)]
	}).(TeamPreferencesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TeamPreferencesInput)(nil)).Elem(), &TeamPreferences{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamPreferencesArrayInput)(nil)).Elem(), TeamPreferencesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamPreferencesMapInput)(nil)).Elem(), TeamPreferencesMap{})
	pulumi.RegisterOutputType(TeamPreferencesOutput{})
	pulumi.RegisterOutputType(TeamPreferencesArrayOutput{})
	pulumi.RegisterOutputType(TeamPreferencesMapOutput{})
}
