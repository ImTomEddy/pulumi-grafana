// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/internal"
)

type CloudStackApiKey struct {
	pulumi.CustomResourceState

	Expiration    pulumi.StringOutput `pulumi:"expiration"`
	Key           pulumi.StringOutput `pulumi:"key"`
	Name          pulumi.StringOutput `pulumi:"name"`
	Role          pulumi.StringOutput `pulumi:"role"`
	SecondsToLive pulumi.IntPtrOutput `pulumi:"secondsToLive"`
	StackSlug     pulumi.StringOutput `pulumi:"stackSlug"`
}

// NewCloudStackApiKey registers a new resource with the given unique name, arguments, and options.
func NewCloudStackApiKey(ctx *pulumi.Context,
	name string, args *CloudStackApiKeyArgs, opts ...pulumi.ResourceOption) (*CloudStackApiKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.StackSlug == nil {
		return nil, errors.New("invalid value for required argument 'StackSlug'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"key",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CloudStackApiKey
	err := ctx.RegisterResource("grafana:index/cloudStackApiKey:CloudStackApiKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudStackApiKey gets an existing CloudStackApiKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudStackApiKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudStackApiKeyState, opts ...pulumi.ResourceOption) (*CloudStackApiKey, error) {
	var resource CloudStackApiKey
	err := ctx.ReadResource("grafana:index/cloudStackApiKey:CloudStackApiKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudStackApiKey resources.
type cloudStackApiKeyState struct {
	Expiration    *string `pulumi:"expiration"`
	Key           *string `pulumi:"key"`
	Name          *string `pulumi:"name"`
	Role          *string `pulumi:"role"`
	SecondsToLive *int    `pulumi:"secondsToLive"`
	StackSlug     *string `pulumi:"stackSlug"`
}

type CloudStackApiKeyState struct {
	Expiration    pulumi.StringPtrInput
	Key           pulumi.StringPtrInput
	Name          pulumi.StringPtrInput
	Role          pulumi.StringPtrInput
	SecondsToLive pulumi.IntPtrInput
	StackSlug     pulumi.StringPtrInput
}

func (CloudStackApiKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudStackApiKeyState)(nil)).Elem()
}

type cloudStackApiKeyArgs struct {
	Name          *string `pulumi:"name"`
	Role          string  `pulumi:"role"`
	SecondsToLive *int    `pulumi:"secondsToLive"`
	StackSlug     string  `pulumi:"stackSlug"`
}

// The set of arguments for constructing a CloudStackApiKey resource.
type CloudStackApiKeyArgs struct {
	Name          pulumi.StringPtrInput
	Role          pulumi.StringInput
	SecondsToLive pulumi.IntPtrInput
	StackSlug     pulumi.StringInput
}

func (CloudStackApiKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudStackApiKeyArgs)(nil)).Elem()
}

type CloudStackApiKeyInput interface {
	pulumi.Input

	ToCloudStackApiKeyOutput() CloudStackApiKeyOutput
	ToCloudStackApiKeyOutputWithContext(ctx context.Context) CloudStackApiKeyOutput
}

func (*CloudStackApiKey) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudStackApiKey)(nil)).Elem()
}

func (i *CloudStackApiKey) ToCloudStackApiKeyOutput() CloudStackApiKeyOutput {
	return i.ToCloudStackApiKeyOutputWithContext(context.Background())
}

func (i *CloudStackApiKey) ToCloudStackApiKeyOutputWithContext(ctx context.Context) CloudStackApiKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudStackApiKeyOutput)
}

func (i *CloudStackApiKey) ToOutput(ctx context.Context) pulumix.Output[*CloudStackApiKey] {
	return pulumix.Output[*CloudStackApiKey]{
		OutputState: i.ToCloudStackApiKeyOutputWithContext(ctx).OutputState,
	}
}

// CloudStackApiKeyArrayInput is an input type that accepts CloudStackApiKeyArray and CloudStackApiKeyArrayOutput values.
// You can construct a concrete instance of `CloudStackApiKeyArrayInput` via:
//
//	CloudStackApiKeyArray{ CloudStackApiKeyArgs{...} }
type CloudStackApiKeyArrayInput interface {
	pulumi.Input

	ToCloudStackApiKeyArrayOutput() CloudStackApiKeyArrayOutput
	ToCloudStackApiKeyArrayOutputWithContext(context.Context) CloudStackApiKeyArrayOutput
}

type CloudStackApiKeyArray []CloudStackApiKeyInput

func (CloudStackApiKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudStackApiKey)(nil)).Elem()
}

func (i CloudStackApiKeyArray) ToCloudStackApiKeyArrayOutput() CloudStackApiKeyArrayOutput {
	return i.ToCloudStackApiKeyArrayOutputWithContext(context.Background())
}

func (i CloudStackApiKeyArray) ToCloudStackApiKeyArrayOutputWithContext(ctx context.Context) CloudStackApiKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudStackApiKeyArrayOutput)
}

func (i CloudStackApiKeyArray) ToOutput(ctx context.Context) pulumix.Output[[]*CloudStackApiKey] {
	return pulumix.Output[[]*CloudStackApiKey]{
		OutputState: i.ToCloudStackApiKeyArrayOutputWithContext(ctx).OutputState,
	}
}

// CloudStackApiKeyMapInput is an input type that accepts CloudStackApiKeyMap and CloudStackApiKeyMapOutput values.
// You can construct a concrete instance of `CloudStackApiKeyMapInput` via:
//
//	CloudStackApiKeyMap{ "key": CloudStackApiKeyArgs{...} }
type CloudStackApiKeyMapInput interface {
	pulumi.Input

	ToCloudStackApiKeyMapOutput() CloudStackApiKeyMapOutput
	ToCloudStackApiKeyMapOutputWithContext(context.Context) CloudStackApiKeyMapOutput
}

type CloudStackApiKeyMap map[string]CloudStackApiKeyInput

func (CloudStackApiKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudStackApiKey)(nil)).Elem()
}

func (i CloudStackApiKeyMap) ToCloudStackApiKeyMapOutput() CloudStackApiKeyMapOutput {
	return i.ToCloudStackApiKeyMapOutputWithContext(context.Background())
}

func (i CloudStackApiKeyMap) ToCloudStackApiKeyMapOutputWithContext(ctx context.Context) CloudStackApiKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudStackApiKeyMapOutput)
}

func (i CloudStackApiKeyMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*CloudStackApiKey] {
	return pulumix.Output[map[string]*CloudStackApiKey]{
		OutputState: i.ToCloudStackApiKeyMapOutputWithContext(ctx).OutputState,
	}
}

type CloudStackApiKeyOutput struct{ *pulumi.OutputState }

func (CloudStackApiKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudStackApiKey)(nil)).Elem()
}

func (o CloudStackApiKeyOutput) ToCloudStackApiKeyOutput() CloudStackApiKeyOutput {
	return o
}

func (o CloudStackApiKeyOutput) ToCloudStackApiKeyOutputWithContext(ctx context.Context) CloudStackApiKeyOutput {
	return o
}

func (o CloudStackApiKeyOutput) ToOutput(ctx context.Context) pulumix.Output[*CloudStackApiKey] {
	return pulumix.Output[*CloudStackApiKey]{
		OutputState: o.OutputState,
	}
}

func (o CloudStackApiKeyOutput) Expiration() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudStackApiKey) pulumi.StringOutput { return v.Expiration }).(pulumi.StringOutput)
}

func (o CloudStackApiKeyOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudStackApiKey) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

func (o CloudStackApiKeyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudStackApiKey) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o CloudStackApiKeyOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudStackApiKey) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func (o CloudStackApiKeyOutput) SecondsToLive() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CloudStackApiKey) pulumi.IntPtrOutput { return v.SecondsToLive }).(pulumi.IntPtrOutput)
}

func (o CloudStackApiKeyOutput) StackSlug() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudStackApiKey) pulumi.StringOutput { return v.StackSlug }).(pulumi.StringOutput)
}

type CloudStackApiKeyArrayOutput struct{ *pulumi.OutputState }

func (CloudStackApiKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudStackApiKey)(nil)).Elem()
}

func (o CloudStackApiKeyArrayOutput) ToCloudStackApiKeyArrayOutput() CloudStackApiKeyArrayOutput {
	return o
}

func (o CloudStackApiKeyArrayOutput) ToCloudStackApiKeyArrayOutputWithContext(ctx context.Context) CloudStackApiKeyArrayOutput {
	return o
}

func (o CloudStackApiKeyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*CloudStackApiKey] {
	return pulumix.Output[[]*CloudStackApiKey]{
		OutputState: o.OutputState,
	}
}

func (o CloudStackApiKeyArrayOutput) Index(i pulumi.IntInput) CloudStackApiKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CloudStackApiKey {
		return vs[0].([]*CloudStackApiKey)[vs[1].(int)]
	}).(CloudStackApiKeyOutput)
}

type CloudStackApiKeyMapOutput struct{ *pulumi.OutputState }

func (CloudStackApiKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudStackApiKey)(nil)).Elem()
}

func (o CloudStackApiKeyMapOutput) ToCloudStackApiKeyMapOutput() CloudStackApiKeyMapOutput {
	return o
}

func (o CloudStackApiKeyMapOutput) ToCloudStackApiKeyMapOutputWithContext(ctx context.Context) CloudStackApiKeyMapOutput {
	return o
}

func (o CloudStackApiKeyMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*CloudStackApiKey] {
	return pulumix.Output[map[string]*CloudStackApiKey]{
		OutputState: o.OutputState,
	}
}

func (o CloudStackApiKeyMapOutput) MapIndex(k pulumi.StringInput) CloudStackApiKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CloudStackApiKey {
		return vs[0].(map[string]*CloudStackApiKey)[vs[1].(string)]
	}).(CloudStackApiKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CloudStackApiKeyInput)(nil)).Elem(), &CloudStackApiKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudStackApiKeyArrayInput)(nil)).Elem(), CloudStackApiKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudStackApiKeyMapInput)(nil)).Elem(), CloudStackApiKeyMap{})
	pulumi.RegisterOutputType(CloudStackApiKeyOutput{})
	pulumi.RegisterOutputType(CloudStackApiKeyArrayOutput{})
	pulumi.RegisterOutputType(CloudStackApiKeyMapOutput{})
}
