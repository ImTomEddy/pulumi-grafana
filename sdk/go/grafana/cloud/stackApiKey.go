// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/internal"
)

type StackApiKey struct {
	pulumi.CustomResourceState

	Expiration    pulumi.StringOutput `pulumi:"expiration"`
	Key           pulumi.StringOutput `pulumi:"key"`
	Name          pulumi.StringOutput `pulumi:"name"`
	Role          pulumi.StringOutput `pulumi:"role"`
	SecondsToLive pulumi.IntPtrOutput `pulumi:"secondsToLive"`
	StackSlug     pulumi.StringOutput `pulumi:"stackSlug"`
}

// NewStackApiKey registers a new resource with the given unique name, arguments, and options.
func NewStackApiKey(ctx *pulumi.Context,
	name string, args *StackApiKeyArgs, opts ...pulumi.ResourceOption) (*StackApiKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.StackSlug == nil {
		return nil, errors.New("invalid value for required argument 'StackSlug'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("grafana:index/cloudStackApiKey:CloudStackApiKey"),
		},
	})
	opts = append(opts, aliases)
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"key",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StackApiKey
	err := ctx.RegisterResource("grafana:cloud/stackApiKey:StackApiKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStackApiKey gets an existing StackApiKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStackApiKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StackApiKeyState, opts ...pulumi.ResourceOption) (*StackApiKey, error) {
	var resource StackApiKey
	err := ctx.ReadResource("grafana:cloud/stackApiKey:StackApiKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StackApiKey resources.
type stackApiKeyState struct {
	Expiration    *string `pulumi:"expiration"`
	Key           *string `pulumi:"key"`
	Name          *string `pulumi:"name"`
	Role          *string `pulumi:"role"`
	SecondsToLive *int    `pulumi:"secondsToLive"`
	StackSlug     *string `pulumi:"stackSlug"`
}

type StackApiKeyState struct {
	Expiration    pulumi.StringPtrInput
	Key           pulumi.StringPtrInput
	Name          pulumi.StringPtrInput
	Role          pulumi.StringPtrInput
	SecondsToLive pulumi.IntPtrInput
	StackSlug     pulumi.StringPtrInput
}

func (StackApiKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*stackApiKeyState)(nil)).Elem()
}

type stackApiKeyArgs struct {
	Name          *string `pulumi:"name"`
	Role          string  `pulumi:"role"`
	SecondsToLive *int    `pulumi:"secondsToLive"`
	StackSlug     string  `pulumi:"stackSlug"`
}

// The set of arguments for constructing a StackApiKey resource.
type StackApiKeyArgs struct {
	Name          pulumi.StringPtrInput
	Role          pulumi.StringInput
	SecondsToLive pulumi.IntPtrInput
	StackSlug     pulumi.StringInput
}

func (StackApiKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*stackApiKeyArgs)(nil)).Elem()
}

type StackApiKeyInput interface {
	pulumi.Input

	ToStackApiKeyOutput() StackApiKeyOutput
	ToStackApiKeyOutputWithContext(ctx context.Context) StackApiKeyOutput
}

func (*StackApiKey) ElementType() reflect.Type {
	return reflect.TypeOf((**StackApiKey)(nil)).Elem()
}

func (i *StackApiKey) ToStackApiKeyOutput() StackApiKeyOutput {
	return i.ToStackApiKeyOutputWithContext(context.Background())
}

func (i *StackApiKey) ToStackApiKeyOutputWithContext(ctx context.Context) StackApiKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackApiKeyOutput)
}

// StackApiKeyArrayInput is an input type that accepts StackApiKeyArray and StackApiKeyArrayOutput values.
// You can construct a concrete instance of `StackApiKeyArrayInput` via:
//
//	StackApiKeyArray{ StackApiKeyArgs{...} }
type StackApiKeyArrayInput interface {
	pulumi.Input

	ToStackApiKeyArrayOutput() StackApiKeyArrayOutput
	ToStackApiKeyArrayOutputWithContext(context.Context) StackApiKeyArrayOutput
}

type StackApiKeyArray []StackApiKeyInput

func (StackApiKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StackApiKey)(nil)).Elem()
}

func (i StackApiKeyArray) ToStackApiKeyArrayOutput() StackApiKeyArrayOutput {
	return i.ToStackApiKeyArrayOutputWithContext(context.Background())
}

func (i StackApiKeyArray) ToStackApiKeyArrayOutputWithContext(ctx context.Context) StackApiKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackApiKeyArrayOutput)
}

// StackApiKeyMapInput is an input type that accepts StackApiKeyMap and StackApiKeyMapOutput values.
// You can construct a concrete instance of `StackApiKeyMapInput` via:
//
//	StackApiKeyMap{ "key": StackApiKeyArgs{...} }
type StackApiKeyMapInput interface {
	pulumi.Input

	ToStackApiKeyMapOutput() StackApiKeyMapOutput
	ToStackApiKeyMapOutputWithContext(context.Context) StackApiKeyMapOutput
}

type StackApiKeyMap map[string]StackApiKeyInput

func (StackApiKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StackApiKey)(nil)).Elem()
}

func (i StackApiKeyMap) ToStackApiKeyMapOutput() StackApiKeyMapOutput {
	return i.ToStackApiKeyMapOutputWithContext(context.Background())
}

func (i StackApiKeyMap) ToStackApiKeyMapOutputWithContext(ctx context.Context) StackApiKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackApiKeyMapOutput)
}

type StackApiKeyOutput struct{ *pulumi.OutputState }

func (StackApiKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackApiKey)(nil)).Elem()
}

func (o StackApiKeyOutput) ToStackApiKeyOutput() StackApiKeyOutput {
	return o
}

func (o StackApiKeyOutput) ToStackApiKeyOutputWithContext(ctx context.Context) StackApiKeyOutput {
	return o
}

func (o StackApiKeyOutput) Expiration() pulumi.StringOutput {
	return o.ApplyT(func(v *StackApiKey) pulumi.StringOutput { return v.Expiration }).(pulumi.StringOutput)
}

func (o StackApiKeyOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *StackApiKey) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

func (o StackApiKeyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *StackApiKey) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o StackApiKeyOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *StackApiKey) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func (o StackApiKeyOutput) SecondsToLive() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StackApiKey) pulumi.IntPtrOutput { return v.SecondsToLive }).(pulumi.IntPtrOutput)
}

func (o StackApiKeyOutput) StackSlug() pulumi.StringOutput {
	return o.ApplyT(func(v *StackApiKey) pulumi.StringOutput { return v.StackSlug }).(pulumi.StringOutput)
}

type StackApiKeyArrayOutput struct{ *pulumi.OutputState }

func (StackApiKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StackApiKey)(nil)).Elem()
}

func (o StackApiKeyArrayOutput) ToStackApiKeyArrayOutput() StackApiKeyArrayOutput {
	return o
}

func (o StackApiKeyArrayOutput) ToStackApiKeyArrayOutputWithContext(ctx context.Context) StackApiKeyArrayOutput {
	return o
}

func (o StackApiKeyArrayOutput) Index(i pulumi.IntInput) StackApiKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StackApiKey {
		return vs[0].([]*StackApiKey)[vs[1].(int)]
	}).(StackApiKeyOutput)
}

type StackApiKeyMapOutput struct{ *pulumi.OutputState }

func (StackApiKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StackApiKey)(nil)).Elem()
}

func (o StackApiKeyMapOutput) ToStackApiKeyMapOutput() StackApiKeyMapOutput {
	return o
}

func (o StackApiKeyMapOutput) ToStackApiKeyMapOutputWithContext(ctx context.Context) StackApiKeyMapOutput {
	return o
}

func (o StackApiKeyMapOutput) MapIndex(k pulumi.StringInput) StackApiKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StackApiKey {
		return vs[0].(map[string]*StackApiKey)[vs[1].(string)]
	}).(StackApiKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StackApiKeyInput)(nil)).Elem(), &StackApiKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackApiKeyArrayInput)(nil)).Elem(), StackApiKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackApiKeyMapInput)(nil)).Elem(), StackApiKeyMap{})
	pulumi.RegisterOutputType(StackApiKeyOutput{})
	pulumi.RegisterOutputType(StackApiKeyArrayOutput{})
	pulumi.RegisterOutputType(StackApiKeyMapOutput{})
}
