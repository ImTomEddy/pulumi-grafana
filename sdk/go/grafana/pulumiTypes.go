// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type BuiltinRoleAssignmentRole struct {
	// States whether the assignment is available across all organizations or not. Defaults to `false`.
	Global *bool `pulumi:"global"`
	// Unique identifier of the role to assign to `builtinRole`.
	Uid string `pulumi:"uid"`
}

// BuiltinRoleAssignmentRoleInput is an input type that accepts BuiltinRoleAssignmentRoleArgs and BuiltinRoleAssignmentRoleOutput values.
// You can construct a concrete instance of `BuiltinRoleAssignmentRoleInput` via:
//
//	BuiltinRoleAssignmentRoleArgs{...}
type BuiltinRoleAssignmentRoleInput interface {
	pulumi.Input

	ToBuiltinRoleAssignmentRoleOutput() BuiltinRoleAssignmentRoleOutput
	ToBuiltinRoleAssignmentRoleOutputWithContext(context.Context) BuiltinRoleAssignmentRoleOutput
}

type BuiltinRoleAssignmentRoleArgs struct {
	// States whether the assignment is available across all organizations or not. Defaults to `false`.
	Global pulumi.BoolPtrInput `pulumi:"global"`
	// Unique identifier of the role to assign to `builtinRole`.
	Uid pulumi.StringInput `pulumi:"uid"`
}

func (BuiltinRoleAssignmentRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuiltinRoleAssignmentRole)(nil)).Elem()
}

func (i BuiltinRoleAssignmentRoleArgs) ToBuiltinRoleAssignmentRoleOutput() BuiltinRoleAssignmentRoleOutput {
	return i.ToBuiltinRoleAssignmentRoleOutputWithContext(context.Background())
}

func (i BuiltinRoleAssignmentRoleArgs) ToBuiltinRoleAssignmentRoleOutputWithContext(ctx context.Context) BuiltinRoleAssignmentRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuiltinRoleAssignmentRoleOutput)
}

// BuiltinRoleAssignmentRoleArrayInput is an input type that accepts BuiltinRoleAssignmentRoleArray and BuiltinRoleAssignmentRoleArrayOutput values.
// You can construct a concrete instance of `BuiltinRoleAssignmentRoleArrayInput` via:
//
//	BuiltinRoleAssignmentRoleArray{ BuiltinRoleAssignmentRoleArgs{...} }
type BuiltinRoleAssignmentRoleArrayInput interface {
	pulumi.Input

	ToBuiltinRoleAssignmentRoleArrayOutput() BuiltinRoleAssignmentRoleArrayOutput
	ToBuiltinRoleAssignmentRoleArrayOutputWithContext(context.Context) BuiltinRoleAssignmentRoleArrayOutput
}

type BuiltinRoleAssignmentRoleArray []BuiltinRoleAssignmentRoleInput

func (BuiltinRoleAssignmentRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BuiltinRoleAssignmentRole)(nil)).Elem()
}

func (i BuiltinRoleAssignmentRoleArray) ToBuiltinRoleAssignmentRoleArrayOutput() BuiltinRoleAssignmentRoleArrayOutput {
	return i.ToBuiltinRoleAssignmentRoleArrayOutputWithContext(context.Background())
}

func (i BuiltinRoleAssignmentRoleArray) ToBuiltinRoleAssignmentRoleArrayOutputWithContext(ctx context.Context) BuiltinRoleAssignmentRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuiltinRoleAssignmentRoleArrayOutput)
}

type BuiltinRoleAssignmentRoleOutput struct{ *pulumi.OutputState }

func (BuiltinRoleAssignmentRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuiltinRoleAssignmentRole)(nil)).Elem()
}

func (o BuiltinRoleAssignmentRoleOutput) ToBuiltinRoleAssignmentRoleOutput() BuiltinRoleAssignmentRoleOutput {
	return o
}

func (o BuiltinRoleAssignmentRoleOutput) ToBuiltinRoleAssignmentRoleOutputWithContext(ctx context.Context) BuiltinRoleAssignmentRoleOutput {
	return o
}

// States whether the assignment is available across all organizations or not. Defaults to `false`.
func (o BuiltinRoleAssignmentRoleOutput) Global() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BuiltinRoleAssignmentRole) *bool { return v.Global }).(pulumi.BoolPtrOutput)
}

// Unique identifier of the role to assign to `builtinRole`.
func (o BuiltinRoleAssignmentRoleOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v BuiltinRoleAssignmentRole) string { return v.Uid }).(pulumi.StringOutput)
}

type BuiltinRoleAssignmentRoleArrayOutput struct{ *pulumi.OutputState }

func (BuiltinRoleAssignmentRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BuiltinRoleAssignmentRole)(nil)).Elem()
}

func (o BuiltinRoleAssignmentRoleArrayOutput) ToBuiltinRoleAssignmentRoleArrayOutput() BuiltinRoleAssignmentRoleArrayOutput {
	return o
}

func (o BuiltinRoleAssignmentRoleArrayOutput) ToBuiltinRoleAssignmentRoleArrayOutputWithContext(ctx context.Context) BuiltinRoleAssignmentRoleArrayOutput {
	return o
}

func (o BuiltinRoleAssignmentRoleArrayOutput) Index(i pulumi.IntInput) BuiltinRoleAssignmentRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BuiltinRoleAssignmentRole {
		return vs[0].([]BuiltinRoleAssignmentRole)[vs[1].(int)]
	}).(BuiltinRoleAssignmentRoleOutput)
}

type ContactPointAlertmanager struct {
	// The password component of the basic auth credentials to use.
	BasicAuthPassword *string `pulumi:"basicAuthPassword"`
	// The username component of the basic auth credentials to use.
	BasicAuthUser *string `pulumi:"basicAuthUser"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// The URL of the Alertmanager instance.
	Url string `pulumi:"url"`
}

// ContactPointAlertmanagerInput is an input type that accepts ContactPointAlertmanagerArgs and ContactPointAlertmanagerOutput values.
// You can construct a concrete instance of `ContactPointAlertmanagerInput` via:
//
//	ContactPointAlertmanagerArgs{...}
type ContactPointAlertmanagerInput interface {
	pulumi.Input

	ToContactPointAlertmanagerOutput() ContactPointAlertmanagerOutput
	ToContactPointAlertmanagerOutputWithContext(context.Context) ContactPointAlertmanagerOutput
}

type ContactPointAlertmanagerArgs struct {
	// The password component of the basic auth credentials to use.
	BasicAuthPassword pulumi.StringPtrInput `pulumi:"basicAuthPassword"`
	// The username component of the basic auth credentials to use.
	BasicAuthUser pulumi.StringPtrInput `pulumi:"basicAuthUser"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// The URL of the Alertmanager instance.
	Url pulumi.StringInput `pulumi:"url"`
}

func (ContactPointAlertmanagerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointAlertmanager)(nil)).Elem()
}

func (i ContactPointAlertmanagerArgs) ToContactPointAlertmanagerOutput() ContactPointAlertmanagerOutput {
	return i.ToContactPointAlertmanagerOutputWithContext(context.Background())
}

func (i ContactPointAlertmanagerArgs) ToContactPointAlertmanagerOutputWithContext(ctx context.Context) ContactPointAlertmanagerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointAlertmanagerOutput)
}

// ContactPointAlertmanagerArrayInput is an input type that accepts ContactPointAlertmanagerArray and ContactPointAlertmanagerArrayOutput values.
// You can construct a concrete instance of `ContactPointAlertmanagerArrayInput` via:
//
//	ContactPointAlertmanagerArray{ ContactPointAlertmanagerArgs{...} }
type ContactPointAlertmanagerArrayInput interface {
	pulumi.Input

	ToContactPointAlertmanagerArrayOutput() ContactPointAlertmanagerArrayOutput
	ToContactPointAlertmanagerArrayOutputWithContext(context.Context) ContactPointAlertmanagerArrayOutput
}

type ContactPointAlertmanagerArray []ContactPointAlertmanagerInput

func (ContactPointAlertmanagerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointAlertmanager)(nil)).Elem()
}

func (i ContactPointAlertmanagerArray) ToContactPointAlertmanagerArrayOutput() ContactPointAlertmanagerArrayOutput {
	return i.ToContactPointAlertmanagerArrayOutputWithContext(context.Background())
}

func (i ContactPointAlertmanagerArray) ToContactPointAlertmanagerArrayOutputWithContext(ctx context.Context) ContactPointAlertmanagerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointAlertmanagerArrayOutput)
}

type ContactPointAlertmanagerOutput struct{ *pulumi.OutputState }

func (ContactPointAlertmanagerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointAlertmanager)(nil)).Elem()
}

func (o ContactPointAlertmanagerOutput) ToContactPointAlertmanagerOutput() ContactPointAlertmanagerOutput {
	return o
}

func (o ContactPointAlertmanagerOutput) ToContactPointAlertmanagerOutputWithContext(ctx context.Context) ContactPointAlertmanagerOutput {
	return o
}

// The password component of the basic auth credentials to use.
func (o ContactPointAlertmanagerOutput) BasicAuthPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointAlertmanager) *string { return v.BasicAuthPassword }).(pulumi.StringPtrOutput)
}

// The username component of the basic auth credentials to use.
func (o ContactPointAlertmanagerOutput) BasicAuthUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointAlertmanager) *string { return v.BasicAuthUser }).(pulumi.StringPtrOutput)
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointAlertmanagerOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointAlertmanager) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointAlertmanagerOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointAlertmanager) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// The UID of the contact point.
func (o ContactPointAlertmanagerOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointAlertmanager) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// The URL of the Alertmanager instance.
func (o ContactPointAlertmanagerOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointAlertmanager) string { return v.Url }).(pulumi.StringOutput)
}

type ContactPointAlertmanagerArrayOutput struct{ *pulumi.OutputState }

func (ContactPointAlertmanagerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointAlertmanager)(nil)).Elem()
}

func (o ContactPointAlertmanagerArrayOutput) ToContactPointAlertmanagerArrayOutput() ContactPointAlertmanagerArrayOutput {
	return o
}

func (o ContactPointAlertmanagerArrayOutput) ToContactPointAlertmanagerArrayOutputWithContext(ctx context.Context) ContactPointAlertmanagerArrayOutput {
	return o
}

func (o ContactPointAlertmanagerArrayOutput) Index(i pulumi.IntInput) ContactPointAlertmanagerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointAlertmanager {
		return vs[0].([]ContactPointAlertmanager)[vs[1].(int)]
	}).(ContactPointAlertmanagerOutput)
}

type ContactPointDingding struct {
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The templated content of the message.
	Message *string `pulumi:"message"`
	// The format of message to send - either 'link' or 'actionCard'
	MessageType *string `pulumi:"messageType"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// The DingDing webhook URL.
	Url string `pulumi:"url"`
}

// ContactPointDingdingInput is an input type that accepts ContactPointDingdingArgs and ContactPointDingdingOutput values.
// You can construct a concrete instance of `ContactPointDingdingInput` via:
//
//	ContactPointDingdingArgs{...}
type ContactPointDingdingInput interface {
	pulumi.Input

	ToContactPointDingdingOutput() ContactPointDingdingOutput
	ToContactPointDingdingOutputWithContext(context.Context) ContactPointDingdingOutput
}

type ContactPointDingdingArgs struct {
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// The templated content of the message.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The format of message to send - either 'link' or 'actionCard'
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// The DingDing webhook URL.
	Url pulumi.StringInput `pulumi:"url"`
}

func (ContactPointDingdingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointDingding)(nil)).Elem()
}

func (i ContactPointDingdingArgs) ToContactPointDingdingOutput() ContactPointDingdingOutput {
	return i.ToContactPointDingdingOutputWithContext(context.Background())
}

func (i ContactPointDingdingArgs) ToContactPointDingdingOutputWithContext(ctx context.Context) ContactPointDingdingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointDingdingOutput)
}

// ContactPointDingdingArrayInput is an input type that accepts ContactPointDingdingArray and ContactPointDingdingArrayOutput values.
// You can construct a concrete instance of `ContactPointDingdingArrayInput` via:
//
//	ContactPointDingdingArray{ ContactPointDingdingArgs{...} }
type ContactPointDingdingArrayInput interface {
	pulumi.Input

	ToContactPointDingdingArrayOutput() ContactPointDingdingArrayOutput
	ToContactPointDingdingArrayOutputWithContext(context.Context) ContactPointDingdingArrayOutput
}

type ContactPointDingdingArray []ContactPointDingdingInput

func (ContactPointDingdingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointDingding)(nil)).Elem()
}

func (i ContactPointDingdingArray) ToContactPointDingdingArrayOutput() ContactPointDingdingArrayOutput {
	return i.ToContactPointDingdingArrayOutputWithContext(context.Background())
}

func (i ContactPointDingdingArray) ToContactPointDingdingArrayOutputWithContext(ctx context.Context) ContactPointDingdingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointDingdingArrayOutput)
}

type ContactPointDingdingOutput struct{ *pulumi.OutputState }

func (ContactPointDingdingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointDingding)(nil)).Elem()
}

func (o ContactPointDingdingOutput) ToContactPointDingdingOutput() ContactPointDingdingOutput {
	return o
}

func (o ContactPointDingdingOutput) ToContactPointDingdingOutputWithContext(ctx context.Context) ContactPointDingdingOutput {
	return o
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointDingdingOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointDingding) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// The templated content of the message.
func (o ContactPointDingdingOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointDingding) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The format of message to send - either 'link' or 'actionCard'
func (o ContactPointDingdingOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointDingding) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointDingdingOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointDingding) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// The UID of the contact point.
func (o ContactPointDingdingOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointDingding) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// The DingDing webhook URL.
func (o ContactPointDingdingOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointDingding) string { return v.Url }).(pulumi.StringOutput)
}

type ContactPointDingdingArrayOutput struct{ *pulumi.OutputState }

func (ContactPointDingdingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointDingding)(nil)).Elem()
}

func (o ContactPointDingdingArrayOutput) ToContactPointDingdingArrayOutput() ContactPointDingdingArrayOutput {
	return o
}

func (o ContactPointDingdingArrayOutput) ToContactPointDingdingArrayOutputWithContext(ctx context.Context) ContactPointDingdingArrayOutput {
	return o
}

func (o ContactPointDingdingArrayOutput) Index(i pulumi.IntInput) ContactPointDingdingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointDingding {
		return vs[0].([]ContactPointDingding)[vs[1].(int)]
	}).(ContactPointDingdingOutput)
}

type ContactPointDiscord struct {
	// The URL of a custom avatar image to use. Defaults to ``.
	AvatarUrl *string `pulumi:"avatarUrl"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The templated content of the message. Defaults to ``.
	Message *string `pulumi:"message"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// The discord webhook URL.
	Url string `pulumi:"url"`
	// Whether to use the bot account's plain username instead of "Grafana." Defaults to `false`.
	UseDiscordUsername *bool `pulumi:"useDiscordUsername"`
}

// ContactPointDiscordInput is an input type that accepts ContactPointDiscordArgs and ContactPointDiscordOutput values.
// You can construct a concrete instance of `ContactPointDiscordInput` via:
//
//	ContactPointDiscordArgs{...}
type ContactPointDiscordInput interface {
	pulumi.Input

	ToContactPointDiscordOutput() ContactPointDiscordOutput
	ToContactPointDiscordOutputWithContext(context.Context) ContactPointDiscordOutput
}

type ContactPointDiscordArgs struct {
	// The URL of a custom avatar image to use. Defaults to ``.
	AvatarUrl pulumi.StringPtrInput `pulumi:"avatarUrl"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// The templated content of the message. Defaults to ``.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// The discord webhook URL.
	Url pulumi.StringInput `pulumi:"url"`
	// Whether to use the bot account's plain username instead of "Grafana." Defaults to `false`.
	UseDiscordUsername pulumi.BoolPtrInput `pulumi:"useDiscordUsername"`
}

func (ContactPointDiscordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointDiscord)(nil)).Elem()
}

func (i ContactPointDiscordArgs) ToContactPointDiscordOutput() ContactPointDiscordOutput {
	return i.ToContactPointDiscordOutputWithContext(context.Background())
}

func (i ContactPointDiscordArgs) ToContactPointDiscordOutputWithContext(ctx context.Context) ContactPointDiscordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointDiscordOutput)
}

// ContactPointDiscordArrayInput is an input type that accepts ContactPointDiscordArray and ContactPointDiscordArrayOutput values.
// You can construct a concrete instance of `ContactPointDiscordArrayInput` via:
//
//	ContactPointDiscordArray{ ContactPointDiscordArgs{...} }
type ContactPointDiscordArrayInput interface {
	pulumi.Input

	ToContactPointDiscordArrayOutput() ContactPointDiscordArrayOutput
	ToContactPointDiscordArrayOutputWithContext(context.Context) ContactPointDiscordArrayOutput
}

type ContactPointDiscordArray []ContactPointDiscordInput

func (ContactPointDiscordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointDiscord)(nil)).Elem()
}

func (i ContactPointDiscordArray) ToContactPointDiscordArrayOutput() ContactPointDiscordArrayOutput {
	return i.ToContactPointDiscordArrayOutputWithContext(context.Background())
}

func (i ContactPointDiscordArray) ToContactPointDiscordArrayOutputWithContext(ctx context.Context) ContactPointDiscordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointDiscordArrayOutput)
}

type ContactPointDiscordOutput struct{ *pulumi.OutputState }

func (ContactPointDiscordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointDiscord)(nil)).Elem()
}

func (o ContactPointDiscordOutput) ToContactPointDiscordOutput() ContactPointDiscordOutput {
	return o
}

func (o ContactPointDiscordOutput) ToContactPointDiscordOutputWithContext(ctx context.Context) ContactPointDiscordOutput {
	return o
}

// The URL of a custom avatar image to use. Defaults to “.
func (o ContactPointDiscordOutput) AvatarUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointDiscord) *string { return v.AvatarUrl }).(pulumi.StringPtrOutput)
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointDiscordOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointDiscord) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// The templated content of the message. Defaults to “.
func (o ContactPointDiscordOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointDiscord) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointDiscordOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointDiscord) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// The UID of the contact point.
func (o ContactPointDiscordOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointDiscord) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// The discord webhook URL.
func (o ContactPointDiscordOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointDiscord) string { return v.Url }).(pulumi.StringOutput)
}

// Whether to use the bot account's plain username instead of "Grafana." Defaults to `false`.
func (o ContactPointDiscordOutput) UseDiscordUsername() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointDiscord) *bool { return v.UseDiscordUsername }).(pulumi.BoolPtrOutput)
}

type ContactPointDiscordArrayOutput struct{ *pulumi.OutputState }

func (ContactPointDiscordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointDiscord)(nil)).Elem()
}

func (o ContactPointDiscordArrayOutput) ToContactPointDiscordArrayOutput() ContactPointDiscordArrayOutput {
	return o
}

func (o ContactPointDiscordArrayOutput) ToContactPointDiscordArrayOutputWithContext(ctx context.Context) ContactPointDiscordArrayOutput {
	return o
}

func (o ContactPointDiscordArrayOutput) Index(i pulumi.IntInput) ContactPointDiscordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointDiscord {
		return vs[0].([]ContactPointDiscord)[vs[1].(int)]
	}).(ContactPointDiscordOutput)
}

type ContactPointEmail struct {
	// The addresses to send emails to.
	Addresses []string `pulumi:"addresses"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The templated content of the email. Defaults to ``.
	Message *string `pulumi:"message"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// Whether to send a single email CC'ing all addresses, rather than a separate email to each address. Defaults to `false`.
	SingleEmail *bool `pulumi:"singleEmail"`
	// The templated subject line of the email. Defaults to ``.
	Subject *string `pulumi:"subject"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
}

// ContactPointEmailInput is an input type that accepts ContactPointEmailArgs and ContactPointEmailOutput values.
// You can construct a concrete instance of `ContactPointEmailInput` via:
//
//	ContactPointEmailArgs{...}
type ContactPointEmailInput interface {
	pulumi.Input

	ToContactPointEmailOutput() ContactPointEmailOutput
	ToContactPointEmailOutputWithContext(context.Context) ContactPointEmailOutput
}

type ContactPointEmailArgs struct {
	// The addresses to send emails to.
	Addresses pulumi.StringArrayInput `pulumi:"addresses"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// The templated content of the email. Defaults to ``.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// Whether to send a single email CC'ing all addresses, rather than a separate email to each address. Defaults to `false`.
	SingleEmail pulumi.BoolPtrInput `pulumi:"singleEmail"`
	// The templated subject line of the email. Defaults to ``.
	Subject pulumi.StringPtrInput `pulumi:"subject"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (ContactPointEmailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointEmail)(nil)).Elem()
}

func (i ContactPointEmailArgs) ToContactPointEmailOutput() ContactPointEmailOutput {
	return i.ToContactPointEmailOutputWithContext(context.Background())
}

func (i ContactPointEmailArgs) ToContactPointEmailOutputWithContext(ctx context.Context) ContactPointEmailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointEmailOutput)
}

// ContactPointEmailArrayInput is an input type that accepts ContactPointEmailArray and ContactPointEmailArrayOutput values.
// You can construct a concrete instance of `ContactPointEmailArrayInput` via:
//
//	ContactPointEmailArray{ ContactPointEmailArgs{...} }
type ContactPointEmailArrayInput interface {
	pulumi.Input

	ToContactPointEmailArrayOutput() ContactPointEmailArrayOutput
	ToContactPointEmailArrayOutputWithContext(context.Context) ContactPointEmailArrayOutput
}

type ContactPointEmailArray []ContactPointEmailInput

func (ContactPointEmailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointEmail)(nil)).Elem()
}

func (i ContactPointEmailArray) ToContactPointEmailArrayOutput() ContactPointEmailArrayOutput {
	return i.ToContactPointEmailArrayOutputWithContext(context.Background())
}

func (i ContactPointEmailArray) ToContactPointEmailArrayOutputWithContext(ctx context.Context) ContactPointEmailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointEmailArrayOutput)
}

type ContactPointEmailOutput struct{ *pulumi.OutputState }

func (ContactPointEmailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointEmail)(nil)).Elem()
}

func (o ContactPointEmailOutput) ToContactPointEmailOutput() ContactPointEmailOutput {
	return o
}

func (o ContactPointEmailOutput) ToContactPointEmailOutputWithContext(ctx context.Context) ContactPointEmailOutput {
	return o
}

// The addresses to send emails to.
func (o ContactPointEmailOutput) Addresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContactPointEmail) []string { return v.Addresses }).(pulumi.StringArrayOutput)
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointEmailOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointEmail) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// The templated content of the email. Defaults to “.
func (o ContactPointEmailOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointEmail) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointEmailOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointEmail) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// Whether to send a single email CC'ing all addresses, rather than a separate email to each address. Defaults to `false`.
func (o ContactPointEmailOutput) SingleEmail() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointEmail) *bool { return v.SingleEmail }).(pulumi.BoolPtrOutput)
}

// The templated subject line of the email. Defaults to “.
func (o ContactPointEmailOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointEmail) *string { return v.Subject }).(pulumi.StringPtrOutput)
}

// The UID of the contact point.
func (o ContactPointEmailOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointEmail) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type ContactPointEmailArrayOutput struct{ *pulumi.OutputState }

func (ContactPointEmailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointEmail)(nil)).Elem()
}

func (o ContactPointEmailArrayOutput) ToContactPointEmailArrayOutput() ContactPointEmailArrayOutput {
	return o
}

func (o ContactPointEmailArrayOutput) ToContactPointEmailArrayOutputWithContext(ctx context.Context) ContactPointEmailArrayOutput {
	return o
}

func (o ContactPointEmailArrayOutput) Index(i pulumi.IntInput) ContactPointEmailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointEmail {
		return vs[0].([]ContactPointEmail)[vs[1].(int)]
	}).(ContactPointEmailOutput)
}

type ContactPointGooglechat struct {
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The templated content of the message.
	Message *string `pulumi:"message"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// The Google Chat webhook URL.
	Url string `pulumi:"url"`
}

// ContactPointGooglechatInput is an input type that accepts ContactPointGooglechatArgs and ContactPointGooglechatOutput values.
// You can construct a concrete instance of `ContactPointGooglechatInput` via:
//
//	ContactPointGooglechatArgs{...}
type ContactPointGooglechatInput interface {
	pulumi.Input

	ToContactPointGooglechatOutput() ContactPointGooglechatOutput
	ToContactPointGooglechatOutputWithContext(context.Context) ContactPointGooglechatOutput
}

type ContactPointGooglechatArgs struct {
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// The templated content of the message.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// The Google Chat webhook URL.
	Url pulumi.StringInput `pulumi:"url"`
}

func (ContactPointGooglechatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointGooglechat)(nil)).Elem()
}

func (i ContactPointGooglechatArgs) ToContactPointGooglechatOutput() ContactPointGooglechatOutput {
	return i.ToContactPointGooglechatOutputWithContext(context.Background())
}

func (i ContactPointGooglechatArgs) ToContactPointGooglechatOutputWithContext(ctx context.Context) ContactPointGooglechatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointGooglechatOutput)
}

// ContactPointGooglechatArrayInput is an input type that accepts ContactPointGooglechatArray and ContactPointGooglechatArrayOutput values.
// You can construct a concrete instance of `ContactPointGooglechatArrayInput` via:
//
//	ContactPointGooglechatArray{ ContactPointGooglechatArgs{...} }
type ContactPointGooglechatArrayInput interface {
	pulumi.Input

	ToContactPointGooglechatArrayOutput() ContactPointGooglechatArrayOutput
	ToContactPointGooglechatArrayOutputWithContext(context.Context) ContactPointGooglechatArrayOutput
}

type ContactPointGooglechatArray []ContactPointGooglechatInput

func (ContactPointGooglechatArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointGooglechat)(nil)).Elem()
}

func (i ContactPointGooglechatArray) ToContactPointGooglechatArrayOutput() ContactPointGooglechatArrayOutput {
	return i.ToContactPointGooglechatArrayOutputWithContext(context.Background())
}

func (i ContactPointGooglechatArray) ToContactPointGooglechatArrayOutputWithContext(ctx context.Context) ContactPointGooglechatArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointGooglechatArrayOutput)
}

type ContactPointGooglechatOutput struct{ *pulumi.OutputState }

func (ContactPointGooglechatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointGooglechat)(nil)).Elem()
}

func (o ContactPointGooglechatOutput) ToContactPointGooglechatOutput() ContactPointGooglechatOutput {
	return o
}

func (o ContactPointGooglechatOutput) ToContactPointGooglechatOutputWithContext(ctx context.Context) ContactPointGooglechatOutput {
	return o
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointGooglechatOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointGooglechat) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// The templated content of the message.
func (o ContactPointGooglechatOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointGooglechat) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointGooglechatOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointGooglechat) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// The UID of the contact point.
func (o ContactPointGooglechatOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointGooglechat) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// The Google Chat webhook URL.
func (o ContactPointGooglechatOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointGooglechat) string { return v.Url }).(pulumi.StringOutput)
}

type ContactPointGooglechatArrayOutput struct{ *pulumi.OutputState }

func (ContactPointGooglechatArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointGooglechat)(nil)).Elem()
}

func (o ContactPointGooglechatArrayOutput) ToContactPointGooglechatArrayOutput() ContactPointGooglechatArrayOutput {
	return o
}

func (o ContactPointGooglechatArrayOutput) ToContactPointGooglechatArrayOutputWithContext(ctx context.Context) ContactPointGooglechatArrayOutput {
	return o
}

func (o ContactPointGooglechatArrayOutput) Index(i pulumi.IntInput) ContactPointGooglechatOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointGooglechat {
		return vs[0].([]ContactPointGooglechat)[vs[1].(int)]
	}).(ContactPointGooglechatOutput)
}

type ContactPointKafka struct {
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The URL of the Kafka REST proxy to send requests to.
	RestProxyUrl string `pulumi:"restProxyUrl"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The name of the Kafka topic to publish to.
	Topic string `pulumi:"topic"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
}

// ContactPointKafkaInput is an input type that accepts ContactPointKafkaArgs and ContactPointKafkaOutput values.
// You can construct a concrete instance of `ContactPointKafkaInput` via:
//
//	ContactPointKafkaArgs{...}
type ContactPointKafkaInput interface {
	pulumi.Input

	ToContactPointKafkaOutput() ContactPointKafkaOutput
	ToContactPointKafkaOutputWithContext(context.Context) ContactPointKafkaOutput
}

type ContactPointKafkaArgs struct {
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// The URL of the Kafka REST proxy to send requests to.
	RestProxyUrl pulumi.StringInput `pulumi:"restProxyUrl"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// The name of the Kafka topic to publish to.
	Topic pulumi.StringInput `pulumi:"topic"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (ContactPointKafkaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointKafka)(nil)).Elem()
}

func (i ContactPointKafkaArgs) ToContactPointKafkaOutput() ContactPointKafkaOutput {
	return i.ToContactPointKafkaOutputWithContext(context.Background())
}

func (i ContactPointKafkaArgs) ToContactPointKafkaOutputWithContext(ctx context.Context) ContactPointKafkaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointKafkaOutput)
}

// ContactPointKafkaArrayInput is an input type that accepts ContactPointKafkaArray and ContactPointKafkaArrayOutput values.
// You can construct a concrete instance of `ContactPointKafkaArrayInput` via:
//
//	ContactPointKafkaArray{ ContactPointKafkaArgs{...} }
type ContactPointKafkaArrayInput interface {
	pulumi.Input

	ToContactPointKafkaArrayOutput() ContactPointKafkaArrayOutput
	ToContactPointKafkaArrayOutputWithContext(context.Context) ContactPointKafkaArrayOutput
}

type ContactPointKafkaArray []ContactPointKafkaInput

func (ContactPointKafkaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointKafka)(nil)).Elem()
}

func (i ContactPointKafkaArray) ToContactPointKafkaArrayOutput() ContactPointKafkaArrayOutput {
	return i.ToContactPointKafkaArrayOutputWithContext(context.Background())
}

func (i ContactPointKafkaArray) ToContactPointKafkaArrayOutputWithContext(ctx context.Context) ContactPointKafkaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointKafkaArrayOutput)
}

type ContactPointKafkaOutput struct{ *pulumi.OutputState }

func (ContactPointKafkaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointKafka)(nil)).Elem()
}

func (o ContactPointKafkaOutput) ToContactPointKafkaOutput() ContactPointKafkaOutput {
	return o
}

func (o ContactPointKafkaOutput) ToContactPointKafkaOutputWithContext(ctx context.Context) ContactPointKafkaOutput {
	return o
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointKafkaOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointKafka) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// The URL of the Kafka REST proxy to send requests to.
func (o ContactPointKafkaOutput) RestProxyUrl() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointKafka) string { return v.RestProxyUrl }).(pulumi.StringOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointKafkaOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointKafka) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// The name of the Kafka topic to publish to.
func (o ContactPointKafkaOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointKafka) string { return v.Topic }).(pulumi.StringOutput)
}

// The UID of the contact point.
func (o ContactPointKafkaOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointKafka) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type ContactPointKafkaArrayOutput struct{ *pulumi.OutputState }

func (ContactPointKafkaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointKafka)(nil)).Elem()
}

func (o ContactPointKafkaArrayOutput) ToContactPointKafkaArrayOutput() ContactPointKafkaArrayOutput {
	return o
}

func (o ContactPointKafkaArrayOutput) ToContactPointKafkaArrayOutputWithContext(ctx context.Context) ContactPointKafkaArrayOutput {
	return o
}

func (o ContactPointKafkaArrayOutput) Index(i pulumi.IntInput) ContactPointKafkaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointKafka {
		return vs[0].([]ContactPointKafka)[vs[1].(int)]
	}).(ContactPointKafkaOutput)
}

type ContactPointOpsgeny struct {
	// The OpsGenie API key to use.
	ApiKey string `pulumi:"apiKey"`
	// Whether to auto-close alerts in OpsGenie when they resolve in the Alertmanager.
	AutoClose *bool `pulumi:"autoClose"`
	// A templated high-level description to use for the alert.
	Description *string `pulumi:"description"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The templated content of the message.
	Message *string `pulumi:"message"`
	// Whether to allow the alert priority to be configured via the value of the `ogPriority` annotation on the alert.
	OverridePriority *bool `pulumi:"overridePriority"`
	// Whether to send annotations to OpsGenie as Tags, Details, or both. Supported values are `tags`, `details`, `both`, or empty to use the default behavior of Tags.
	SendTagsAs *string `pulumi:"sendTagsAs"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// Allows customization of the OpsGenie API URL.
	Url *string `pulumi:"url"`
}

// ContactPointOpsgenyInput is an input type that accepts ContactPointOpsgenyArgs and ContactPointOpsgenyOutput values.
// You can construct a concrete instance of `ContactPointOpsgenyInput` via:
//
//	ContactPointOpsgenyArgs{...}
type ContactPointOpsgenyInput interface {
	pulumi.Input

	ToContactPointOpsgenyOutput() ContactPointOpsgenyOutput
	ToContactPointOpsgenyOutputWithContext(context.Context) ContactPointOpsgenyOutput
}

type ContactPointOpsgenyArgs struct {
	// The OpsGenie API key to use.
	ApiKey pulumi.StringInput `pulumi:"apiKey"`
	// Whether to auto-close alerts in OpsGenie when they resolve in the Alertmanager.
	AutoClose pulumi.BoolPtrInput `pulumi:"autoClose"`
	// A templated high-level description to use for the alert.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// The templated content of the message.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Whether to allow the alert priority to be configured via the value of the `ogPriority` annotation on the alert.
	OverridePriority pulumi.BoolPtrInput `pulumi:"overridePriority"`
	// Whether to send annotations to OpsGenie as Tags, Details, or both. Supported values are `tags`, `details`, `both`, or empty to use the default behavior of Tags.
	SendTagsAs pulumi.StringPtrInput `pulumi:"sendTagsAs"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// Allows customization of the OpsGenie API URL.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (ContactPointOpsgenyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointOpsgeny)(nil)).Elem()
}

func (i ContactPointOpsgenyArgs) ToContactPointOpsgenyOutput() ContactPointOpsgenyOutput {
	return i.ToContactPointOpsgenyOutputWithContext(context.Background())
}

func (i ContactPointOpsgenyArgs) ToContactPointOpsgenyOutputWithContext(ctx context.Context) ContactPointOpsgenyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointOpsgenyOutput)
}

// ContactPointOpsgenyArrayInput is an input type that accepts ContactPointOpsgenyArray and ContactPointOpsgenyArrayOutput values.
// You can construct a concrete instance of `ContactPointOpsgenyArrayInput` via:
//
//	ContactPointOpsgenyArray{ ContactPointOpsgenyArgs{...} }
type ContactPointOpsgenyArrayInput interface {
	pulumi.Input

	ToContactPointOpsgenyArrayOutput() ContactPointOpsgenyArrayOutput
	ToContactPointOpsgenyArrayOutputWithContext(context.Context) ContactPointOpsgenyArrayOutput
}

type ContactPointOpsgenyArray []ContactPointOpsgenyInput

func (ContactPointOpsgenyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointOpsgeny)(nil)).Elem()
}

func (i ContactPointOpsgenyArray) ToContactPointOpsgenyArrayOutput() ContactPointOpsgenyArrayOutput {
	return i.ToContactPointOpsgenyArrayOutputWithContext(context.Background())
}

func (i ContactPointOpsgenyArray) ToContactPointOpsgenyArrayOutputWithContext(ctx context.Context) ContactPointOpsgenyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointOpsgenyArrayOutput)
}

type ContactPointOpsgenyOutput struct{ *pulumi.OutputState }

func (ContactPointOpsgenyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointOpsgeny)(nil)).Elem()
}

func (o ContactPointOpsgenyOutput) ToContactPointOpsgenyOutput() ContactPointOpsgenyOutput {
	return o
}

func (o ContactPointOpsgenyOutput) ToContactPointOpsgenyOutputWithContext(ctx context.Context) ContactPointOpsgenyOutput {
	return o
}

// The OpsGenie API key to use.
func (o ContactPointOpsgenyOutput) ApiKey() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointOpsgeny) string { return v.ApiKey }).(pulumi.StringOutput)
}

// Whether to auto-close alerts in OpsGenie when they resolve in the Alertmanager.
func (o ContactPointOpsgenyOutput) AutoClose() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointOpsgeny) *bool { return v.AutoClose }).(pulumi.BoolPtrOutput)
}

// A templated high-level description to use for the alert.
func (o ContactPointOpsgenyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointOpsgeny) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointOpsgenyOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointOpsgeny) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// The templated content of the message.
func (o ContactPointOpsgenyOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointOpsgeny) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Whether to allow the alert priority to be configured via the value of the `ogPriority` annotation on the alert.
func (o ContactPointOpsgenyOutput) OverridePriority() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointOpsgeny) *bool { return v.OverridePriority }).(pulumi.BoolPtrOutput)
}

// Whether to send annotations to OpsGenie as Tags, Details, or both. Supported values are `tags`, `details`, `both`, or empty to use the default behavior of Tags.
func (o ContactPointOpsgenyOutput) SendTagsAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointOpsgeny) *string { return v.SendTagsAs }).(pulumi.StringPtrOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointOpsgenyOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointOpsgeny) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// The UID of the contact point.
func (o ContactPointOpsgenyOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointOpsgeny) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// Allows customization of the OpsGenie API URL.
func (o ContactPointOpsgenyOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointOpsgeny) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type ContactPointOpsgenyArrayOutput struct{ *pulumi.OutputState }

func (ContactPointOpsgenyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointOpsgeny)(nil)).Elem()
}

func (o ContactPointOpsgenyArrayOutput) ToContactPointOpsgenyArrayOutput() ContactPointOpsgenyArrayOutput {
	return o
}

func (o ContactPointOpsgenyArrayOutput) ToContactPointOpsgenyArrayOutputWithContext(ctx context.Context) ContactPointOpsgenyArrayOutput {
	return o
}

func (o ContactPointOpsgenyArrayOutput) Index(i pulumi.IntInput) ContactPointOpsgenyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointOpsgeny {
		return vs[0].([]ContactPointOpsgeny)[vs[1].(int)]
	}).(ContactPointOpsgenyOutput)
}

type ContactPointPagerduty struct {
	// The class or type of event, for example `ping failure`.
	Class *string `pulumi:"class"`
	// The component being affected by the event.
	Component *string `pulumi:"component"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The group to which the provided component belongs to.
	Group *string `pulumi:"group"`
	// The PagerDuty API key.
	IntegrationKey string `pulumi:"integrationKey"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The PagerDuty event severity level. Default is `critical`.
	Severity *string `pulumi:"severity"`
	// The templated summary message of the event.
	Summary *string `pulumi:"summary"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
}

// ContactPointPagerdutyInput is an input type that accepts ContactPointPagerdutyArgs and ContactPointPagerdutyOutput values.
// You can construct a concrete instance of `ContactPointPagerdutyInput` via:
//
//	ContactPointPagerdutyArgs{...}
type ContactPointPagerdutyInput interface {
	pulumi.Input

	ToContactPointPagerdutyOutput() ContactPointPagerdutyOutput
	ToContactPointPagerdutyOutputWithContext(context.Context) ContactPointPagerdutyOutput
}

type ContactPointPagerdutyArgs struct {
	// The class or type of event, for example `ping failure`.
	Class pulumi.StringPtrInput `pulumi:"class"`
	// The component being affected by the event.
	Component pulumi.StringPtrInput `pulumi:"component"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// The group to which the provided component belongs to.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// The PagerDuty API key.
	IntegrationKey pulumi.StringInput `pulumi:"integrationKey"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// The PagerDuty event severity level. Default is `critical`.
	Severity pulumi.StringPtrInput `pulumi:"severity"`
	// The templated summary message of the event.
	Summary pulumi.StringPtrInput `pulumi:"summary"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (ContactPointPagerdutyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointPagerduty)(nil)).Elem()
}

func (i ContactPointPagerdutyArgs) ToContactPointPagerdutyOutput() ContactPointPagerdutyOutput {
	return i.ToContactPointPagerdutyOutputWithContext(context.Background())
}

func (i ContactPointPagerdutyArgs) ToContactPointPagerdutyOutputWithContext(ctx context.Context) ContactPointPagerdutyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointPagerdutyOutput)
}

// ContactPointPagerdutyArrayInput is an input type that accepts ContactPointPagerdutyArray and ContactPointPagerdutyArrayOutput values.
// You can construct a concrete instance of `ContactPointPagerdutyArrayInput` via:
//
//	ContactPointPagerdutyArray{ ContactPointPagerdutyArgs{...} }
type ContactPointPagerdutyArrayInput interface {
	pulumi.Input

	ToContactPointPagerdutyArrayOutput() ContactPointPagerdutyArrayOutput
	ToContactPointPagerdutyArrayOutputWithContext(context.Context) ContactPointPagerdutyArrayOutput
}

type ContactPointPagerdutyArray []ContactPointPagerdutyInput

func (ContactPointPagerdutyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointPagerduty)(nil)).Elem()
}

func (i ContactPointPagerdutyArray) ToContactPointPagerdutyArrayOutput() ContactPointPagerdutyArrayOutput {
	return i.ToContactPointPagerdutyArrayOutputWithContext(context.Background())
}

func (i ContactPointPagerdutyArray) ToContactPointPagerdutyArrayOutputWithContext(ctx context.Context) ContactPointPagerdutyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointPagerdutyArrayOutput)
}

type ContactPointPagerdutyOutput struct{ *pulumi.OutputState }

func (ContactPointPagerdutyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointPagerduty)(nil)).Elem()
}

func (o ContactPointPagerdutyOutput) ToContactPointPagerdutyOutput() ContactPointPagerdutyOutput {
	return o
}

func (o ContactPointPagerdutyOutput) ToContactPointPagerdutyOutputWithContext(ctx context.Context) ContactPointPagerdutyOutput {
	return o
}

// The class or type of event, for example `ping failure`.
func (o ContactPointPagerdutyOutput) Class() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointPagerduty) *string { return v.Class }).(pulumi.StringPtrOutput)
}

// The component being affected by the event.
func (o ContactPointPagerdutyOutput) Component() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointPagerduty) *string { return v.Component }).(pulumi.StringPtrOutput)
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointPagerdutyOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointPagerduty) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// The group to which the provided component belongs to.
func (o ContactPointPagerdutyOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointPagerduty) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// The PagerDuty API key.
func (o ContactPointPagerdutyOutput) IntegrationKey() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointPagerduty) string { return v.IntegrationKey }).(pulumi.StringOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointPagerdutyOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointPagerduty) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// The PagerDuty event severity level. Default is `critical`.
func (o ContactPointPagerdutyOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointPagerduty) *string { return v.Severity }).(pulumi.StringPtrOutput)
}

// The templated summary message of the event.
func (o ContactPointPagerdutyOutput) Summary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointPagerduty) *string { return v.Summary }).(pulumi.StringPtrOutput)
}

// The UID of the contact point.
func (o ContactPointPagerdutyOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointPagerduty) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type ContactPointPagerdutyArrayOutput struct{ *pulumi.OutputState }

func (ContactPointPagerdutyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointPagerduty)(nil)).Elem()
}

func (o ContactPointPagerdutyArrayOutput) ToContactPointPagerdutyArrayOutput() ContactPointPagerdutyArrayOutput {
	return o
}

func (o ContactPointPagerdutyArrayOutput) ToContactPointPagerdutyArrayOutputWithContext(ctx context.Context) ContactPointPagerdutyArrayOutput {
	return o
}

func (o ContactPointPagerdutyArrayOutput) Index(i pulumi.IntInput) ContactPointPagerdutyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointPagerduty {
		return vs[0].([]ContactPointPagerduty)[vs[1].(int)]
	}).(ContactPointPagerdutyOutput)
}

type ContactPointPushover struct {
	// The Pushover API token.
	ApiToken string `pulumi:"apiToken"`
	// Comma-separated list of devices to which the event is associated.
	Device *string `pulumi:"device"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// How many seconds for which the notification will continue to be retried by Pushover.
	Expire *int `pulumi:"expire"`
	// The templated notification message content.
	Message *string `pulumi:"message"`
	// The priority level of the resolved event.
	OkPriority *int `pulumi:"okPriority"`
	// The sound associated with the resolved notification.
	OkSound *string `pulumi:"okSound"`
	// The priority level of the event.
	Priority *int `pulumi:"priority"`
	// How often, in seconds, the Pushover servers will send the same notification to the user.
	Retry *int `pulumi:"retry"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The sound associated with the notification.
	Sound *string `pulumi:"sound"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// The Pushover user key.
	UserKey string `pulumi:"userKey"`
}

// ContactPointPushoverInput is an input type that accepts ContactPointPushoverArgs and ContactPointPushoverOutput values.
// You can construct a concrete instance of `ContactPointPushoverInput` via:
//
//	ContactPointPushoverArgs{...}
type ContactPointPushoverInput interface {
	pulumi.Input

	ToContactPointPushoverOutput() ContactPointPushoverOutput
	ToContactPointPushoverOutputWithContext(context.Context) ContactPointPushoverOutput
}

type ContactPointPushoverArgs struct {
	// The Pushover API token.
	ApiToken pulumi.StringInput `pulumi:"apiToken"`
	// Comma-separated list of devices to which the event is associated.
	Device pulumi.StringPtrInput `pulumi:"device"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// How many seconds for which the notification will continue to be retried by Pushover.
	Expire pulumi.IntPtrInput `pulumi:"expire"`
	// The templated notification message content.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The priority level of the resolved event.
	OkPriority pulumi.IntPtrInput `pulumi:"okPriority"`
	// The sound associated with the resolved notification.
	OkSound pulumi.StringPtrInput `pulumi:"okSound"`
	// The priority level of the event.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// How often, in seconds, the Pushover servers will send the same notification to the user.
	Retry pulumi.IntPtrInput `pulumi:"retry"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// The sound associated with the notification.
	Sound pulumi.StringPtrInput `pulumi:"sound"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// The Pushover user key.
	UserKey pulumi.StringInput `pulumi:"userKey"`
}

func (ContactPointPushoverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointPushover)(nil)).Elem()
}

func (i ContactPointPushoverArgs) ToContactPointPushoverOutput() ContactPointPushoverOutput {
	return i.ToContactPointPushoverOutputWithContext(context.Background())
}

func (i ContactPointPushoverArgs) ToContactPointPushoverOutputWithContext(ctx context.Context) ContactPointPushoverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointPushoverOutput)
}

// ContactPointPushoverArrayInput is an input type that accepts ContactPointPushoverArray and ContactPointPushoverArrayOutput values.
// You can construct a concrete instance of `ContactPointPushoverArrayInput` via:
//
//	ContactPointPushoverArray{ ContactPointPushoverArgs{...} }
type ContactPointPushoverArrayInput interface {
	pulumi.Input

	ToContactPointPushoverArrayOutput() ContactPointPushoverArrayOutput
	ToContactPointPushoverArrayOutputWithContext(context.Context) ContactPointPushoverArrayOutput
}

type ContactPointPushoverArray []ContactPointPushoverInput

func (ContactPointPushoverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointPushover)(nil)).Elem()
}

func (i ContactPointPushoverArray) ToContactPointPushoverArrayOutput() ContactPointPushoverArrayOutput {
	return i.ToContactPointPushoverArrayOutputWithContext(context.Background())
}

func (i ContactPointPushoverArray) ToContactPointPushoverArrayOutputWithContext(ctx context.Context) ContactPointPushoverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointPushoverArrayOutput)
}

type ContactPointPushoverOutput struct{ *pulumi.OutputState }

func (ContactPointPushoverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointPushover)(nil)).Elem()
}

func (o ContactPointPushoverOutput) ToContactPointPushoverOutput() ContactPointPushoverOutput {
	return o
}

func (o ContactPointPushoverOutput) ToContactPointPushoverOutputWithContext(ctx context.Context) ContactPointPushoverOutput {
	return o
}

// The Pushover API token.
func (o ContactPointPushoverOutput) ApiToken() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointPushover) string { return v.ApiToken }).(pulumi.StringOutput)
}

// Comma-separated list of devices to which the event is associated.
func (o ContactPointPushoverOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointPushover) *string { return v.Device }).(pulumi.StringPtrOutput)
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointPushoverOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointPushover) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// How many seconds for which the notification will continue to be retried by Pushover.
func (o ContactPointPushoverOutput) Expire() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContactPointPushover) *int { return v.Expire }).(pulumi.IntPtrOutput)
}

// The templated notification message content.
func (o ContactPointPushoverOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointPushover) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The priority level of the resolved event.
func (o ContactPointPushoverOutput) OkPriority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContactPointPushover) *int { return v.OkPriority }).(pulumi.IntPtrOutput)
}

// The sound associated with the resolved notification.
func (o ContactPointPushoverOutput) OkSound() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointPushover) *string { return v.OkSound }).(pulumi.StringPtrOutput)
}

// The priority level of the event.
func (o ContactPointPushoverOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContactPointPushover) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// How often, in seconds, the Pushover servers will send the same notification to the user.
func (o ContactPointPushoverOutput) Retry() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContactPointPushover) *int { return v.Retry }).(pulumi.IntPtrOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointPushoverOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointPushover) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// The sound associated with the notification.
func (o ContactPointPushoverOutput) Sound() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointPushover) *string { return v.Sound }).(pulumi.StringPtrOutput)
}

// The UID of the contact point.
func (o ContactPointPushoverOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointPushover) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// The Pushover user key.
func (o ContactPointPushoverOutput) UserKey() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointPushover) string { return v.UserKey }).(pulumi.StringOutput)
}

type ContactPointPushoverArrayOutput struct{ *pulumi.OutputState }

func (ContactPointPushoverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointPushover)(nil)).Elem()
}

func (o ContactPointPushoverArrayOutput) ToContactPointPushoverArrayOutput() ContactPointPushoverArrayOutput {
	return o
}

func (o ContactPointPushoverArrayOutput) ToContactPointPushoverArrayOutputWithContext(ctx context.Context) ContactPointPushoverArrayOutput {
	return o
}

func (o ContactPointPushoverArrayOutput) Index(i pulumi.IntInput) ContactPointPushoverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointPushover {
		return vs[0].([]ContactPointPushover)[vs[1].(int)]
	}).(ContactPointPushoverOutput)
}

type ContactPointSensugo struct {
	// The SensuGo API key.
	ApiKey string `pulumi:"apiKey"`
	// The SensuGo check to which the event should be routed.
	Check *string `pulumi:"check"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The entity being monitored.
	Entity *string `pulumi:"entity"`
	// A custom handler to execute in addition to the check.
	Handler *string `pulumi:"handler"`
	// Templated message content describing the alert.
	Message *string `pulumi:"message"`
	// The namespace in which the check resides.
	Namespace *string `pulumi:"namespace"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// The SensuGo URL to send requests to.
	Url string `pulumi:"url"`
}

// ContactPointSensugoInput is an input type that accepts ContactPointSensugoArgs and ContactPointSensugoOutput values.
// You can construct a concrete instance of `ContactPointSensugoInput` via:
//
//	ContactPointSensugoArgs{...}
type ContactPointSensugoInput interface {
	pulumi.Input

	ToContactPointSensugoOutput() ContactPointSensugoOutput
	ToContactPointSensugoOutputWithContext(context.Context) ContactPointSensugoOutput
}

type ContactPointSensugoArgs struct {
	// The SensuGo API key.
	ApiKey pulumi.StringInput `pulumi:"apiKey"`
	// The SensuGo check to which the event should be routed.
	Check pulumi.StringPtrInput `pulumi:"check"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// The entity being monitored.
	Entity pulumi.StringPtrInput `pulumi:"entity"`
	// A custom handler to execute in addition to the check.
	Handler pulumi.StringPtrInput `pulumi:"handler"`
	// Templated message content describing the alert.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The namespace in which the check resides.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// The SensuGo URL to send requests to.
	Url pulumi.StringInput `pulumi:"url"`
}

func (ContactPointSensugoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointSensugo)(nil)).Elem()
}

func (i ContactPointSensugoArgs) ToContactPointSensugoOutput() ContactPointSensugoOutput {
	return i.ToContactPointSensugoOutputWithContext(context.Background())
}

func (i ContactPointSensugoArgs) ToContactPointSensugoOutputWithContext(ctx context.Context) ContactPointSensugoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointSensugoOutput)
}

// ContactPointSensugoArrayInput is an input type that accepts ContactPointSensugoArray and ContactPointSensugoArrayOutput values.
// You can construct a concrete instance of `ContactPointSensugoArrayInput` via:
//
//	ContactPointSensugoArray{ ContactPointSensugoArgs{...} }
type ContactPointSensugoArrayInput interface {
	pulumi.Input

	ToContactPointSensugoArrayOutput() ContactPointSensugoArrayOutput
	ToContactPointSensugoArrayOutputWithContext(context.Context) ContactPointSensugoArrayOutput
}

type ContactPointSensugoArray []ContactPointSensugoInput

func (ContactPointSensugoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointSensugo)(nil)).Elem()
}

func (i ContactPointSensugoArray) ToContactPointSensugoArrayOutput() ContactPointSensugoArrayOutput {
	return i.ToContactPointSensugoArrayOutputWithContext(context.Background())
}

func (i ContactPointSensugoArray) ToContactPointSensugoArrayOutputWithContext(ctx context.Context) ContactPointSensugoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointSensugoArrayOutput)
}

type ContactPointSensugoOutput struct{ *pulumi.OutputState }

func (ContactPointSensugoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointSensugo)(nil)).Elem()
}

func (o ContactPointSensugoOutput) ToContactPointSensugoOutput() ContactPointSensugoOutput {
	return o
}

func (o ContactPointSensugoOutput) ToContactPointSensugoOutputWithContext(ctx context.Context) ContactPointSensugoOutput {
	return o
}

// The SensuGo API key.
func (o ContactPointSensugoOutput) ApiKey() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointSensugo) string { return v.ApiKey }).(pulumi.StringOutput)
}

// The SensuGo check to which the event should be routed.
func (o ContactPointSensugoOutput) Check() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSensugo) *string { return v.Check }).(pulumi.StringPtrOutput)
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointSensugoOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointSensugo) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// The entity being monitored.
func (o ContactPointSensugoOutput) Entity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSensugo) *string { return v.Entity }).(pulumi.StringPtrOutput)
}

// A custom handler to execute in addition to the check.
func (o ContactPointSensugoOutput) Handler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSensugo) *string { return v.Handler }).(pulumi.StringPtrOutput)
}

// Templated message content describing the alert.
func (o ContactPointSensugoOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSensugo) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The namespace in which the check resides.
func (o ContactPointSensugoOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSensugo) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointSensugoOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointSensugo) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// The UID of the contact point.
func (o ContactPointSensugoOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSensugo) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// The SensuGo URL to send requests to.
func (o ContactPointSensugoOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointSensugo) string { return v.Url }).(pulumi.StringOutput)
}

type ContactPointSensugoArrayOutput struct{ *pulumi.OutputState }

func (ContactPointSensugoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointSensugo)(nil)).Elem()
}

func (o ContactPointSensugoArrayOutput) ToContactPointSensugoArrayOutput() ContactPointSensugoArrayOutput {
	return o
}

func (o ContactPointSensugoArrayOutput) ToContactPointSensugoArrayOutputWithContext(ctx context.Context) ContactPointSensugoArrayOutput {
	return o
}

func (o ContactPointSensugoArrayOutput) Index(i pulumi.IntInput) ContactPointSensugoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointSensugo {
		return vs[0].([]ContactPointSensugo)[vs[1].(int)]
	}).(ContactPointSensugoOutput)
}

type ContactPointSlack struct {
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// Use this to override the Slack API endpoint URL to send requests to.
	EndpointUrl *string `pulumi:"endpointUrl"`
	// The name of a Slack workspace emoji to use as the bot icon.
	IconEmoji *string `pulumi:"iconEmoji"`
	// A URL of an image to use as the bot icon.
	IconUrl *string `pulumi:"iconUrl"`
	// Describes how to ping the slack channel that messages are being sent to. Options are `here` for an @here ping, `channel` for @channel, or empty for no ping.
	MentionChannel *string `pulumi:"mentionChannel"`
	// Comma-separated list of groups to mention in the message.
	MentionGroups *string `pulumi:"mentionGroups"`
	// Comma-separated list of users to mention in the message.
	MentionUsers *string `pulumi:"mentionUsers"`
	// Channel, private group, or IM channel (can be an encoded ID or a name) to send messages to.
	Recipient *string `pulumi:"recipient"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// Templated content of the message.
	Text *string `pulumi:"text"`
	// Templated title of the message.
	Title *string `pulumi:"title"`
	// A Slack API token,for sending messages directly without the webhook method.
	Token *string `pulumi:"token"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// A Slack webhook URL,for sending messages via the webhook method.
	Url *string `pulumi:"url"`
	// Username for the bot to use.
	Username *string `pulumi:"username"`
}

// ContactPointSlackInput is an input type that accepts ContactPointSlackArgs and ContactPointSlackOutput values.
// You can construct a concrete instance of `ContactPointSlackInput` via:
//
//	ContactPointSlackArgs{...}
type ContactPointSlackInput interface {
	pulumi.Input

	ToContactPointSlackOutput() ContactPointSlackOutput
	ToContactPointSlackOutputWithContext(context.Context) ContactPointSlackOutput
}

type ContactPointSlackArgs struct {
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// Use this to override the Slack API endpoint URL to send requests to.
	EndpointUrl pulumi.StringPtrInput `pulumi:"endpointUrl"`
	// The name of a Slack workspace emoji to use as the bot icon.
	IconEmoji pulumi.StringPtrInput `pulumi:"iconEmoji"`
	// A URL of an image to use as the bot icon.
	IconUrl pulumi.StringPtrInput `pulumi:"iconUrl"`
	// Describes how to ping the slack channel that messages are being sent to. Options are `here` for an @here ping, `channel` for @channel, or empty for no ping.
	MentionChannel pulumi.StringPtrInput `pulumi:"mentionChannel"`
	// Comma-separated list of groups to mention in the message.
	MentionGroups pulumi.StringPtrInput `pulumi:"mentionGroups"`
	// Comma-separated list of users to mention in the message.
	MentionUsers pulumi.StringPtrInput `pulumi:"mentionUsers"`
	// Channel, private group, or IM channel (can be an encoded ID or a name) to send messages to.
	Recipient pulumi.StringPtrInput `pulumi:"recipient"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// Templated content of the message.
	Text pulumi.StringPtrInput `pulumi:"text"`
	// Templated title of the message.
	Title pulumi.StringPtrInput `pulumi:"title"`
	// A Slack API token,for sending messages directly without the webhook method.
	Token pulumi.StringPtrInput `pulumi:"token"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// A Slack webhook URL,for sending messages via the webhook method.
	Url pulumi.StringPtrInput `pulumi:"url"`
	// Username for the bot to use.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ContactPointSlackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointSlack)(nil)).Elem()
}

func (i ContactPointSlackArgs) ToContactPointSlackOutput() ContactPointSlackOutput {
	return i.ToContactPointSlackOutputWithContext(context.Background())
}

func (i ContactPointSlackArgs) ToContactPointSlackOutputWithContext(ctx context.Context) ContactPointSlackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointSlackOutput)
}

// ContactPointSlackArrayInput is an input type that accepts ContactPointSlackArray and ContactPointSlackArrayOutput values.
// You can construct a concrete instance of `ContactPointSlackArrayInput` via:
//
//	ContactPointSlackArray{ ContactPointSlackArgs{...} }
type ContactPointSlackArrayInput interface {
	pulumi.Input

	ToContactPointSlackArrayOutput() ContactPointSlackArrayOutput
	ToContactPointSlackArrayOutputWithContext(context.Context) ContactPointSlackArrayOutput
}

type ContactPointSlackArray []ContactPointSlackInput

func (ContactPointSlackArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointSlack)(nil)).Elem()
}

func (i ContactPointSlackArray) ToContactPointSlackArrayOutput() ContactPointSlackArrayOutput {
	return i.ToContactPointSlackArrayOutputWithContext(context.Background())
}

func (i ContactPointSlackArray) ToContactPointSlackArrayOutputWithContext(ctx context.Context) ContactPointSlackArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointSlackArrayOutput)
}

type ContactPointSlackOutput struct{ *pulumi.OutputState }

func (ContactPointSlackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointSlack)(nil)).Elem()
}

func (o ContactPointSlackOutput) ToContactPointSlackOutput() ContactPointSlackOutput {
	return o
}

func (o ContactPointSlackOutput) ToContactPointSlackOutputWithContext(ctx context.Context) ContactPointSlackOutput {
	return o
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointSlackOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointSlack) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// Use this to override the Slack API endpoint URL to send requests to.
func (o ContactPointSlackOutput) EndpointUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSlack) *string { return v.EndpointUrl }).(pulumi.StringPtrOutput)
}

// The name of a Slack workspace emoji to use as the bot icon.
func (o ContactPointSlackOutput) IconEmoji() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSlack) *string { return v.IconEmoji }).(pulumi.StringPtrOutput)
}

// A URL of an image to use as the bot icon.
func (o ContactPointSlackOutput) IconUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSlack) *string { return v.IconUrl }).(pulumi.StringPtrOutput)
}

// Describes how to ping the slack channel that messages are being sent to. Options are `here` for an @here ping, `channel` for @channel, or empty for no ping.
func (o ContactPointSlackOutput) MentionChannel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSlack) *string { return v.MentionChannel }).(pulumi.StringPtrOutput)
}

// Comma-separated list of groups to mention in the message.
func (o ContactPointSlackOutput) MentionGroups() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSlack) *string { return v.MentionGroups }).(pulumi.StringPtrOutput)
}

// Comma-separated list of users to mention in the message.
func (o ContactPointSlackOutput) MentionUsers() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSlack) *string { return v.MentionUsers }).(pulumi.StringPtrOutput)
}

// Channel, private group, or IM channel (can be an encoded ID or a name) to send messages to.
func (o ContactPointSlackOutput) Recipient() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSlack) *string { return v.Recipient }).(pulumi.StringPtrOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointSlackOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointSlack) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// Templated content of the message.
func (o ContactPointSlackOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSlack) *string { return v.Text }).(pulumi.StringPtrOutput)
}

// Templated title of the message.
func (o ContactPointSlackOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSlack) *string { return v.Title }).(pulumi.StringPtrOutput)
}

// A Slack API token,for sending messages directly without the webhook method.
func (o ContactPointSlackOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSlack) *string { return v.Token }).(pulumi.StringPtrOutput)
}

// The UID of the contact point.
func (o ContactPointSlackOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSlack) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// A Slack webhook URL,for sending messages via the webhook method.
func (o ContactPointSlackOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSlack) *string { return v.Url }).(pulumi.StringPtrOutput)
}

// Username for the bot to use.
func (o ContactPointSlackOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSlack) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ContactPointSlackArrayOutput struct{ *pulumi.OutputState }

func (ContactPointSlackArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointSlack)(nil)).Elem()
}

func (o ContactPointSlackArrayOutput) ToContactPointSlackArrayOutput() ContactPointSlackArrayOutput {
	return o
}

func (o ContactPointSlackArrayOutput) ToContactPointSlackArrayOutputWithContext(ctx context.Context) ContactPointSlackArrayOutput {
	return o
}

func (o ContactPointSlackArrayOutput) Index(i pulumi.IntInput) ContactPointSlackOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointSlack {
		return vs[0].([]ContactPointSlack)[vs[1].(int)]
	}).(ContactPointSlackOutput)
}

type ContactPointTeam struct {
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The templated message content to send.
	Message *string `pulumi:"message"`
	// The templated subtitle for each message section.
	SectionTitle *string `pulumi:"sectionTitle"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The templated title of the message.
	Title *string `pulumi:"title"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// A Teams webhook URL.
	Url string `pulumi:"url"`
}

// ContactPointTeamInput is an input type that accepts ContactPointTeamArgs and ContactPointTeamOutput values.
// You can construct a concrete instance of `ContactPointTeamInput` via:
//
//	ContactPointTeamArgs{...}
type ContactPointTeamInput interface {
	pulumi.Input

	ToContactPointTeamOutput() ContactPointTeamOutput
	ToContactPointTeamOutputWithContext(context.Context) ContactPointTeamOutput
}

type ContactPointTeamArgs struct {
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// The templated message content to send.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The templated subtitle for each message section.
	SectionTitle pulumi.StringPtrInput `pulumi:"sectionTitle"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// The templated title of the message.
	Title pulumi.StringPtrInput `pulumi:"title"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// A Teams webhook URL.
	Url pulumi.StringInput `pulumi:"url"`
}

func (ContactPointTeamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointTeam)(nil)).Elem()
}

func (i ContactPointTeamArgs) ToContactPointTeamOutput() ContactPointTeamOutput {
	return i.ToContactPointTeamOutputWithContext(context.Background())
}

func (i ContactPointTeamArgs) ToContactPointTeamOutputWithContext(ctx context.Context) ContactPointTeamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointTeamOutput)
}

// ContactPointTeamArrayInput is an input type that accepts ContactPointTeamArray and ContactPointTeamArrayOutput values.
// You can construct a concrete instance of `ContactPointTeamArrayInput` via:
//
//	ContactPointTeamArray{ ContactPointTeamArgs{...} }
type ContactPointTeamArrayInput interface {
	pulumi.Input

	ToContactPointTeamArrayOutput() ContactPointTeamArrayOutput
	ToContactPointTeamArrayOutputWithContext(context.Context) ContactPointTeamArrayOutput
}

type ContactPointTeamArray []ContactPointTeamInput

func (ContactPointTeamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointTeam)(nil)).Elem()
}

func (i ContactPointTeamArray) ToContactPointTeamArrayOutput() ContactPointTeamArrayOutput {
	return i.ToContactPointTeamArrayOutputWithContext(context.Background())
}

func (i ContactPointTeamArray) ToContactPointTeamArrayOutputWithContext(ctx context.Context) ContactPointTeamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointTeamArrayOutput)
}

type ContactPointTeamOutput struct{ *pulumi.OutputState }

func (ContactPointTeamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointTeam)(nil)).Elem()
}

func (o ContactPointTeamOutput) ToContactPointTeamOutput() ContactPointTeamOutput {
	return o
}

func (o ContactPointTeamOutput) ToContactPointTeamOutputWithContext(ctx context.Context) ContactPointTeamOutput {
	return o
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointTeamOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointTeam) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// The templated message content to send.
func (o ContactPointTeamOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointTeam) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The templated subtitle for each message section.
func (o ContactPointTeamOutput) SectionTitle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointTeam) *string { return v.SectionTitle }).(pulumi.StringPtrOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointTeamOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointTeam) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// The templated title of the message.
func (o ContactPointTeamOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointTeam) *string { return v.Title }).(pulumi.StringPtrOutput)
}

// The UID of the contact point.
func (o ContactPointTeamOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointTeam) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// A Teams webhook URL.
func (o ContactPointTeamOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointTeam) string { return v.Url }).(pulumi.StringOutput)
}

type ContactPointTeamArrayOutput struct{ *pulumi.OutputState }

func (ContactPointTeamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointTeam)(nil)).Elem()
}

func (o ContactPointTeamArrayOutput) ToContactPointTeamArrayOutput() ContactPointTeamArrayOutput {
	return o
}

func (o ContactPointTeamArrayOutput) ToContactPointTeamArrayOutputWithContext(ctx context.Context) ContactPointTeamArrayOutput {
	return o
}

func (o ContactPointTeamArrayOutput) Index(i pulumi.IntInput) ContactPointTeamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointTeam {
		return vs[0].([]ContactPointTeam)[vs[1].(int)]
	}).(ContactPointTeamOutput)
}

type ContactPointTelegram struct {
	// The chat ID to send messages to.
	ChatId string `pulumi:"chatId"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The templated content of the message.
	Message *string `pulumi:"message"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The Telegram bot token.
	Token string `pulumi:"token"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
}

// ContactPointTelegramInput is an input type that accepts ContactPointTelegramArgs and ContactPointTelegramOutput values.
// You can construct a concrete instance of `ContactPointTelegramInput` via:
//
//	ContactPointTelegramArgs{...}
type ContactPointTelegramInput interface {
	pulumi.Input

	ToContactPointTelegramOutput() ContactPointTelegramOutput
	ToContactPointTelegramOutputWithContext(context.Context) ContactPointTelegramOutput
}

type ContactPointTelegramArgs struct {
	// The chat ID to send messages to.
	ChatId pulumi.StringInput `pulumi:"chatId"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// The templated content of the message.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// The Telegram bot token.
	Token pulumi.StringInput `pulumi:"token"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (ContactPointTelegramArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointTelegram)(nil)).Elem()
}

func (i ContactPointTelegramArgs) ToContactPointTelegramOutput() ContactPointTelegramOutput {
	return i.ToContactPointTelegramOutputWithContext(context.Background())
}

func (i ContactPointTelegramArgs) ToContactPointTelegramOutputWithContext(ctx context.Context) ContactPointTelegramOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointTelegramOutput)
}

// ContactPointTelegramArrayInput is an input type that accepts ContactPointTelegramArray and ContactPointTelegramArrayOutput values.
// You can construct a concrete instance of `ContactPointTelegramArrayInput` via:
//
//	ContactPointTelegramArray{ ContactPointTelegramArgs{...} }
type ContactPointTelegramArrayInput interface {
	pulumi.Input

	ToContactPointTelegramArrayOutput() ContactPointTelegramArrayOutput
	ToContactPointTelegramArrayOutputWithContext(context.Context) ContactPointTelegramArrayOutput
}

type ContactPointTelegramArray []ContactPointTelegramInput

func (ContactPointTelegramArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointTelegram)(nil)).Elem()
}

func (i ContactPointTelegramArray) ToContactPointTelegramArrayOutput() ContactPointTelegramArrayOutput {
	return i.ToContactPointTelegramArrayOutputWithContext(context.Background())
}

func (i ContactPointTelegramArray) ToContactPointTelegramArrayOutputWithContext(ctx context.Context) ContactPointTelegramArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointTelegramArrayOutput)
}

type ContactPointTelegramOutput struct{ *pulumi.OutputState }

func (ContactPointTelegramOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointTelegram)(nil)).Elem()
}

func (o ContactPointTelegramOutput) ToContactPointTelegramOutput() ContactPointTelegramOutput {
	return o
}

func (o ContactPointTelegramOutput) ToContactPointTelegramOutputWithContext(ctx context.Context) ContactPointTelegramOutput {
	return o
}

// The chat ID to send messages to.
func (o ContactPointTelegramOutput) ChatId() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointTelegram) string { return v.ChatId }).(pulumi.StringOutput)
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointTelegramOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointTelegram) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// The templated content of the message.
func (o ContactPointTelegramOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointTelegram) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointTelegramOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointTelegram) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// The Telegram bot token.
func (o ContactPointTelegramOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointTelegram) string { return v.Token }).(pulumi.StringOutput)
}

// The UID of the contact point.
func (o ContactPointTelegramOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointTelegram) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type ContactPointTelegramArrayOutput struct{ *pulumi.OutputState }

func (ContactPointTelegramArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointTelegram)(nil)).Elem()
}

func (o ContactPointTelegramArrayOutput) ToContactPointTelegramArrayOutput() ContactPointTelegramArrayOutput {
	return o
}

func (o ContactPointTelegramArrayOutput) ToContactPointTelegramArrayOutputWithContext(ctx context.Context) ContactPointTelegramArrayOutput {
	return o
}

func (o ContactPointTelegramArrayOutput) Index(i pulumi.IntInput) ContactPointTelegramOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointTelegram {
		return vs[0].([]ContactPointTelegram)[vs[1].(int)]
	}).(ContactPointTelegramOutput)
}

type ContactPointThreema struct {
	// The Threema API key.
	ApiSecret string `pulumi:"apiSecret"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The Threema gateway ID.
	GatewayId string `pulumi:"gatewayId"`
	// The ID of the recipient of the message.
	RecipientId string `pulumi:"recipientId"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
}

// ContactPointThreemaInput is an input type that accepts ContactPointThreemaArgs and ContactPointThreemaOutput values.
// You can construct a concrete instance of `ContactPointThreemaInput` via:
//
//	ContactPointThreemaArgs{...}
type ContactPointThreemaInput interface {
	pulumi.Input

	ToContactPointThreemaOutput() ContactPointThreemaOutput
	ToContactPointThreemaOutputWithContext(context.Context) ContactPointThreemaOutput
}

type ContactPointThreemaArgs struct {
	// The Threema API key.
	ApiSecret pulumi.StringInput `pulumi:"apiSecret"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// The Threema gateway ID.
	GatewayId pulumi.StringInput `pulumi:"gatewayId"`
	// The ID of the recipient of the message.
	RecipientId pulumi.StringInput `pulumi:"recipientId"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (ContactPointThreemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointThreema)(nil)).Elem()
}

func (i ContactPointThreemaArgs) ToContactPointThreemaOutput() ContactPointThreemaOutput {
	return i.ToContactPointThreemaOutputWithContext(context.Background())
}

func (i ContactPointThreemaArgs) ToContactPointThreemaOutputWithContext(ctx context.Context) ContactPointThreemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointThreemaOutput)
}

// ContactPointThreemaArrayInput is an input type that accepts ContactPointThreemaArray and ContactPointThreemaArrayOutput values.
// You can construct a concrete instance of `ContactPointThreemaArrayInput` via:
//
//	ContactPointThreemaArray{ ContactPointThreemaArgs{...} }
type ContactPointThreemaArrayInput interface {
	pulumi.Input

	ToContactPointThreemaArrayOutput() ContactPointThreemaArrayOutput
	ToContactPointThreemaArrayOutputWithContext(context.Context) ContactPointThreemaArrayOutput
}

type ContactPointThreemaArray []ContactPointThreemaInput

func (ContactPointThreemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointThreema)(nil)).Elem()
}

func (i ContactPointThreemaArray) ToContactPointThreemaArrayOutput() ContactPointThreemaArrayOutput {
	return i.ToContactPointThreemaArrayOutputWithContext(context.Background())
}

func (i ContactPointThreemaArray) ToContactPointThreemaArrayOutputWithContext(ctx context.Context) ContactPointThreemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointThreemaArrayOutput)
}

type ContactPointThreemaOutput struct{ *pulumi.OutputState }

func (ContactPointThreemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointThreema)(nil)).Elem()
}

func (o ContactPointThreemaOutput) ToContactPointThreemaOutput() ContactPointThreemaOutput {
	return o
}

func (o ContactPointThreemaOutput) ToContactPointThreemaOutputWithContext(ctx context.Context) ContactPointThreemaOutput {
	return o
}

// The Threema API key.
func (o ContactPointThreemaOutput) ApiSecret() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointThreema) string { return v.ApiSecret }).(pulumi.StringOutput)
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointThreemaOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointThreema) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// The Threema gateway ID.
func (o ContactPointThreemaOutput) GatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointThreema) string { return v.GatewayId }).(pulumi.StringOutput)
}

// The ID of the recipient of the message.
func (o ContactPointThreemaOutput) RecipientId() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointThreema) string { return v.RecipientId }).(pulumi.StringOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointThreemaOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointThreema) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// The UID of the contact point.
func (o ContactPointThreemaOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointThreema) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type ContactPointThreemaArrayOutput struct{ *pulumi.OutputState }

func (ContactPointThreemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointThreema)(nil)).Elem()
}

func (o ContactPointThreemaArrayOutput) ToContactPointThreemaArrayOutput() ContactPointThreemaArrayOutput {
	return o
}

func (o ContactPointThreemaArrayOutput) ToContactPointThreemaArrayOutputWithContext(ctx context.Context) ContactPointThreemaArrayOutput {
	return o
}

func (o ContactPointThreemaArrayOutput) Index(i pulumi.IntInput) ContactPointThreemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointThreema {
		return vs[0].([]ContactPointThreema)[vs[1].(int)]
	}).(ContactPointThreemaOutput)
}

type ContactPointVictorop struct {
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The VictorOps alert state - typically either `CRITICAL` or `RECOVERY`.
	MessageType *string `pulumi:"messageType"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// The VictorOps webhook URL.
	Url string `pulumi:"url"`
}

// ContactPointVictoropInput is an input type that accepts ContactPointVictoropArgs and ContactPointVictoropOutput values.
// You can construct a concrete instance of `ContactPointVictoropInput` via:
//
//	ContactPointVictoropArgs{...}
type ContactPointVictoropInput interface {
	pulumi.Input

	ToContactPointVictoropOutput() ContactPointVictoropOutput
	ToContactPointVictoropOutputWithContext(context.Context) ContactPointVictoropOutput
}

type ContactPointVictoropArgs struct {
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// The VictorOps alert state - typically either `CRITICAL` or `RECOVERY`.
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// The VictorOps webhook URL.
	Url pulumi.StringInput `pulumi:"url"`
}

func (ContactPointVictoropArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointVictorop)(nil)).Elem()
}

func (i ContactPointVictoropArgs) ToContactPointVictoropOutput() ContactPointVictoropOutput {
	return i.ToContactPointVictoropOutputWithContext(context.Background())
}

func (i ContactPointVictoropArgs) ToContactPointVictoropOutputWithContext(ctx context.Context) ContactPointVictoropOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointVictoropOutput)
}

// ContactPointVictoropArrayInput is an input type that accepts ContactPointVictoropArray and ContactPointVictoropArrayOutput values.
// You can construct a concrete instance of `ContactPointVictoropArrayInput` via:
//
//	ContactPointVictoropArray{ ContactPointVictoropArgs{...} }
type ContactPointVictoropArrayInput interface {
	pulumi.Input

	ToContactPointVictoropArrayOutput() ContactPointVictoropArrayOutput
	ToContactPointVictoropArrayOutputWithContext(context.Context) ContactPointVictoropArrayOutput
}

type ContactPointVictoropArray []ContactPointVictoropInput

func (ContactPointVictoropArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointVictorop)(nil)).Elem()
}

func (i ContactPointVictoropArray) ToContactPointVictoropArrayOutput() ContactPointVictoropArrayOutput {
	return i.ToContactPointVictoropArrayOutputWithContext(context.Background())
}

func (i ContactPointVictoropArray) ToContactPointVictoropArrayOutputWithContext(ctx context.Context) ContactPointVictoropArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointVictoropArrayOutput)
}

type ContactPointVictoropOutput struct{ *pulumi.OutputState }

func (ContactPointVictoropOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointVictorop)(nil)).Elem()
}

func (o ContactPointVictoropOutput) ToContactPointVictoropOutput() ContactPointVictoropOutput {
	return o
}

func (o ContactPointVictoropOutput) ToContactPointVictoropOutputWithContext(ctx context.Context) ContactPointVictoropOutput {
	return o
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointVictoropOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointVictorop) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// The VictorOps alert state - typically either `CRITICAL` or `RECOVERY`.
func (o ContactPointVictoropOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointVictorop) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointVictoropOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointVictorop) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// The UID of the contact point.
func (o ContactPointVictoropOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointVictorop) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// The VictorOps webhook URL.
func (o ContactPointVictoropOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointVictorop) string { return v.Url }).(pulumi.StringOutput)
}

type ContactPointVictoropArrayOutput struct{ *pulumi.OutputState }

func (ContactPointVictoropArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointVictorop)(nil)).Elem()
}

func (o ContactPointVictoropArrayOutput) ToContactPointVictoropArrayOutput() ContactPointVictoropArrayOutput {
	return o
}

func (o ContactPointVictoropArrayOutput) ToContactPointVictoropArrayOutputWithContext(ctx context.Context) ContactPointVictoropArrayOutput {
	return o
}

func (o ContactPointVictoropArrayOutput) Index(i pulumi.IntInput) ContactPointVictoropOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointVictorop {
		return vs[0].([]ContactPointVictorop)[vs[1].(int)]
	}).(ContactPointVictoropOutput)
}

type ContactPointWebhook struct {
	// Allows a custom authorization scheme - attaches an auth header with this value. Do not use in conjunction with basic auth parameters.
	AuthorizationCredentials *string `pulumi:"authorizationCredentials"`
	// Allows a custom authorization scheme - attaches an auth header with this name. Do not use in conjunction with basic auth parameters.
	AuthorizationScheme *string `pulumi:"authorizationScheme"`
	// The username to use in basic auth headers attached to the request. If omitted, basic auth will not be used.
	BasicAuthPassword *string `pulumi:"basicAuthPassword"`
	// The username to use in basic auth headers attached to the request. If omitted, basic auth will not be used.
	BasicAuthUser *string `pulumi:"basicAuthUser"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The HTTP method to use in the request. Defaults to `POST`.
	HttpMethod *string `pulumi:"httpMethod"`
	// The maximum number of alerts to send in a single request. This can be helpful in limiting the size of the request body. The default is 0, which indicates no limit.
	MaxAlerts *int `pulumi:"maxAlerts"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// The URL to send webhook requests to.
	Url string `pulumi:"url"`
}

// ContactPointWebhookInput is an input type that accepts ContactPointWebhookArgs and ContactPointWebhookOutput values.
// You can construct a concrete instance of `ContactPointWebhookInput` via:
//
//	ContactPointWebhookArgs{...}
type ContactPointWebhookInput interface {
	pulumi.Input

	ToContactPointWebhookOutput() ContactPointWebhookOutput
	ToContactPointWebhookOutputWithContext(context.Context) ContactPointWebhookOutput
}

type ContactPointWebhookArgs struct {
	// Allows a custom authorization scheme - attaches an auth header with this value. Do not use in conjunction with basic auth parameters.
	AuthorizationCredentials pulumi.StringPtrInput `pulumi:"authorizationCredentials"`
	// Allows a custom authorization scheme - attaches an auth header with this name. Do not use in conjunction with basic auth parameters.
	AuthorizationScheme pulumi.StringPtrInput `pulumi:"authorizationScheme"`
	// The username to use in basic auth headers attached to the request. If omitted, basic auth will not be used.
	BasicAuthPassword pulumi.StringPtrInput `pulumi:"basicAuthPassword"`
	// The username to use in basic auth headers attached to the request. If omitted, basic auth will not be used.
	BasicAuthUser pulumi.StringPtrInput `pulumi:"basicAuthUser"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// The HTTP method to use in the request. Defaults to `POST`.
	HttpMethod pulumi.StringPtrInput `pulumi:"httpMethod"`
	// The maximum number of alerts to send in a single request. This can be helpful in limiting the size of the request body. The default is 0, which indicates no limit.
	MaxAlerts pulumi.IntPtrInput `pulumi:"maxAlerts"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// The URL to send webhook requests to.
	Url pulumi.StringInput `pulumi:"url"`
}

func (ContactPointWebhookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointWebhook)(nil)).Elem()
}

func (i ContactPointWebhookArgs) ToContactPointWebhookOutput() ContactPointWebhookOutput {
	return i.ToContactPointWebhookOutputWithContext(context.Background())
}

func (i ContactPointWebhookArgs) ToContactPointWebhookOutputWithContext(ctx context.Context) ContactPointWebhookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointWebhookOutput)
}

// ContactPointWebhookArrayInput is an input type that accepts ContactPointWebhookArray and ContactPointWebhookArrayOutput values.
// You can construct a concrete instance of `ContactPointWebhookArrayInput` via:
//
//	ContactPointWebhookArray{ ContactPointWebhookArgs{...} }
type ContactPointWebhookArrayInput interface {
	pulumi.Input

	ToContactPointWebhookArrayOutput() ContactPointWebhookArrayOutput
	ToContactPointWebhookArrayOutputWithContext(context.Context) ContactPointWebhookArrayOutput
}

type ContactPointWebhookArray []ContactPointWebhookInput

func (ContactPointWebhookArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointWebhook)(nil)).Elem()
}

func (i ContactPointWebhookArray) ToContactPointWebhookArrayOutput() ContactPointWebhookArrayOutput {
	return i.ToContactPointWebhookArrayOutputWithContext(context.Background())
}

func (i ContactPointWebhookArray) ToContactPointWebhookArrayOutputWithContext(ctx context.Context) ContactPointWebhookArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointWebhookArrayOutput)
}

type ContactPointWebhookOutput struct{ *pulumi.OutputState }

func (ContactPointWebhookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointWebhook)(nil)).Elem()
}

func (o ContactPointWebhookOutput) ToContactPointWebhookOutput() ContactPointWebhookOutput {
	return o
}

func (o ContactPointWebhookOutput) ToContactPointWebhookOutputWithContext(ctx context.Context) ContactPointWebhookOutput {
	return o
}

// Allows a custom authorization scheme - attaches an auth header with this value. Do not use in conjunction with basic auth parameters.
func (o ContactPointWebhookOutput) AuthorizationCredentials() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWebhook) *string { return v.AuthorizationCredentials }).(pulumi.StringPtrOutput)
}

// Allows a custom authorization scheme - attaches an auth header with this name. Do not use in conjunction with basic auth parameters.
func (o ContactPointWebhookOutput) AuthorizationScheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWebhook) *string { return v.AuthorizationScheme }).(pulumi.StringPtrOutput)
}

// The username to use in basic auth headers attached to the request. If omitted, basic auth will not be used.
func (o ContactPointWebhookOutput) BasicAuthPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWebhook) *string { return v.BasicAuthPassword }).(pulumi.StringPtrOutput)
}

// The username to use in basic auth headers attached to the request. If omitted, basic auth will not be used.
func (o ContactPointWebhookOutput) BasicAuthUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWebhook) *string { return v.BasicAuthUser }).(pulumi.StringPtrOutput)
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointWebhookOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointWebhook) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// The HTTP method to use in the request. Defaults to `POST`.
func (o ContactPointWebhookOutput) HttpMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWebhook) *string { return v.HttpMethod }).(pulumi.StringPtrOutput)
}

// The maximum number of alerts to send in a single request. This can be helpful in limiting the size of the request body. The default is 0, which indicates no limit.
func (o ContactPointWebhookOutput) MaxAlerts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContactPointWebhook) *int { return v.MaxAlerts }).(pulumi.IntPtrOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointWebhookOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointWebhook) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// The UID of the contact point.
func (o ContactPointWebhookOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWebhook) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// The URL to send webhook requests to.
func (o ContactPointWebhookOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointWebhook) string { return v.Url }).(pulumi.StringOutput)
}

type ContactPointWebhookArrayOutput struct{ *pulumi.OutputState }

func (ContactPointWebhookArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointWebhook)(nil)).Elem()
}

func (o ContactPointWebhookArrayOutput) ToContactPointWebhookArrayOutput() ContactPointWebhookArrayOutput {
	return o
}

func (o ContactPointWebhookArrayOutput) ToContactPointWebhookArrayOutputWithContext(ctx context.Context) ContactPointWebhookArrayOutput {
	return o
}

func (o ContactPointWebhookArrayOutput) Index(i pulumi.IntInput) ContactPointWebhookOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointWebhook {
		return vs[0].([]ContactPointWebhook)[vs[1].(int)]
	}).(ContactPointWebhookOutput)
}

type ContactPointWecom struct {
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The templated content of the message to send.
	Message *string `pulumi:"message"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The templated title of the message to send.
	Title *string `pulumi:"title"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// The WeCom webhook URL.
	Url string `pulumi:"url"`
}

// ContactPointWecomInput is an input type that accepts ContactPointWecomArgs and ContactPointWecomOutput values.
// You can construct a concrete instance of `ContactPointWecomInput` via:
//
//	ContactPointWecomArgs{...}
type ContactPointWecomInput interface {
	pulumi.Input

	ToContactPointWecomOutput() ContactPointWecomOutput
	ToContactPointWecomOutputWithContext(context.Context) ContactPointWecomOutput
}

type ContactPointWecomArgs struct {
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// The templated content of the message to send.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// The templated title of the message to send.
	Title pulumi.StringPtrInput `pulumi:"title"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// The WeCom webhook URL.
	Url pulumi.StringInput `pulumi:"url"`
}

func (ContactPointWecomArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointWecom)(nil)).Elem()
}

func (i ContactPointWecomArgs) ToContactPointWecomOutput() ContactPointWecomOutput {
	return i.ToContactPointWecomOutputWithContext(context.Background())
}

func (i ContactPointWecomArgs) ToContactPointWecomOutputWithContext(ctx context.Context) ContactPointWecomOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointWecomOutput)
}

// ContactPointWecomArrayInput is an input type that accepts ContactPointWecomArray and ContactPointWecomArrayOutput values.
// You can construct a concrete instance of `ContactPointWecomArrayInput` via:
//
//	ContactPointWecomArray{ ContactPointWecomArgs{...} }
type ContactPointWecomArrayInput interface {
	pulumi.Input

	ToContactPointWecomArrayOutput() ContactPointWecomArrayOutput
	ToContactPointWecomArrayOutputWithContext(context.Context) ContactPointWecomArrayOutput
}

type ContactPointWecomArray []ContactPointWecomInput

func (ContactPointWecomArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointWecom)(nil)).Elem()
}

func (i ContactPointWecomArray) ToContactPointWecomArrayOutput() ContactPointWecomArrayOutput {
	return i.ToContactPointWecomArrayOutputWithContext(context.Background())
}

func (i ContactPointWecomArray) ToContactPointWecomArrayOutputWithContext(ctx context.Context) ContactPointWecomArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointWecomArrayOutput)
}

type ContactPointWecomOutput struct{ *pulumi.OutputState }

func (ContactPointWecomOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointWecom)(nil)).Elem()
}

func (o ContactPointWecomOutput) ToContactPointWecomOutput() ContactPointWecomOutput {
	return o
}

func (o ContactPointWecomOutput) ToContactPointWecomOutputWithContext(ctx context.Context) ContactPointWecomOutput {
	return o
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointWecomOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointWecom) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// The templated content of the message to send.
func (o ContactPointWecomOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWecom) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointWecomOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointWecom) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// The templated title of the message to send.
func (o ContactPointWecomOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWecom) *string { return v.Title }).(pulumi.StringPtrOutput)
}

// The UID of the contact point.
func (o ContactPointWecomOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWecom) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// The WeCom webhook URL.
func (o ContactPointWecomOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointWecom) string { return v.Url }).(pulumi.StringOutput)
}

type ContactPointWecomArrayOutput struct{ *pulumi.OutputState }

func (ContactPointWecomArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointWecom)(nil)).Elem()
}

func (o ContactPointWecomArrayOutput) ToContactPointWecomArrayOutput() ContactPointWecomArrayOutput {
	return o
}

func (o ContactPointWecomArrayOutput) ToContactPointWecomArrayOutputWithContext(ctx context.Context) ContactPointWecomArrayOutput {
	return o
}

func (o ContactPointWecomArrayOutput) Index(i pulumi.IntInput) ContactPointWecomOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointWecom {
		return vs[0].([]ContactPointWecom)[vs[1].(int)]
	}).(ContactPointWecomOutput)
}

type DashboardPermissionPermission struct {
	// Permission to associate with item. Must be one of `View`, `Edit`, or `Admin`.
	Permission string `pulumi:"permission"`
	// Manage permissions for `Viewer` or `Editor` roles.
	Role *string `pulumi:"role"`
	// ID of the team to manage permissions for. Defaults to `0`.
	TeamId *int `pulumi:"teamId"`
	// ID of the user to manage permissions for. Defaults to `0`.
	UserId *int `pulumi:"userId"`
}

// DashboardPermissionPermissionInput is an input type that accepts DashboardPermissionPermissionArgs and DashboardPermissionPermissionOutput values.
// You can construct a concrete instance of `DashboardPermissionPermissionInput` via:
//
//	DashboardPermissionPermissionArgs{...}
type DashboardPermissionPermissionInput interface {
	pulumi.Input

	ToDashboardPermissionPermissionOutput() DashboardPermissionPermissionOutput
	ToDashboardPermissionPermissionOutputWithContext(context.Context) DashboardPermissionPermissionOutput
}

type DashboardPermissionPermissionArgs struct {
	// Permission to associate with item. Must be one of `View`, `Edit`, or `Admin`.
	Permission pulumi.StringInput `pulumi:"permission"`
	// Manage permissions for `Viewer` or `Editor` roles.
	Role pulumi.StringPtrInput `pulumi:"role"`
	// ID of the team to manage permissions for. Defaults to `0`.
	TeamId pulumi.IntPtrInput `pulumi:"teamId"`
	// ID of the user to manage permissions for. Defaults to `0`.
	UserId pulumi.IntPtrInput `pulumi:"userId"`
}

func (DashboardPermissionPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardPermissionPermission)(nil)).Elem()
}

func (i DashboardPermissionPermissionArgs) ToDashboardPermissionPermissionOutput() DashboardPermissionPermissionOutput {
	return i.ToDashboardPermissionPermissionOutputWithContext(context.Background())
}

func (i DashboardPermissionPermissionArgs) ToDashboardPermissionPermissionOutputWithContext(ctx context.Context) DashboardPermissionPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardPermissionPermissionOutput)
}

// DashboardPermissionPermissionArrayInput is an input type that accepts DashboardPermissionPermissionArray and DashboardPermissionPermissionArrayOutput values.
// You can construct a concrete instance of `DashboardPermissionPermissionArrayInput` via:
//
//	DashboardPermissionPermissionArray{ DashboardPermissionPermissionArgs{...} }
type DashboardPermissionPermissionArrayInput interface {
	pulumi.Input

	ToDashboardPermissionPermissionArrayOutput() DashboardPermissionPermissionArrayOutput
	ToDashboardPermissionPermissionArrayOutputWithContext(context.Context) DashboardPermissionPermissionArrayOutput
}

type DashboardPermissionPermissionArray []DashboardPermissionPermissionInput

func (DashboardPermissionPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardPermissionPermission)(nil)).Elem()
}

func (i DashboardPermissionPermissionArray) ToDashboardPermissionPermissionArrayOutput() DashboardPermissionPermissionArrayOutput {
	return i.ToDashboardPermissionPermissionArrayOutputWithContext(context.Background())
}

func (i DashboardPermissionPermissionArray) ToDashboardPermissionPermissionArrayOutputWithContext(ctx context.Context) DashboardPermissionPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardPermissionPermissionArrayOutput)
}

type DashboardPermissionPermissionOutput struct{ *pulumi.OutputState }

func (DashboardPermissionPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardPermissionPermission)(nil)).Elem()
}

func (o DashboardPermissionPermissionOutput) ToDashboardPermissionPermissionOutput() DashboardPermissionPermissionOutput {
	return o
}

func (o DashboardPermissionPermissionOutput) ToDashboardPermissionPermissionOutputWithContext(ctx context.Context) DashboardPermissionPermissionOutput {
	return o
}

// Permission to associate with item. Must be one of `View`, `Edit`, or `Admin`.
func (o DashboardPermissionPermissionOutput) Permission() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardPermissionPermission) string { return v.Permission }).(pulumi.StringOutput)
}

// Manage permissions for `Viewer` or `Editor` roles.
func (o DashboardPermissionPermissionOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardPermissionPermission) *string { return v.Role }).(pulumi.StringPtrOutput)
}

// ID of the team to manage permissions for. Defaults to `0`.
func (o DashboardPermissionPermissionOutput) TeamId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardPermissionPermission) *int { return v.TeamId }).(pulumi.IntPtrOutput)
}

// ID of the user to manage permissions for. Defaults to `0`.
func (o DashboardPermissionPermissionOutput) UserId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardPermissionPermission) *int { return v.UserId }).(pulumi.IntPtrOutput)
}

type DashboardPermissionPermissionArrayOutput struct{ *pulumi.OutputState }

func (DashboardPermissionPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardPermissionPermission)(nil)).Elem()
}

func (o DashboardPermissionPermissionArrayOutput) ToDashboardPermissionPermissionArrayOutput() DashboardPermissionPermissionArrayOutput {
	return o
}

func (o DashboardPermissionPermissionArrayOutput) ToDashboardPermissionPermissionArrayOutputWithContext(ctx context.Context) DashboardPermissionPermissionArrayOutput {
	return o
}

func (o DashboardPermissionPermissionArrayOutput) Index(i pulumi.IntInput) DashboardPermissionPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardPermissionPermission {
		return vs[0].([]DashboardPermissionPermission)[vs[1].(int)]
	}).(DashboardPermissionPermissionOutput)
}

type DataSourceJsonData struct {
	// (Prometheus) The name of the Alertmanager datasource to manage alerts via UI
	AlertmanagerUid *string `pulumi:"alertmanagerUid"`
	// (CloudWatch, Athena) The ARN of the role to be assumed by Grafana when using the CloudWatch or Athena data source.
	AssumeRoleArn *string `pulumi:"assumeRoleArn"`
	// (CloudWatch, Athena) The authentication type used to access the data source.
	AuthType *string `pulumi:"authType"`
	// (Stackdriver) The authentication type: `jwt` or `gce`.
	AuthenticationType *string `pulumi:"authenticationType"`
	// (Athena) Athena catalog.
	Catalog *string `pulumi:"catalog"`
	// (Stackdriver) Service account email address.
	ClientEmail *string `pulumi:"clientEmail"`
	// (Azure Monitor) The service account client id.
	ClientId *string `pulumi:"clientId"`
	// (Azure Monitor) The cloud name.
	CloudName *string `pulumi:"cloudName"`
	// (MySQL, PostgreSQL, and MSSQL) Maximum amount of time in seconds a connection may be reused (Grafana v5.4+).
	ConnMaxLifetime *int `pulumi:"connMaxLifetime"`
	// (CloudWatch) A comma-separated list of custom namespaces to be queried by the CloudWatch data source.
	CustomMetricsNamespaces *string `pulumi:"customMetricsNamespaces"`
	// (Athena) Name of the database within the catalog.
	Database *string `pulumi:"database"`
	// (InfluxDB) The default bucket for the data source.
	DefaultBucket *string `pulumi:"defaultBucket"`
	// (Stackdriver) The default project for the data source.
	DefaultProject *string `pulumi:"defaultProject"`
	// (CloudWatch, Athena) The default region for the data source.
	DefaultRegion *string `pulumi:"defaultRegion"`
	// (Loki) See https://grafana.com/docs/grafana/latest/datasources/loki/#derived-fields
	DerivedFields []DataSourceJsonDataDerivedField `pulumi:"derivedFields"`
	// (MSSQL) Connection SSL encryption handling: 'disable', 'false' or 'true'.
	Encrypt *string `pulumi:"encrypt"`
	// (Elasticsearch) Elasticsearch semantic version (Grafana v8.0+).
	EsVersion *string `pulumi:"esVersion"`
	// (CloudWatch, Athena) If you are assuming a role in another account, that has been created with an external ID, specify the external ID here.
	ExternalId *string `pulumi:"externalId"`
	// (Github) Github URL
	GithubUrl *string `pulumi:"githubUrl"`
	// (Graphite) Graphite version.
	GraphiteVersion *string `pulumi:"graphiteVersion"`
	// (Prometheus) HTTP method to use for making requests.
	HttpMethod *string `pulumi:"httpMethod"`
	// (Alertmanager) Implementation of Alertmanager. Either 'cortex' or 'prometheus'
	Implementation *string `pulumi:"implementation"`
	// (Elasticsearch) Index date time format. nil(No Pattern), 'Hourly', 'Daily', 'Weekly', 'Monthly' or 'Yearly'.
	Interval *string `pulumi:"interval"`
	// (Elasticsearch) Which field should be used to indicate the priority of the log message.
	LogLevelField *string `pulumi:"logLevelField"`
	// (Elasticsearch) Which field should be used as the log message.
	LogMessageField *string `pulumi:"logMessageField"`
	// (Prometheus) Manage alerts.
	ManageAlerts *bool `pulumi:"manageAlerts"`
	// (Elasticsearch) Maximum number of concurrent shard requests.
	MaxConcurrentShardRequests *int `pulumi:"maxConcurrentShardRequests"`
	// (MySQL, PostgreSQL and MSSQL) Maximum number of connections in the idle connection pool (Grafana v5.4+).
	MaxIdleConns *int `pulumi:"maxIdleConns"`
	// (Loki) Upper limit for the number of log lines returned by Loki
	MaxLines *int `pulumi:"maxLines"`
	// (MySQL, PostgreSQL and MSSQL) Maximum number of open connections to the database (Grafana v5.4+).
	MaxOpenConns *int `pulumi:"maxOpenConns"`
	// (Sentry) Organization slug.
	OrgSlug *string `pulumi:"orgSlug"`
	// (InfluxDB) An organization is a workspace for a group of users. All dashboards, tasks, buckets, members, etc., belong to an organization.
	Organization *string `pulumi:"organization"`
	// (Athena) AWS S3 bucket to store execution outputs. If not specified, the default query result location from the Workgroup configuration will be used.
	OutputLocation *string `pulumi:"outputLocation"`
	// (PostgreSQL) Postgres version as a number (903/904/905/906/1000) meaning v9.3, v9.4, etc.
	PostgresVersion *int `pulumi:"postgresVersion"`
	// (CloudWatch, Athena) The credentials profile name to use when authentication type is set as 'Credentials file'.
	Profile *string `pulumi:"profile"`
	// (Prometheus) Timeout for queries made to the Prometheus data source in seconds.
	QueryTimeout *string `pulumi:"queryTimeout"`
	// (Elasticsearch and Prometheus) Specifies the ARN of an IAM role to assume.
	Sigv4AssumeRoleArn *string `pulumi:"sigv4AssumeRoleArn"`
	// (Elasticsearch and Prometheus) Enable usage of SigV4.
	Sigv4Auth *bool `pulumi:"sigv4Auth"`
	// (Elasticsearch and Prometheus) The Sigv4 authentication provider to use: 'default', 'credentials' or 'keys' (AMG: 'workspace-iam-role').
	Sigv4AuthType *string `pulumi:"sigv4AuthType"`
	// (Elasticsearch and Prometheus) When assuming a role in another account use this external ID.
	Sigv4ExternalId *string `pulumi:"sigv4ExternalId"`
	// (Elasticsearch and Prometheus) Credentials profile name, leave blank for default.
	Sigv4Profile *string `pulumi:"sigv4Profile"`
	// (Elasticsearch and Prometheus) AWS region to use for Sigv4.
	Sigv4Region *string `pulumi:"sigv4Region"`
	// (PostgreSQL) SSLmode. 'disable', 'require', 'verify-ca' or 'verify-full'.
	SslMode *string `pulumi:"sslMode"`
	// (Azure Monitor) The subscription id
	SubscriptionId *string `pulumi:"subscriptionId"`
	// (Azure Monitor) Service account tenant ID.
	TenantId *string `pulumi:"tenantId"`
	// (Elasticsearch) Which field that should be used as timestamp.
	TimeField *string `pulumi:"timeField"`
	// (Prometheus, Elasticsearch, InfluxDB, MySQL, PostgreSQL, and MSSQL) Lowest interval/step value that should be used for this data source. Sometimes called "Scrape Interval" in the Grafana UI.
	TimeInterval *string `pulumi:"timeInterval"`
	// (PostgreSQL) Enable usage of TimescaleDB extension.
	Timescaledb *bool `pulumi:"timescaledb"`
	// (All) Enable TLS authentication using client cert configured in secure json data.
	TlsAuth *bool `pulumi:"tlsAuth"`
	// (All) Enable TLS authentication using CA cert.
	TlsAuthWithCaCert *bool `pulumi:"tlsAuthWithCaCert"`
	// (All) SSL Certificate configuration, either by ‘file-path’ or ‘file-content’.
	TlsConfigurationMethod *string `pulumi:"tlsConfigurationMethod"`
	// (All) Controls whether a client verifies the server’s certificate chain and host name.
	TlsSkipVerify *bool `pulumi:"tlsSkipVerify"`
	// (Stackdriver) The token URI used, provided in the service account key.
	TokenUri *string `pulumi:"tokenUri"`
	// (Cloudwatch) The X-Ray datasource uid to associate to this Cloudwatch datasource.
	TracingDatasourceUid *string `pulumi:"tracingDatasourceUid"`
	// (OpenTSDB) Resolution.
	TsdbResolution *int `pulumi:"tsdbResolution"`
	// (OpenTSDB) Version.
	TsdbVersion *int `pulumi:"tsdbVersion"`
	// (InfluxDB) InfluxQL or Flux.
	Version *string `pulumi:"version"`
	// (Athena) Workgroup to use.
	Workgroup *string `pulumi:"workgroup"`
	// (Elasticsearch) Enable X-Pack support.
	XpackEnabled *bool `pulumi:"xpackEnabled"`
}

// DataSourceJsonDataInput is an input type that accepts DataSourceJsonDataArgs and DataSourceJsonDataOutput values.
// You can construct a concrete instance of `DataSourceJsonDataInput` via:
//
//	DataSourceJsonDataArgs{...}
type DataSourceJsonDataInput interface {
	pulumi.Input

	ToDataSourceJsonDataOutput() DataSourceJsonDataOutput
	ToDataSourceJsonDataOutputWithContext(context.Context) DataSourceJsonDataOutput
}

type DataSourceJsonDataArgs struct {
	// (Prometheus) The name of the Alertmanager datasource to manage alerts via UI
	AlertmanagerUid pulumi.StringPtrInput `pulumi:"alertmanagerUid"`
	// (CloudWatch, Athena) The ARN of the role to be assumed by Grafana when using the CloudWatch or Athena data source.
	AssumeRoleArn pulumi.StringPtrInput `pulumi:"assumeRoleArn"`
	// (CloudWatch, Athena) The authentication type used to access the data source.
	AuthType pulumi.StringPtrInput `pulumi:"authType"`
	// (Stackdriver) The authentication type: `jwt` or `gce`.
	AuthenticationType pulumi.StringPtrInput `pulumi:"authenticationType"`
	// (Athena) Athena catalog.
	Catalog pulumi.StringPtrInput `pulumi:"catalog"`
	// (Stackdriver) Service account email address.
	ClientEmail pulumi.StringPtrInput `pulumi:"clientEmail"`
	// (Azure Monitor) The service account client id.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// (Azure Monitor) The cloud name.
	CloudName pulumi.StringPtrInput `pulumi:"cloudName"`
	// (MySQL, PostgreSQL, and MSSQL) Maximum amount of time in seconds a connection may be reused (Grafana v5.4+).
	ConnMaxLifetime pulumi.IntPtrInput `pulumi:"connMaxLifetime"`
	// (CloudWatch) A comma-separated list of custom namespaces to be queried by the CloudWatch data source.
	CustomMetricsNamespaces pulumi.StringPtrInput `pulumi:"customMetricsNamespaces"`
	// (Athena) Name of the database within the catalog.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// (InfluxDB) The default bucket for the data source.
	DefaultBucket pulumi.StringPtrInput `pulumi:"defaultBucket"`
	// (Stackdriver) The default project for the data source.
	DefaultProject pulumi.StringPtrInput `pulumi:"defaultProject"`
	// (CloudWatch, Athena) The default region for the data source.
	DefaultRegion pulumi.StringPtrInput `pulumi:"defaultRegion"`
	// (Loki) See https://grafana.com/docs/grafana/latest/datasources/loki/#derived-fields
	DerivedFields DataSourceJsonDataDerivedFieldArrayInput `pulumi:"derivedFields"`
	// (MSSQL) Connection SSL encryption handling: 'disable', 'false' or 'true'.
	Encrypt pulumi.StringPtrInput `pulumi:"encrypt"`
	// (Elasticsearch) Elasticsearch semantic version (Grafana v8.0+).
	EsVersion pulumi.StringPtrInput `pulumi:"esVersion"`
	// (CloudWatch, Athena) If you are assuming a role in another account, that has been created with an external ID, specify the external ID here.
	ExternalId pulumi.StringPtrInput `pulumi:"externalId"`
	// (Github) Github URL
	GithubUrl pulumi.StringPtrInput `pulumi:"githubUrl"`
	// (Graphite) Graphite version.
	GraphiteVersion pulumi.StringPtrInput `pulumi:"graphiteVersion"`
	// (Prometheus) HTTP method to use for making requests.
	HttpMethod pulumi.StringPtrInput `pulumi:"httpMethod"`
	// (Alertmanager) Implementation of Alertmanager. Either 'cortex' or 'prometheus'
	Implementation pulumi.StringPtrInput `pulumi:"implementation"`
	// (Elasticsearch) Index date time format. nil(No Pattern), 'Hourly', 'Daily', 'Weekly', 'Monthly' or 'Yearly'.
	Interval pulumi.StringPtrInput `pulumi:"interval"`
	// (Elasticsearch) Which field should be used to indicate the priority of the log message.
	LogLevelField pulumi.StringPtrInput `pulumi:"logLevelField"`
	// (Elasticsearch) Which field should be used as the log message.
	LogMessageField pulumi.StringPtrInput `pulumi:"logMessageField"`
	// (Prometheus) Manage alerts.
	ManageAlerts pulumi.BoolPtrInput `pulumi:"manageAlerts"`
	// (Elasticsearch) Maximum number of concurrent shard requests.
	MaxConcurrentShardRequests pulumi.IntPtrInput `pulumi:"maxConcurrentShardRequests"`
	// (MySQL, PostgreSQL and MSSQL) Maximum number of connections in the idle connection pool (Grafana v5.4+).
	MaxIdleConns pulumi.IntPtrInput `pulumi:"maxIdleConns"`
	// (Loki) Upper limit for the number of log lines returned by Loki
	MaxLines pulumi.IntPtrInput `pulumi:"maxLines"`
	// (MySQL, PostgreSQL and MSSQL) Maximum number of open connections to the database (Grafana v5.4+).
	MaxOpenConns pulumi.IntPtrInput `pulumi:"maxOpenConns"`
	// (Sentry) Organization slug.
	OrgSlug pulumi.StringPtrInput `pulumi:"orgSlug"`
	// (InfluxDB) An organization is a workspace for a group of users. All dashboards, tasks, buckets, members, etc., belong to an organization.
	Organization pulumi.StringPtrInput `pulumi:"organization"`
	// (Athena) AWS S3 bucket to store execution outputs. If not specified, the default query result location from the Workgroup configuration will be used.
	OutputLocation pulumi.StringPtrInput `pulumi:"outputLocation"`
	// (PostgreSQL) Postgres version as a number (903/904/905/906/1000) meaning v9.3, v9.4, etc.
	PostgresVersion pulumi.IntPtrInput `pulumi:"postgresVersion"`
	// (CloudWatch, Athena) The credentials profile name to use when authentication type is set as 'Credentials file'.
	Profile pulumi.StringPtrInput `pulumi:"profile"`
	// (Prometheus) Timeout for queries made to the Prometheus data source in seconds.
	QueryTimeout pulumi.StringPtrInput `pulumi:"queryTimeout"`
	// (Elasticsearch and Prometheus) Specifies the ARN of an IAM role to assume.
	Sigv4AssumeRoleArn pulumi.StringPtrInput `pulumi:"sigv4AssumeRoleArn"`
	// (Elasticsearch and Prometheus) Enable usage of SigV4.
	Sigv4Auth pulumi.BoolPtrInput `pulumi:"sigv4Auth"`
	// (Elasticsearch and Prometheus) The Sigv4 authentication provider to use: 'default', 'credentials' or 'keys' (AMG: 'workspace-iam-role').
	Sigv4AuthType pulumi.StringPtrInput `pulumi:"sigv4AuthType"`
	// (Elasticsearch and Prometheus) When assuming a role in another account use this external ID.
	Sigv4ExternalId pulumi.StringPtrInput `pulumi:"sigv4ExternalId"`
	// (Elasticsearch and Prometheus) Credentials profile name, leave blank for default.
	Sigv4Profile pulumi.StringPtrInput `pulumi:"sigv4Profile"`
	// (Elasticsearch and Prometheus) AWS region to use for Sigv4.
	Sigv4Region pulumi.StringPtrInput `pulumi:"sigv4Region"`
	// (PostgreSQL) SSLmode. 'disable', 'require', 'verify-ca' or 'verify-full'.
	SslMode pulumi.StringPtrInput `pulumi:"sslMode"`
	// (Azure Monitor) The subscription id
	SubscriptionId pulumi.StringPtrInput `pulumi:"subscriptionId"`
	// (Azure Monitor) Service account tenant ID.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
	// (Elasticsearch) Which field that should be used as timestamp.
	TimeField pulumi.StringPtrInput `pulumi:"timeField"`
	// (Prometheus, Elasticsearch, InfluxDB, MySQL, PostgreSQL, and MSSQL) Lowest interval/step value that should be used for this data source. Sometimes called "Scrape Interval" in the Grafana UI.
	TimeInterval pulumi.StringPtrInput `pulumi:"timeInterval"`
	// (PostgreSQL) Enable usage of TimescaleDB extension.
	Timescaledb pulumi.BoolPtrInput `pulumi:"timescaledb"`
	// (All) Enable TLS authentication using client cert configured in secure json data.
	TlsAuth pulumi.BoolPtrInput `pulumi:"tlsAuth"`
	// (All) Enable TLS authentication using CA cert.
	TlsAuthWithCaCert pulumi.BoolPtrInput `pulumi:"tlsAuthWithCaCert"`
	// (All) SSL Certificate configuration, either by ‘file-path’ or ‘file-content’.
	TlsConfigurationMethod pulumi.StringPtrInput `pulumi:"tlsConfigurationMethod"`
	// (All) Controls whether a client verifies the server’s certificate chain and host name.
	TlsSkipVerify pulumi.BoolPtrInput `pulumi:"tlsSkipVerify"`
	// (Stackdriver) The token URI used, provided in the service account key.
	TokenUri pulumi.StringPtrInput `pulumi:"tokenUri"`
	// (Cloudwatch) The X-Ray datasource uid to associate to this Cloudwatch datasource.
	TracingDatasourceUid pulumi.StringPtrInput `pulumi:"tracingDatasourceUid"`
	// (OpenTSDB) Resolution.
	TsdbResolution pulumi.IntPtrInput `pulumi:"tsdbResolution"`
	// (OpenTSDB) Version.
	TsdbVersion pulumi.IntPtrInput `pulumi:"tsdbVersion"`
	// (InfluxDB) InfluxQL or Flux.
	Version pulumi.StringPtrInput `pulumi:"version"`
	// (Athena) Workgroup to use.
	Workgroup pulumi.StringPtrInput `pulumi:"workgroup"`
	// (Elasticsearch) Enable X-Pack support.
	XpackEnabled pulumi.BoolPtrInput `pulumi:"xpackEnabled"`
}

func (DataSourceJsonDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceJsonData)(nil)).Elem()
}

func (i DataSourceJsonDataArgs) ToDataSourceJsonDataOutput() DataSourceJsonDataOutput {
	return i.ToDataSourceJsonDataOutputWithContext(context.Background())
}

func (i DataSourceJsonDataArgs) ToDataSourceJsonDataOutputWithContext(ctx context.Context) DataSourceJsonDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceJsonDataOutput)
}

// DataSourceJsonDataArrayInput is an input type that accepts DataSourceJsonDataArray and DataSourceJsonDataArrayOutput values.
// You can construct a concrete instance of `DataSourceJsonDataArrayInput` via:
//
//	DataSourceJsonDataArray{ DataSourceJsonDataArgs{...} }
type DataSourceJsonDataArrayInput interface {
	pulumi.Input

	ToDataSourceJsonDataArrayOutput() DataSourceJsonDataArrayOutput
	ToDataSourceJsonDataArrayOutputWithContext(context.Context) DataSourceJsonDataArrayOutput
}

type DataSourceJsonDataArray []DataSourceJsonDataInput

func (DataSourceJsonDataArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSourceJsonData)(nil)).Elem()
}

func (i DataSourceJsonDataArray) ToDataSourceJsonDataArrayOutput() DataSourceJsonDataArrayOutput {
	return i.ToDataSourceJsonDataArrayOutputWithContext(context.Background())
}

func (i DataSourceJsonDataArray) ToDataSourceJsonDataArrayOutputWithContext(ctx context.Context) DataSourceJsonDataArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceJsonDataArrayOutput)
}

type DataSourceJsonDataOutput struct{ *pulumi.OutputState }

func (DataSourceJsonDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceJsonData)(nil)).Elem()
}

func (o DataSourceJsonDataOutput) ToDataSourceJsonDataOutput() DataSourceJsonDataOutput {
	return o
}

func (o DataSourceJsonDataOutput) ToDataSourceJsonDataOutputWithContext(ctx context.Context) DataSourceJsonDataOutput {
	return o
}

// (Prometheus) The name of the Alertmanager datasource to manage alerts via UI
func (o DataSourceJsonDataOutput) AlertmanagerUid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *string { return v.AlertmanagerUid }).(pulumi.StringPtrOutput)
}

// (CloudWatch, Athena) The ARN of the role to be assumed by Grafana when using the CloudWatch or Athena data source.
func (o DataSourceJsonDataOutput) AssumeRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *string { return v.AssumeRoleArn }).(pulumi.StringPtrOutput)
}

// (CloudWatch, Athena) The authentication type used to access the data source.
func (o DataSourceJsonDataOutput) AuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *string { return v.AuthType }).(pulumi.StringPtrOutput)
}

// (Stackdriver) The authentication type: `jwt` or `gce`.
func (o DataSourceJsonDataOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// (Athena) Athena catalog.
func (o DataSourceJsonDataOutput) Catalog() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *string { return v.Catalog }).(pulumi.StringPtrOutput)
}

// (Stackdriver) Service account email address.
func (o DataSourceJsonDataOutput) ClientEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *string { return v.ClientEmail }).(pulumi.StringPtrOutput)
}

// (Azure Monitor) The service account client id.
func (o DataSourceJsonDataOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// (Azure Monitor) The cloud name.
func (o DataSourceJsonDataOutput) CloudName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *string { return v.CloudName }).(pulumi.StringPtrOutput)
}

// (MySQL, PostgreSQL, and MSSQL) Maximum amount of time in seconds a connection may be reused (Grafana v5.4+).
func (o DataSourceJsonDataOutput) ConnMaxLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *int { return v.ConnMaxLifetime }).(pulumi.IntPtrOutput)
}

// (CloudWatch) A comma-separated list of custom namespaces to be queried by the CloudWatch data source.
func (o DataSourceJsonDataOutput) CustomMetricsNamespaces() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *string { return v.CustomMetricsNamespaces }).(pulumi.StringPtrOutput)
}

// (Athena) Name of the database within the catalog.
func (o DataSourceJsonDataOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// (InfluxDB) The default bucket for the data source.
func (o DataSourceJsonDataOutput) DefaultBucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *string { return v.DefaultBucket }).(pulumi.StringPtrOutput)
}

// (Stackdriver) The default project for the data source.
func (o DataSourceJsonDataOutput) DefaultProject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *string { return v.DefaultProject }).(pulumi.StringPtrOutput)
}

// (CloudWatch, Athena) The default region for the data source.
func (o DataSourceJsonDataOutput) DefaultRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *string { return v.DefaultRegion }).(pulumi.StringPtrOutput)
}

// (Loki) See https://grafana.com/docs/grafana/latest/datasources/loki/#derived-fields
func (o DataSourceJsonDataOutput) DerivedFields() DataSourceJsonDataDerivedFieldArrayOutput {
	return o.ApplyT(func(v DataSourceJsonData) []DataSourceJsonDataDerivedField { return v.DerivedFields }).(DataSourceJsonDataDerivedFieldArrayOutput)
}

// (MSSQL) Connection SSL encryption handling: 'disable', 'false' or 'true'.
func (o DataSourceJsonDataOutput) Encrypt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *string { return v.Encrypt }).(pulumi.StringPtrOutput)
}

// (Elasticsearch) Elasticsearch semantic version (Grafana v8.0+).
func (o DataSourceJsonDataOutput) EsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *string { return v.EsVersion }).(pulumi.StringPtrOutput)
}

// (CloudWatch, Athena) If you are assuming a role in another account, that has been created with an external ID, specify the external ID here.
func (o DataSourceJsonDataOutput) ExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *string { return v.ExternalId }).(pulumi.StringPtrOutput)
}

// (Github) Github URL
func (o DataSourceJsonDataOutput) GithubUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *string { return v.GithubUrl }).(pulumi.StringPtrOutput)
}

// (Graphite) Graphite version.
func (o DataSourceJsonDataOutput) GraphiteVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *string { return v.GraphiteVersion }).(pulumi.StringPtrOutput)
}

// (Prometheus) HTTP method to use for making requests.
func (o DataSourceJsonDataOutput) HttpMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *string { return v.HttpMethod }).(pulumi.StringPtrOutput)
}

// (Alertmanager) Implementation of Alertmanager. Either 'cortex' or 'prometheus'
func (o DataSourceJsonDataOutput) Implementation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *string { return v.Implementation }).(pulumi.StringPtrOutput)
}

// (Elasticsearch) Index date time format. nil(No Pattern), 'Hourly', 'Daily', 'Weekly', 'Monthly' or 'Yearly'.
func (o DataSourceJsonDataOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

// (Elasticsearch) Which field should be used to indicate the priority of the log message.
func (o DataSourceJsonDataOutput) LogLevelField() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *string { return v.LogLevelField }).(pulumi.StringPtrOutput)
}

// (Elasticsearch) Which field should be used as the log message.
func (o DataSourceJsonDataOutput) LogMessageField() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *string { return v.LogMessageField }).(pulumi.StringPtrOutput)
}

// (Prometheus) Manage alerts.
func (o DataSourceJsonDataOutput) ManageAlerts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *bool { return v.ManageAlerts }).(pulumi.BoolPtrOutput)
}

// (Elasticsearch) Maximum number of concurrent shard requests.
func (o DataSourceJsonDataOutput) MaxConcurrentShardRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *int { return v.MaxConcurrentShardRequests }).(pulumi.IntPtrOutput)
}

// (MySQL, PostgreSQL and MSSQL) Maximum number of connections in the idle connection pool (Grafana v5.4+).
func (o DataSourceJsonDataOutput) MaxIdleConns() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *int { return v.MaxIdleConns }).(pulumi.IntPtrOutput)
}

// (Loki) Upper limit for the number of log lines returned by Loki
func (o DataSourceJsonDataOutput) MaxLines() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *int { return v.MaxLines }).(pulumi.IntPtrOutput)
}

// (MySQL, PostgreSQL and MSSQL) Maximum number of open connections to the database (Grafana v5.4+).
func (o DataSourceJsonDataOutput) MaxOpenConns() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *int { return v.MaxOpenConns }).(pulumi.IntPtrOutput)
}

// (Sentry) Organization slug.
func (o DataSourceJsonDataOutput) OrgSlug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *string { return v.OrgSlug }).(pulumi.StringPtrOutput)
}

// (InfluxDB) An organization is a workspace for a group of users. All dashboards, tasks, buckets, members, etc., belong to an organization.
func (o DataSourceJsonDataOutput) Organization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *string { return v.Organization }).(pulumi.StringPtrOutput)
}

// (Athena) AWS S3 bucket to store execution outputs. If not specified, the default query result location from the Workgroup configuration will be used.
func (o DataSourceJsonDataOutput) OutputLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *string { return v.OutputLocation }).(pulumi.StringPtrOutput)
}

// (PostgreSQL) Postgres version as a number (903/904/905/906/1000) meaning v9.3, v9.4, etc.
func (o DataSourceJsonDataOutput) PostgresVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *int { return v.PostgresVersion }).(pulumi.IntPtrOutput)
}

// (CloudWatch, Athena) The credentials profile name to use when authentication type is set as 'Credentials file'.
func (o DataSourceJsonDataOutput) Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *string { return v.Profile }).(pulumi.StringPtrOutput)
}

// (Prometheus) Timeout for queries made to the Prometheus data source in seconds.
func (o DataSourceJsonDataOutput) QueryTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *string { return v.QueryTimeout }).(pulumi.StringPtrOutput)
}

// (Elasticsearch and Prometheus) Specifies the ARN of an IAM role to assume.
func (o DataSourceJsonDataOutput) Sigv4AssumeRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *string { return v.Sigv4AssumeRoleArn }).(pulumi.StringPtrOutput)
}

// (Elasticsearch and Prometheus) Enable usage of SigV4.
func (o DataSourceJsonDataOutput) Sigv4Auth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *bool { return v.Sigv4Auth }).(pulumi.BoolPtrOutput)
}

// (Elasticsearch and Prometheus) The Sigv4 authentication provider to use: 'default', 'credentials' or 'keys' (AMG: 'workspace-iam-role').
func (o DataSourceJsonDataOutput) Sigv4AuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *string { return v.Sigv4AuthType }).(pulumi.StringPtrOutput)
}

// (Elasticsearch and Prometheus) When assuming a role in another account use this external ID.
func (o DataSourceJsonDataOutput) Sigv4ExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *string { return v.Sigv4ExternalId }).(pulumi.StringPtrOutput)
}

// (Elasticsearch and Prometheus) Credentials profile name, leave blank for default.
func (o DataSourceJsonDataOutput) Sigv4Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *string { return v.Sigv4Profile }).(pulumi.StringPtrOutput)
}

// (Elasticsearch and Prometheus) AWS region to use for Sigv4.
func (o DataSourceJsonDataOutput) Sigv4Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *string { return v.Sigv4Region }).(pulumi.StringPtrOutput)
}

// (PostgreSQL) SSLmode. 'disable', 'require', 'verify-ca' or 'verify-full'.
func (o DataSourceJsonDataOutput) SslMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *string { return v.SslMode }).(pulumi.StringPtrOutput)
}

// (Azure Monitor) The subscription id
func (o DataSourceJsonDataOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *string { return v.SubscriptionId }).(pulumi.StringPtrOutput)
}

// (Azure Monitor) Service account tenant ID.
func (o DataSourceJsonDataOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// (Elasticsearch) Which field that should be used as timestamp.
func (o DataSourceJsonDataOutput) TimeField() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *string { return v.TimeField }).(pulumi.StringPtrOutput)
}

// (Prometheus, Elasticsearch, InfluxDB, MySQL, PostgreSQL, and MSSQL) Lowest interval/step value that should be used for this data source. Sometimes called "Scrape Interval" in the Grafana UI.
func (o DataSourceJsonDataOutput) TimeInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *string { return v.TimeInterval }).(pulumi.StringPtrOutput)
}

// (PostgreSQL) Enable usage of TimescaleDB extension.
func (o DataSourceJsonDataOutput) Timescaledb() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *bool { return v.Timescaledb }).(pulumi.BoolPtrOutput)
}

// (All) Enable TLS authentication using client cert configured in secure json data.
func (o DataSourceJsonDataOutput) TlsAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *bool { return v.TlsAuth }).(pulumi.BoolPtrOutput)
}

// (All) Enable TLS authentication using CA cert.
func (o DataSourceJsonDataOutput) TlsAuthWithCaCert() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *bool { return v.TlsAuthWithCaCert }).(pulumi.BoolPtrOutput)
}

// (All) SSL Certificate configuration, either by ‘file-path’ or ‘file-content’.
func (o DataSourceJsonDataOutput) TlsConfigurationMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *string { return v.TlsConfigurationMethod }).(pulumi.StringPtrOutput)
}

// (All) Controls whether a client verifies the server’s certificate chain and host name.
func (o DataSourceJsonDataOutput) TlsSkipVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *bool { return v.TlsSkipVerify }).(pulumi.BoolPtrOutput)
}

// (Stackdriver) The token URI used, provided in the service account key.
func (o DataSourceJsonDataOutput) TokenUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *string { return v.TokenUri }).(pulumi.StringPtrOutput)
}

// (Cloudwatch) The X-Ray datasource uid to associate to this Cloudwatch datasource.
func (o DataSourceJsonDataOutput) TracingDatasourceUid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *string { return v.TracingDatasourceUid }).(pulumi.StringPtrOutput)
}

// (OpenTSDB) Resolution.
func (o DataSourceJsonDataOutput) TsdbResolution() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *int { return v.TsdbResolution }).(pulumi.IntPtrOutput)
}

// (OpenTSDB) Version.
func (o DataSourceJsonDataOutput) TsdbVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *int { return v.TsdbVersion }).(pulumi.IntPtrOutput)
}

// (InfluxDB) InfluxQL or Flux.
func (o DataSourceJsonDataOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *string { return v.Version }).(pulumi.StringPtrOutput)
}

// (Athena) Workgroup to use.
func (o DataSourceJsonDataOutput) Workgroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *string { return v.Workgroup }).(pulumi.StringPtrOutput)
}

// (Elasticsearch) Enable X-Pack support.
func (o DataSourceJsonDataOutput) XpackEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataSourceJsonData) *bool { return v.XpackEnabled }).(pulumi.BoolPtrOutput)
}

type DataSourceJsonDataArrayOutput struct{ *pulumi.OutputState }

func (DataSourceJsonDataArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSourceJsonData)(nil)).Elem()
}

func (o DataSourceJsonDataArrayOutput) ToDataSourceJsonDataArrayOutput() DataSourceJsonDataArrayOutput {
	return o
}

func (o DataSourceJsonDataArrayOutput) ToDataSourceJsonDataArrayOutputWithContext(ctx context.Context) DataSourceJsonDataArrayOutput {
	return o
}

func (o DataSourceJsonDataArrayOutput) Index(i pulumi.IntInput) DataSourceJsonDataOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataSourceJsonData {
		return vs[0].([]DataSourceJsonData)[vs[1].(int)]
	}).(DataSourceJsonDataOutput)
}

type DataSourceJsonDataDerivedField struct {
	DatasourceUid *string `pulumi:"datasourceUid"`
	MatcherRegex  *string `pulumi:"matcherRegex"`
	// A unique name for the data source.
	Name *string `pulumi:"name"`
	// The URL for the data source. The type of URL required varies depending on the chosen data source type.
	Url *string `pulumi:"url"`
}

// DataSourceJsonDataDerivedFieldInput is an input type that accepts DataSourceJsonDataDerivedFieldArgs and DataSourceJsonDataDerivedFieldOutput values.
// You can construct a concrete instance of `DataSourceJsonDataDerivedFieldInput` via:
//
//	DataSourceJsonDataDerivedFieldArgs{...}
type DataSourceJsonDataDerivedFieldInput interface {
	pulumi.Input

	ToDataSourceJsonDataDerivedFieldOutput() DataSourceJsonDataDerivedFieldOutput
	ToDataSourceJsonDataDerivedFieldOutputWithContext(context.Context) DataSourceJsonDataDerivedFieldOutput
}

type DataSourceJsonDataDerivedFieldArgs struct {
	DatasourceUid pulumi.StringPtrInput `pulumi:"datasourceUid"`
	MatcherRegex  pulumi.StringPtrInput `pulumi:"matcherRegex"`
	// A unique name for the data source.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The URL for the data source. The type of URL required varies depending on the chosen data source type.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (DataSourceJsonDataDerivedFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceJsonDataDerivedField)(nil)).Elem()
}

func (i DataSourceJsonDataDerivedFieldArgs) ToDataSourceJsonDataDerivedFieldOutput() DataSourceJsonDataDerivedFieldOutput {
	return i.ToDataSourceJsonDataDerivedFieldOutputWithContext(context.Background())
}

func (i DataSourceJsonDataDerivedFieldArgs) ToDataSourceJsonDataDerivedFieldOutputWithContext(ctx context.Context) DataSourceJsonDataDerivedFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceJsonDataDerivedFieldOutput)
}

// DataSourceJsonDataDerivedFieldArrayInput is an input type that accepts DataSourceJsonDataDerivedFieldArray and DataSourceJsonDataDerivedFieldArrayOutput values.
// You can construct a concrete instance of `DataSourceJsonDataDerivedFieldArrayInput` via:
//
//	DataSourceJsonDataDerivedFieldArray{ DataSourceJsonDataDerivedFieldArgs{...} }
type DataSourceJsonDataDerivedFieldArrayInput interface {
	pulumi.Input

	ToDataSourceJsonDataDerivedFieldArrayOutput() DataSourceJsonDataDerivedFieldArrayOutput
	ToDataSourceJsonDataDerivedFieldArrayOutputWithContext(context.Context) DataSourceJsonDataDerivedFieldArrayOutput
}

type DataSourceJsonDataDerivedFieldArray []DataSourceJsonDataDerivedFieldInput

func (DataSourceJsonDataDerivedFieldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSourceJsonDataDerivedField)(nil)).Elem()
}

func (i DataSourceJsonDataDerivedFieldArray) ToDataSourceJsonDataDerivedFieldArrayOutput() DataSourceJsonDataDerivedFieldArrayOutput {
	return i.ToDataSourceJsonDataDerivedFieldArrayOutputWithContext(context.Background())
}

func (i DataSourceJsonDataDerivedFieldArray) ToDataSourceJsonDataDerivedFieldArrayOutputWithContext(ctx context.Context) DataSourceJsonDataDerivedFieldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceJsonDataDerivedFieldArrayOutput)
}

type DataSourceJsonDataDerivedFieldOutput struct{ *pulumi.OutputState }

func (DataSourceJsonDataDerivedFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceJsonDataDerivedField)(nil)).Elem()
}

func (o DataSourceJsonDataDerivedFieldOutput) ToDataSourceJsonDataDerivedFieldOutput() DataSourceJsonDataDerivedFieldOutput {
	return o
}

func (o DataSourceJsonDataDerivedFieldOutput) ToDataSourceJsonDataDerivedFieldOutputWithContext(ctx context.Context) DataSourceJsonDataDerivedFieldOutput {
	return o
}

func (o DataSourceJsonDataDerivedFieldOutput) DatasourceUid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceJsonDataDerivedField) *string { return v.DatasourceUid }).(pulumi.StringPtrOutput)
}

func (o DataSourceJsonDataDerivedFieldOutput) MatcherRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceJsonDataDerivedField) *string { return v.MatcherRegex }).(pulumi.StringPtrOutput)
}

// A unique name for the data source.
func (o DataSourceJsonDataDerivedFieldOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceJsonDataDerivedField) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The URL for the data source. The type of URL required varies depending on the chosen data source type.
func (o DataSourceJsonDataDerivedFieldOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceJsonDataDerivedField) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type DataSourceJsonDataDerivedFieldArrayOutput struct{ *pulumi.OutputState }

func (DataSourceJsonDataDerivedFieldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSourceJsonDataDerivedField)(nil)).Elem()
}

func (o DataSourceJsonDataDerivedFieldArrayOutput) ToDataSourceJsonDataDerivedFieldArrayOutput() DataSourceJsonDataDerivedFieldArrayOutput {
	return o
}

func (o DataSourceJsonDataDerivedFieldArrayOutput) ToDataSourceJsonDataDerivedFieldArrayOutputWithContext(ctx context.Context) DataSourceJsonDataDerivedFieldArrayOutput {
	return o
}

func (o DataSourceJsonDataDerivedFieldArrayOutput) Index(i pulumi.IntInput) DataSourceJsonDataDerivedFieldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataSourceJsonDataDerivedField {
		return vs[0].([]DataSourceJsonDataDerivedField)[vs[1].(int)]
	}).(DataSourceJsonDataDerivedFieldOutput)
}

type DataSourcePermissionPermission struct {
	// Permission to associate with item. Must be `Query`.
	Permission string `pulumi:"permission"`
	// ID of the team to manage permissions for. Defaults to `0`.
	TeamId *int `pulumi:"teamId"`
	// ID of the user to manage permissions for. Defaults to `0`.
	UserId *int `pulumi:"userId"`
}

// DataSourcePermissionPermissionInput is an input type that accepts DataSourcePermissionPermissionArgs and DataSourcePermissionPermissionOutput values.
// You can construct a concrete instance of `DataSourcePermissionPermissionInput` via:
//
//	DataSourcePermissionPermissionArgs{...}
type DataSourcePermissionPermissionInput interface {
	pulumi.Input

	ToDataSourcePermissionPermissionOutput() DataSourcePermissionPermissionOutput
	ToDataSourcePermissionPermissionOutputWithContext(context.Context) DataSourcePermissionPermissionOutput
}

type DataSourcePermissionPermissionArgs struct {
	// Permission to associate with item. Must be `Query`.
	Permission pulumi.StringInput `pulumi:"permission"`
	// ID of the team to manage permissions for. Defaults to `0`.
	TeamId pulumi.IntPtrInput `pulumi:"teamId"`
	// ID of the user to manage permissions for. Defaults to `0`.
	UserId pulumi.IntPtrInput `pulumi:"userId"`
}

func (DataSourcePermissionPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourcePermissionPermission)(nil)).Elem()
}

func (i DataSourcePermissionPermissionArgs) ToDataSourcePermissionPermissionOutput() DataSourcePermissionPermissionOutput {
	return i.ToDataSourcePermissionPermissionOutputWithContext(context.Background())
}

func (i DataSourcePermissionPermissionArgs) ToDataSourcePermissionPermissionOutputWithContext(ctx context.Context) DataSourcePermissionPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourcePermissionPermissionOutput)
}

// DataSourcePermissionPermissionArrayInput is an input type that accepts DataSourcePermissionPermissionArray and DataSourcePermissionPermissionArrayOutput values.
// You can construct a concrete instance of `DataSourcePermissionPermissionArrayInput` via:
//
//	DataSourcePermissionPermissionArray{ DataSourcePermissionPermissionArgs{...} }
type DataSourcePermissionPermissionArrayInput interface {
	pulumi.Input

	ToDataSourcePermissionPermissionArrayOutput() DataSourcePermissionPermissionArrayOutput
	ToDataSourcePermissionPermissionArrayOutputWithContext(context.Context) DataSourcePermissionPermissionArrayOutput
}

type DataSourcePermissionPermissionArray []DataSourcePermissionPermissionInput

func (DataSourcePermissionPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSourcePermissionPermission)(nil)).Elem()
}

func (i DataSourcePermissionPermissionArray) ToDataSourcePermissionPermissionArrayOutput() DataSourcePermissionPermissionArrayOutput {
	return i.ToDataSourcePermissionPermissionArrayOutputWithContext(context.Background())
}

func (i DataSourcePermissionPermissionArray) ToDataSourcePermissionPermissionArrayOutputWithContext(ctx context.Context) DataSourcePermissionPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourcePermissionPermissionArrayOutput)
}

type DataSourcePermissionPermissionOutput struct{ *pulumi.OutputState }

func (DataSourcePermissionPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourcePermissionPermission)(nil)).Elem()
}

func (o DataSourcePermissionPermissionOutput) ToDataSourcePermissionPermissionOutput() DataSourcePermissionPermissionOutput {
	return o
}

func (o DataSourcePermissionPermissionOutput) ToDataSourcePermissionPermissionOutputWithContext(ctx context.Context) DataSourcePermissionPermissionOutput {
	return o
}

// Permission to associate with item. Must be `Query`.
func (o DataSourcePermissionPermissionOutput) Permission() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourcePermissionPermission) string { return v.Permission }).(pulumi.StringOutput)
}

// ID of the team to manage permissions for. Defaults to `0`.
func (o DataSourcePermissionPermissionOutput) TeamId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DataSourcePermissionPermission) *int { return v.TeamId }).(pulumi.IntPtrOutput)
}

// ID of the user to manage permissions for. Defaults to `0`.
func (o DataSourcePermissionPermissionOutput) UserId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DataSourcePermissionPermission) *int { return v.UserId }).(pulumi.IntPtrOutput)
}

type DataSourcePermissionPermissionArrayOutput struct{ *pulumi.OutputState }

func (DataSourcePermissionPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSourcePermissionPermission)(nil)).Elem()
}

func (o DataSourcePermissionPermissionArrayOutput) ToDataSourcePermissionPermissionArrayOutput() DataSourcePermissionPermissionArrayOutput {
	return o
}

func (o DataSourcePermissionPermissionArrayOutput) ToDataSourcePermissionPermissionArrayOutputWithContext(ctx context.Context) DataSourcePermissionPermissionArrayOutput {
	return o
}

func (o DataSourcePermissionPermissionArrayOutput) Index(i pulumi.IntInput) DataSourcePermissionPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataSourcePermissionPermission {
		return vs[0].([]DataSourcePermissionPermission)[vs[1].(int)]
	}).(DataSourcePermissionPermissionOutput)
}

type DataSourceSecureJsonData struct {
	// (CloudWatch, Athena) The access key used to access the data source.
	AccessKey *string `pulumi:"accessKey"`
	// (Github) The access token used to access the data source.
	AccessToken *string `pulumi:"accessToken"`
	// (Sentry) Authorization token.
	AuthToken *string `pulumi:"authToken"`
	// (All) Password to use for basic authentication.
	BasicAuthPassword *string `pulumi:"basicAuthPassword"`
	// (Azure Monitor) Client secret for authentication.
	ClientSecret *string `pulumi:"clientSecret"`
	// (All) Password to use for authentication.
	Password *string `pulumi:"password"`
	// (Stackdriver) The service account key `privateKey` to use to access the data source.
	PrivateKey *string `pulumi:"privateKey"`
	// (CloudWatch, Athena) The secret key to use to access the data source.
	SecretKey *string `pulumi:"secretKey"`
	// (Elasticsearch and Prometheus) SigV4 access key. Required when using 'keys' auth provider.
	Sigv4AccessKey *string `pulumi:"sigv4AccessKey"`
	// (Elasticsearch and Prometheus) SigV4 secret key. Required when using 'keys' auth provider.
	Sigv4SecretKey *string `pulumi:"sigv4SecretKey"`
	// (All) CA cert for out going requests.
	TlsCaCert *string `pulumi:"tlsCaCert"`
	// (All) TLS Client cert for outgoing requests.
	TlsClientCert *string `pulumi:"tlsClientCert"`
	// (All) TLS Client key for outgoing requests.
	TlsClientKey *string `pulumi:"tlsClientKey"`
}

// DataSourceSecureJsonDataInput is an input type that accepts DataSourceSecureJsonDataArgs and DataSourceSecureJsonDataOutput values.
// You can construct a concrete instance of `DataSourceSecureJsonDataInput` via:
//
//	DataSourceSecureJsonDataArgs{...}
type DataSourceSecureJsonDataInput interface {
	pulumi.Input

	ToDataSourceSecureJsonDataOutput() DataSourceSecureJsonDataOutput
	ToDataSourceSecureJsonDataOutputWithContext(context.Context) DataSourceSecureJsonDataOutput
}

type DataSourceSecureJsonDataArgs struct {
	// (CloudWatch, Athena) The access key used to access the data source.
	AccessKey pulumi.StringPtrInput `pulumi:"accessKey"`
	// (Github) The access token used to access the data source.
	AccessToken pulumi.StringPtrInput `pulumi:"accessToken"`
	// (Sentry) Authorization token.
	AuthToken pulumi.StringPtrInput `pulumi:"authToken"`
	// (All) Password to use for basic authentication.
	BasicAuthPassword pulumi.StringPtrInput `pulumi:"basicAuthPassword"`
	// (Azure Monitor) Client secret for authentication.
	ClientSecret pulumi.StringPtrInput `pulumi:"clientSecret"`
	// (All) Password to use for authentication.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// (Stackdriver) The service account key `privateKey` to use to access the data source.
	PrivateKey pulumi.StringPtrInput `pulumi:"privateKey"`
	// (CloudWatch, Athena) The secret key to use to access the data source.
	SecretKey pulumi.StringPtrInput `pulumi:"secretKey"`
	// (Elasticsearch and Prometheus) SigV4 access key. Required when using 'keys' auth provider.
	Sigv4AccessKey pulumi.StringPtrInput `pulumi:"sigv4AccessKey"`
	// (Elasticsearch and Prometheus) SigV4 secret key. Required when using 'keys' auth provider.
	Sigv4SecretKey pulumi.StringPtrInput `pulumi:"sigv4SecretKey"`
	// (All) CA cert for out going requests.
	TlsCaCert pulumi.StringPtrInput `pulumi:"tlsCaCert"`
	// (All) TLS Client cert for outgoing requests.
	TlsClientCert pulumi.StringPtrInput `pulumi:"tlsClientCert"`
	// (All) TLS Client key for outgoing requests.
	TlsClientKey pulumi.StringPtrInput `pulumi:"tlsClientKey"`
}

func (DataSourceSecureJsonDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceSecureJsonData)(nil)).Elem()
}

func (i DataSourceSecureJsonDataArgs) ToDataSourceSecureJsonDataOutput() DataSourceSecureJsonDataOutput {
	return i.ToDataSourceSecureJsonDataOutputWithContext(context.Background())
}

func (i DataSourceSecureJsonDataArgs) ToDataSourceSecureJsonDataOutputWithContext(ctx context.Context) DataSourceSecureJsonDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceSecureJsonDataOutput)
}

// DataSourceSecureJsonDataArrayInput is an input type that accepts DataSourceSecureJsonDataArray and DataSourceSecureJsonDataArrayOutput values.
// You can construct a concrete instance of `DataSourceSecureJsonDataArrayInput` via:
//
//	DataSourceSecureJsonDataArray{ DataSourceSecureJsonDataArgs{...} }
type DataSourceSecureJsonDataArrayInput interface {
	pulumi.Input

	ToDataSourceSecureJsonDataArrayOutput() DataSourceSecureJsonDataArrayOutput
	ToDataSourceSecureJsonDataArrayOutputWithContext(context.Context) DataSourceSecureJsonDataArrayOutput
}

type DataSourceSecureJsonDataArray []DataSourceSecureJsonDataInput

func (DataSourceSecureJsonDataArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSourceSecureJsonData)(nil)).Elem()
}

func (i DataSourceSecureJsonDataArray) ToDataSourceSecureJsonDataArrayOutput() DataSourceSecureJsonDataArrayOutput {
	return i.ToDataSourceSecureJsonDataArrayOutputWithContext(context.Background())
}

func (i DataSourceSecureJsonDataArray) ToDataSourceSecureJsonDataArrayOutputWithContext(ctx context.Context) DataSourceSecureJsonDataArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceSecureJsonDataArrayOutput)
}

type DataSourceSecureJsonDataOutput struct{ *pulumi.OutputState }

func (DataSourceSecureJsonDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceSecureJsonData)(nil)).Elem()
}

func (o DataSourceSecureJsonDataOutput) ToDataSourceSecureJsonDataOutput() DataSourceSecureJsonDataOutput {
	return o
}

func (o DataSourceSecureJsonDataOutput) ToDataSourceSecureJsonDataOutputWithContext(ctx context.Context) DataSourceSecureJsonDataOutput {
	return o
}

// (CloudWatch, Athena) The access key used to access the data source.
func (o DataSourceSecureJsonDataOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceSecureJsonData) *string { return v.AccessKey }).(pulumi.StringPtrOutput)
}

// (Github) The access token used to access the data source.
func (o DataSourceSecureJsonDataOutput) AccessToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceSecureJsonData) *string { return v.AccessToken }).(pulumi.StringPtrOutput)
}

// (Sentry) Authorization token.
func (o DataSourceSecureJsonDataOutput) AuthToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceSecureJsonData) *string { return v.AuthToken }).(pulumi.StringPtrOutput)
}

// (All) Password to use for basic authentication.
func (o DataSourceSecureJsonDataOutput) BasicAuthPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceSecureJsonData) *string { return v.BasicAuthPassword }).(pulumi.StringPtrOutput)
}

// (Azure Monitor) Client secret for authentication.
func (o DataSourceSecureJsonDataOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceSecureJsonData) *string { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// (All) Password to use for authentication.
func (o DataSourceSecureJsonDataOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceSecureJsonData) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// (Stackdriver) The service account key `privateKey` to use to access the data source.
func (o DataSourceSecureJsonDataOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceSecureJsonData) *string { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

// (CloudWatch, Athena) The secret key to use to access the data source.
func (o DataSourceSecureJsonDataOutput) SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceSecureJsonData) *string { return v.SecretKey }).(pulumi.StringPtrOutput)
}

// (Elasticsearch and Prometheus) SigV4 access key. Required when using 'keys' auth provider.
func (o DataSourceSecureJsonDataOutput) Sigv4AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceSecureJsonData) *string { return v.Sigv4AccessKey }).(pulumi.StringPtrOutput)
}

// (Elasticsearch and Prometheus) SigV4 secret key. Required when using 'keys' auth provider.
func (o DataSourceSecureJsonDataOutput) Sigv4SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceSecureJsonData) *string { return v.Sigv4SecretKey }).(pulumi.StringPtrOutput)
}

// (All) CA cert for out going requests.
func (o DataSourceSecureJsonDataOutput) TlsCaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceSecureJsonData) *string { return v.TlsCaCert }).(pulumi.StringPtrOutput)
}

// (All) TLS Client cert for outgoing requests.
func (o DataSourceSecureJsonDataOutput) TlsClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceSecureJsonData) *string { return v.TlsClientCert }).(pulumi.StringPtrOutput)
}

// (All) TLS Client key for outgoing requests.
func (o DataSourceSecureJsonDataOutput) TlsClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceSecureJsonData) *string { return v.TlsClientKey }).(pulumi.StringPtrOutput)
}

type DataSourceSecureJsonDataArrayOutput struct{ *pulumi.OutputState }

func (DataSourceSecureJsonDataArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSourceSecureJsonData)(nil)).Elem()
}

func (o DataSourceSecureJsonDataArrayOutput) ToDataSourceSecureJsonDataArrayOutput() DataSourceSecureJsonDataArrayOutput {
	return o
}

func (o DataSourceSecureJsonDataArrayOutput) ToDataSourceSecureJsonDataArrayOutputWithContext(ctx context.Context) DataSourceSecureJsonDataArrayOutput {
	return o
}

func (o DataSourceSecureJsonDataArrayOutput) Index(i pulumi.IntInput) DataSourceSecureJsonDataOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataSourceSecureJsonData {
		return vs[0].([]DataSourceSecureJsonData)[vs[1].(int)]
	}).(DataSourceSecureJsonDataOutput)
}

type FolderPermissionPermission struct {
	// Permission to associate with item. Must be one of `View`, `Edit`, or `Admin`.
	Permission string `pulumi:"permission"`
	// Manage permissions for `Viewer` or `Editor` roles.
	Role *string `pulumi:"role"`
	// ID of the team to manage permissions for. Defaults to `0`.
	TeamId *int `pulumi:"teamId"`
	// ID of the user to manage permissions for. Defaults to `0`.
	UserId *int `pulumi:"userId"`
}

// FolderPermissionPermissionInput is an input type that accepts FolderPermissionPermissionArgs and FolderPermissionPermissionOutput values.
// You can construct a concrete instance of `FolderPermissionPermissionInput` via:
//
//	FolderPermissionPermissionArgs{...}
type FolderPermissionPermissionInput interface {
	pulumi.Input

	ToFolderPermissionPermissionOutput() FolderPermissionPermissionOutput
	ToFolderPermissionPermissionOutputWithContext(context.Context) FolderPermissionPermissionOutput
}

type FolderPermissionPermissionArgs struct {
	// Permission to associate with item. Must be one of `View`, `Edit`, or `Admin`.
	Permission pulumi.StringInput `pulumi:"permission"`
	// Manage permissions for `Viewer` or `Editor` roles.
	Role pulumi.StringPtrInput `pulumi:"role"`
	// ID of the team to manage permissions for. Defaults to `0`.
	TeamId pulumi.IntPtrInput `pulumi:"teamId"`
	// ID of the user to manage permissions for. Defaults to `0`.
	UserId pulumi.IntPtrInput `pulumi:"userId"`
}

func (FolderPermissionPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FolderPermissionPermission)(nil)).Elem()
}

func (i FolderPermissionPermissionArgs) ToFolderPermissionPermissionOutput() FolderPermissionPermissionOutput {
	return i.ToFolderPermissionPermissionOutputWithContext(context.Background())
}

func (i FolderPermissionPermissionArgs) ToFolderPermissionPermissionOutputWithContext(ctx context.Context) FolderPermissionPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FolderPermissionPermissionOutput)
}

// FolderPermissionPermissionArrayInput is an input type that accepts FolderPermissionPermissionArray and FolderPermissionPermissionArrayOutput values.
// You can construct a concrete instance of `FolderPermissionPermissionArrayInput` via:
//
//	FolderPermissionPermissionArray{ FolderPermissionPermissionArgs{...} }
type FolderPermissionPermissionArrayInput interface {
	pulumi.Input

	ToFolderPermissionPermissionArrayOutput() FolderPermissionPermissionArrayOutput
	ToFolderPermissionPermissionArrayOutputWithContext(context.Context) FolderPermissionPermissionArrayOutput
}

type FolderPermissionPermissionArray []FolderPermissionPermissionInput

func (FolderPermissionPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FolderPermissionPermission)(nil)).Elem()
}

func (i FolderPermissionPermissionArray) ToFolderPermissionPermissionArrayOutput() FolderPermissionPermissionArrayOutput {
	return i.ToFolderPermissionPermissionArrayOutputWithContext(context.Background())
}

func (i FolderPermissionPermissionArray) ToFolderPermissionPermissionArrayOutputWithContext(ctx context.Context) FolderPermissionPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FolderPermissionPermissionArrayOutput)
}

type FolderPermissionPermissionOutput struct{ *pulumi.OutputState }

func (FolderPermissionPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FolderPermissionPermission)(nil)).Elem()
}

func (o FolderPermissionPermissionOutput) ToFolderPermissionPermissionOutput() FolderPermissionPermissionOutput {
	return o
}

func (o FolderPermissionPermissionOutput) ToFolderPermissionPermissionOutputWithContext(ctx context.Context) FolderPermissionPermissionOutput {
	return o
}

// Permission to associate with item. Must be one of `View`, `Edit`, or `Admin`.
func (o FolderPermissionPermissionOutput) Permission() pulumi.StringOutput {
	return o.ApplyT(func(v FolderPermissionPermission) string { return v.Permission }).(pulumi.StringOutput)
}

// Manage permissions for `Viewer` or `Editor` roles.
func (o FolderPermissionPermissionOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FolderPermissionPermission) *string { return v.Role }).(pulumi.StringPtrOutput)
}

// ID of the team to manage permissions for. Defaults to `0`.
func (o FolderPermissionPermissionOutput) TeamId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FolderPermissionPermission) *int { return v.TeamId }).(pulumi.IntPtrOutput)
}

// ID of the user to manage permissions for. Defaults to `0`.
func (o FolderPermissionPermissionOutput) UserId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FolderPermissionPermission) *int { return v.UserId }).(pulumi.IntPtrOutput)
}

type FolderPermissionPermissionArrayOutput struct{ *pulumi.OutputState }

func (FolderPermissionPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FolderPermissionPermission)(nil)).Elem()
}

func (o FolderPermissionPermissionArrayOutput) ToFolderPermissionPermissionArrayOutput() FolderPermissionPermissionArrayOutput {
	return o
}

func (o FolderPermissionPermissionArrayOutput) ToFolderPermissionPermissionArrayOutputWithContext(ctx context.Context) FolderPermissionPermissionArrayOutput {
	return o
}

func (o FolderPermissionPermissionArrayOutput) Index(i pulumi.IntInput) FolderPermissionPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FolderPermissionPermission {
		return vs[0].([]FolderPermissionPermission)[vs[1].(int)]
	}).(FolderPermissionPermissionOutput)
}

type MuteTimingInterval struct {
	// An inclusive range of days, 1-31, within a month, e.g. "1" or "14:16". Negative values can be used to represent days counting from the end of a month, e.g. "-1".
	DaysOfMonths []string `pulumi:"daysOfMonths"`
	// An inclusive range of months, either numerical or full calendar month, e.g. "1:3", "december", or "may:august".
	Months []string `pulumi:"months"`
	// The time ranges, represented in minutes, during which to mute in a given day.
	Times []MuteTimingIntervalTime `pulumi:"times"`
	// An inclusive range of weekdays, e.g. "monday" or "tuesday:thursday".
	Weekdays []string `pulumi:"weekdays"`
	// A positive inclusive range of years, e.g. "2030" or "2025:2026".
	Years []string `pulumi:"years"`
}

// MuteTimingIntervalInput is an input type that accepts MuteTimingIntervalArgs and MuteTimingIntervalOutput values.
// You can construct a concrete instance of `MuteTimingIntervalInput` via:
//
//	MuteTimingIntervalArgs{...}
type MuteTimingIntervalInput interface {
	pulumi.Input

	ToMuteTimingIntervalOutput() MuteTimingIntervalOutput
	ToMuteTimingIntervalOutputWithContext(context.Context) MuteTimingIntervalOutput
}

type MuteTimingIntervalArgs struct {
	// An inclusive range of days, 1-31, within a month, e.g. "1" or "14:16". Negative values can be used to represent days counting from the end of a month, e.g. "-1".
	DaysOfMonths pulumi.StringArrayInput `pulumi:"daysOfMonths"`
	// An inclusive range of months, either numerical or full calendar month, e.g. "1:3", "december", or "may:august".
	Months pulumi.StringArrayInput `pulumi:"months"`
	// The time ranges, represented in minutes, during which to mute in a given day.
	Times MuteTimingIntervalTimeArrayInput `pulumi:"times"`
	// An inclusive range of weekdays, e.g. "monday" or "tuesday:thursday".
	Weekdays pulumi.StringArrayInput `pulumi:"weekdays"`
	// A positive inclusive range of years, e.g. "2030" or "2025:2026".
	Years pulumi.StringArrayInput `pulumi:"years"`
}

func (MuteTimingIntervalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MuteTimingInterval)(nil)).Elem()
}

func (i MuteTimingIntervalArgs) ToMuteTimingIntervalOutput() MuteTimingIntervalOutput {
	return i.ToMuteTimingIntervalOutputWithContext(context.Background())
}

func (i MuteTimingIntervalArgs) ToMuteTimingIntervalOutputWithContext(ctx context.Context) MuteTimingIntervalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MuteTimingIntervalOutput)
}

// MuteTimingIntervalArrayInput is an input type that accepts MuteTimingIntervalArray and MuteTimingIntervalArrayOutput values.
// You can construct a concrete instance of `MuteTimingIntervalArrayInput` via:
//
//	MuteTimingIntervalArray{ MuteTimingIntervalArgs{...} }
type MuteTimingIntervalArrayInput interface {
	pulumi.Input

	ToMuteTimingIntervalArrayOutput() MuteTimingIntervalArrayOutput
	ToMuteTimingIntervalArrayOutputWithContext(context.Context) MuteTimingIntervalArrayOutput
}

type MuteTimingIntervalArray []MuteTimingIntervalInput

func (MuteTimingIntervalArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MuteTimingInterval)(nil)).Elem()
}

func (i MuteTimingIntervalArray) ToMuteTimingIntervalArrayOutput() MuteTimingIntervalArrayOutput {
	return i.ToMuteTimingIntervalArrayOutputWithContext(context.Background())
}

func (i MuteTimingIntervalArray) ToMuteTimingIntervalArrayOutputWithContext(ctx context.Context) MuteTimingIntervalArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MuteTimingIntervalArrayOutput)
}

type MuteTimingIntervalOutput struct{ *pulumi.OutputState }

func (MuteTimingIntervalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MuteTimingInterval)(nil)).Elem()
}

func (o MuteTimingIntervalOutput) ToMuteTimingIntervalOutput() MuteTimingIntervalOutput {
	return o
}

func (o MuteTimingIntervalOutput) ToMuteTimingIntervalOutputWithContext(ctx context.Context) MuteTimingIntervalOutput {
	return o
}

// An inclusive range of days, 1-31, within a month, e.g. "1" or "14:16". Negative values can be used to represent days counting from the end of a month, e.g. "-1".
func (o MuteTimingIntervalOutput) DaysOfMonths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MuteTimingInterval) []string { return v.DaysOfMonths }).(pulumi.StringArrayOutput)
}

// An inclusive range of months, either numerical or full calendar month, e.g. "1:3", "december", or "may:august".
func (o MuteTimingIntervalOutput) Months() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MuteTimingInterval) []string { return v.Months }).(pulumi.StringArrayOutput)
}

// The time ranges, represented in minutes, during which to mute in a given day.
func (o MuteTimingIntervalOutput) Times() MuteTimingIntervalTimeArrayOutput {
	return o.ApplyT(func(v MuteTimingInterval) []MuteTimingIntervalTime { return v.Times }).(MuteTimingIntervalTimeArrayOutput)
}

// An inclusive range of weekdays, e.g. "monday" or "tuesday:thursday".
func (o MuteTimingIntervalOutput) Weekdays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MuteTimingInterval) []string { return v.Weekdays }).(pulumi.StringArrayOutput)
}

// A positive inclusive range of years, e.g. "2030" or "2025:2026".
func (o MuteTimingIntervalOutput) Years() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MuteTimingInterval) []string { return v.Years }).(pulumi.StringArrayOutput)
}

type MuteTimingIntervalArrayOutput struct{ *pulumi.OutputState }

func (MuteTimingIntervalArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MuteTimingInterval)(nil)).Elem()
}

func (o MuteTimingIntervalArrayOutput) ToMuteTimingIntervalArrayOutput() MuteTimingIntervalArrayOutput {
	return o
}

func (o MuteTimingIntervalArrayOutput) ToMuteTimingIntervalArrayOutputWithContext(ctx context.Context) MuteTimingIntervalArrayOutput {
	return o
}

func (o MuteTimingIntervalArrayOutput) Index(i pulumi.IntInput) MuteTimingIntervalOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MuteTimingInterval {
		return vs[0].([]MuteTimingInterval)[vs[1].(int)]
	}).(MuteTimingIntervalOutput)
}

type MuteTimingIntervalTime struct {
	End   string `pulumi:"end"`
	Start string `pulumi:"start"`
}

// MuteTimingIntervalTimeInput is an input type that accepts MuteTimingIntervalTimeArgs and MuteTimingIntervalTimeOutput values.
// You can construct a concrete instance of `MuteTimingIntervalTimeInput` via:
//
//	MuteTimingIntervalTimeArgs{...}
type MuteTimingIntervalTimeInput interface {
	pulumi.Input

	ToMuteTimingIntervalTimeOutput() MuteTimingIntervalTimeOutput
	ToMuteTimingIntervalTimeOutputWithContext(context.Context) MuteTimingIntervalTimeOutput
}

type MuteTimingIntervalTimeArgs struct {
	End   pulumi.StringInput `pulumi:"end"`
	Start pulumi.StringInput `pulumi:"start"`
}

func (MuteTimingIntervalTimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MuteTimingIntervalTime)(nil)).Elem()
}

func (i MuteTimingIntervalTimeArgs) ToMuteTimingIntervalTimeOutput() MuteTimingIntervalTimeOutput {
	return i.ToMuteTimingIntervalTimeOutputWithContext(context.Background())
}

func (i MuteTimingIntervalTimeArgs) ToMuteTimingIntervalTimeOutputWithContext(ctx context.Context) MuteTimingIntervalTimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MuteTimingIntervalTimeOutput)
}

// MuteTimingIntervalTimeArrayInput is an input type that accepts MuteTimingIntervalTimeArray and MuteTimingIntervalTimeArrayOutput values.
// You can construct a concrete instance of `MuteTimingIntervalTimeArrayInput` via:
//
//	MuteTimingIntervalTimeArray{ MuteTimingIntervalTimeArgs{...} }
type MuteTimingIntervalTimeArrayInput interface {
	pulumi.Input

	ToMuteTimingIntervalTimeArrayOutput() MuteTimingIntervalTimeArrayOutput
	ToMuteTimingIntervalTimeArrayOutputWithContext(context.Context) MuteTimingIntervalTimeArrayOutput
}

type MuteTimingIntervalTimeArray []MuteTimingIntervalTimeInput

func (MuteTimingIntervalTimeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MuteTimingIntervalTime)(nil)).Elem()
}

func (i MuteTimingIntervalTimeArray) ToMuteTimingIntervalTimeArrayOutput() MuteTimingIntervalTimeArrayOutput {
	return i.ToMuteTimingIntervalTimeArrayOutputWithContext(context.Background())
}

func (i MuteTimingIntervalTimeArray) ToMuteTimingIntervalTimeArrayOutputWithContext(ctx context.Context) MuteTimingIntervalTimeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MuteTimingIntervalTimeArrayOutput)
}

type MuteTimingIntervalTimeOutput struct{ *pulumi.OutputState }

func (MuteTimingIntervalTimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MuteTimingIntervalTime)(nil)).Elem()
}

func (o MuteTimingIntervalTimeOutput) ToMuteTimingIntervalTimeOutput() MuteTimingIntervalTimeOutput {
	return o
}

func (o MuteTimingIntervalTimeOutput) ToMuteTimingIntervalTimeOutputWithContext(ctx context.Context) MuteTimingIntervalTimeOutput {
	return o
}

func (o MuteTimingIntervalTimeOutput) End() pulumi.StringOutput {
	return o.ApplyT(func(v MuteTimingIntervalTime) string { return v.End }).(pulumi.StringOutput)
}

func (o MuteTimingIntervalTimeOutput) Start() pulumi.StringOutput {
	return o.ApplyT(func(v MuteTimingIntervalTime) string { return v.Start }).(pulumi.StringOutput)
}

type MuteTimingIntervalTimeArrayOutput struct{ *pulumi.OutputState }

func (MuteTimingIntervalTimeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MuteTimingIntervalTime)(nil)).Elem()
}

func (o MuteTimingIntervalTimeArrayOutput) ToMuteTimingIntervalTimeArrayOutput() MuteTimingIntervalTimeArrayOutput {
	return o
}

func (o MuteTimingIntervalTimeArrayOutput) ToMuteTimingIntervalTimeArrayOutputWithContext(ctx context.Context) MuteTimingIntervalTimeArrayOutput {
	return o
}

func (o MuteTimingIntervalTimeArrayOutput) Index(i pulumi.IntInput) MuteTimingIntervalTimeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MuteTimingIntervalTime {
		return vs[0].([]MuteTimingIntervalTime)[vs[1].(int)]
	}).(MuteTimingIntervalTimeOutput)
}

type NotificationPolicyPolicy struct {
	// The contact point to route notifications that match this rule to.
	ContactPoint string `pulumi:"contactPoint"`
	// Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.
	Continue *bool `pulumi:"continue"`
	// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping.
	GroupBies []string `pulumi:"groupBies"`
	// Minimum time interval between two notifications for the same group. Default is 5 minutes.
	GroupInterval *string `pulumi:"groupInterval"`
	// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
	GroupWait *string `pulumi:"groupWait"`
	// Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.
	Matchers []NotificationPolicyPolicyMatcher `pulumi:"matchers"`
	// A list of mute timing names to apply to alerts that match this policy.
	MuteTimings []string `pulumi:"muteTimings"`
	// Routing rules for specific label sets.
	Policies []NotificationPolicyPolicyPolicy `pulumi:"policies"`
	// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
	RepeatInterval *string `pulumi:"repeatInterval"`
}

// NotificationPolicyPolicyInput is an input type that accepts NotificationPolicyPolicyArgs and NotificationPolicyPolicyOutput values.
// You can construct a concrete instance of `NotificationPolicyPolicyInput` via:
//
//	NotificationPolicyPolicyArgs{...}
type NotificationPolicyPolicyInput interface {
	pulumi.Input

	ToNotificationPolicyPolicyOutput() NotificationPolicyPolicyOutput
	ToNotificationPolicyPolicyOutputWithContext(context.Context) NotificationPolicyPolicyOutput
}

type NotificationPolicyPolicyArgs struct {
	// The contact point to route notifications that match this rule to.
	ContactPoint pulumi.StringInput `pulumi:"contactPoint"`
	// Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.
	Continue pulumi.BoolPtrInput `pulumi:"continue"`
	// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping.
	GroupBies pulumi.StringArrayInput `pulumi:"groupBies"`
	// Minimum time interval between two notifications for the same group. Default is 5 minutes.
	GroupInterval pulumi.StringPtrInput `pulumi:"groupInterval"`
	// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
	GroupWait pulumi.StringPtrInput `pulumi:"groupWait"`
	// Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.
	Matchers NotificationPolicyPolicyMatcherArrayInput `pulumi:"matchers"`
	// A list of mute timing names to apply to alerts that match this policy.
	MuteTimings pulumi.StringArrayInput `pulumi:"muteTimings"`
	// Routing rules for specific label sets.
	Policies NotificationPolicyPolicyPolicyArrayInput `pulumi:"policies"`
	// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
	RepeatInterval pulumi.StringPtrInput `pulumi:"repeatInterval"`
}

func (NotificationPolicyPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicy)(nil)).Elem()
}

func (i NotificationPolicyPolicyArgs) ToNotificationPolicyPolicyOutput() NotificationPolicyPolicyOutput {
	return i.ToNotificationPolicyPolicyOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyArgs) ToNotificationPolicyPolicyOutputWithContext(ctx context.Context) NotificationPolicyPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyOutput)
}

// NotificationPolicyPolicyArrayInput is an input type that accepts NotificationPolicyPolicyArray and NotificationPolicyPolicyArrayOutput values.
// You can construct a concrete instance of `NotificationPolicyPolicyArrayInput` via:
//
//	NotificationPolicyPolicyArray{ NotificationPolicyPolicyArgs{...} }
type NotificationPolicyPolicyArrayInput interface {
	pulumi.Input

	ToNotificationPolicyPolicyArrayOutput() NotificationPolicyPolicyArrayOutput
	ToNotificationPolicyPolicyArrayOutputWithContext(context.Context) NotificationPolicyPolicyArrayOutput
}

type NotificationPolicyPolicyArray []NotificationPolicyPolicyInput

func (NotificationPolicyPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyPolicy)(nil)).Elem()
}

func (i NotificationPolicyPolicyArray) ToNotificationPolicyPolicyArrayOutput() NotificationPolicyPolicyArrayOutput {
	return i.ToNotificationPolicyPolicyArrayOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyArray) ToNotificationPolicyPolicyArrayOutputWithContext(ctx context.Context) NotificationPolicyPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyArrayOutput)
}

type NotificationPolicyPolicyOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicy)(nil)).Elem()
}

func (o NotificationPolicyPolicyOutput) ToNotificationPolicyPolicyOutput() NotificationPolicyPolicyOutput {
	return o
}

func (o NotificationPolicyPolicyOutput) ToNotificationPolicyPolicyOutputWithContext(ctx context.Context) NotificationPolicyPolicyOutput {
	return o
}

// The contact point to route notifications that match this rule to.
func (o NotificationPolicyPolicyOutput) ContactPoint() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationPolicyPolicy) string { return v.ContactPoint }).(pulumi.StringOutput)
}

// Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.
func (o NotificationPolicyPolicyOutput) Continue() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicy) *bool { return v.Continue }).(pulumi.BoolPtrOutput)
}

// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping.
func (o NotificationPolicyPolicyOutput) GroupBies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationPolicyPolicy) []string { return v.GroupBies }).(pulumi.StringArrayOutput)
}

// Minimum time interval between two notifications for the same group. Default is 5 minutes.
func (o NotificationPolicyPolicyOutput) GroupInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicy) *string { return v.GroupInterval }).(pulumi.StringPtrOutput)
}

// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
func (o NotificationPolicyPolicyOutput) GroupWait() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicy) *string { return v.GroupWait }).(pulumi.StringPtrOutput)
}

// Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.
func (o NotificationPolicyPolicyOutput) Matchers() NotificationPolicyPolicyMatcherArrayOutput {
	return o.ApplyT(func(v NotificationPolicyPolicy) []NotificationPolicyPolicyMatcher { return v.Matchers }).(NotificationPolicyPolicyMatcherArrayOutput)
}

// A list of mute timing names to apply to alerts that match this policy.
func (o NotificationPolicyPolicyOutput) MuteTimings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationPolicyPolicy) []string { return v.MuteTimings }).(pulumi.StringArrayOutput)
}

// Routing rules for specific label sets.
func (o NotificationPolicyPolicyOutput) Policies() NotificationPolicyPolicyPolicyArrayOutput {
	return o.ApplyT(func(v NotificationPolicyPolicy) []NotificationPolicyPolicyPolicy { return v.Policies }).(NotificationPolicyPolicyPolicyArrayOutput)
}

// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
func (o NotificationPolicyPolicyOutput) RepeatInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicy) *string { return v.RepeatInterval }).(pulumi.StringPtrOutput)
}

type NotificationPolicyPolicyArrayOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyPolicy)(nil)).Elem()
}

func (o NotificationPolicyPolicyArrayOutput) ToNotificationPolicyPolicyArrayOutput() NotificationPolicyPolicyArrayOutput {
	return o
}

func (o NotificationPolicyPolicyArrayOutput) ToNotificationPolicyPolicyArrayOutputWithContext(ctx context.Context) NotificationPolicyPolicyArrayOutput {
	return o
}

func (o NotificationPolicyPolicyArrayOutput) Index(i pulumi.IntInput) NotificationPolicyPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationPolicyPolicy {
		return vs[0].([]NotificationPolicyPolicy)[vs[1].(int)]
	}).(NotificationPolicyPolicyOutput)
}

type NotificationPolicyPolicyMatcher struct {
	Label string `pulumi:"label"`
	Match string `pulumi:"match"`
	Value string `pulumi:"value"`
}

// NotificationPolicyPolicyMatcherInput is an input type that accepts NotificationPolicyPolicyMatcherArgs and NotificationPolicyPolicyMatcherOutput values.
// You can construct a concrete instance of `NotificationPolicyPolicyMatcherInput` via:
//
//	NotificationPolicyPolicyMatcherArgs{...}
type NotificationPolicyPolicyMatcherInput interface {
	pulumi.Input

	ToNotificationPolicyPolicyMatcherOutput() NotificationPolicyPolicyMatcherOutput
	ToNotificationPolicyPolicyMatcherOutputWithContext(context.Context) NotificationPolicyPolicyMatcherOutput
}

type NotificationPolicyPolicyMatcherArgs struct {
	Label pulumi.StringInput `pulumi:"label"`
	Match pulumi.StringInput `pulumi:"match"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (NotificationPolicyPolicyMatcherArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyMatcher)(nil)).Elem()
}

func (i NotificationPolicyPolicyMatcherArgs) ToNotificationPolicyPolicyMatcherOutput() NotificationPolicyPolicyMatcherOutput {
	return i.ToNotificationPolicyPolicyMatcherOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyMatcherArgs) ToNotificationPolicyPolicyMatcherOutputWithContext(ctx context.Context) NotificationPolicyPolicyMatcherOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyMatcherOutput)
}

// NotificationPolicyPolicyMatcherArrayInput is an input type that accepts NotificationPolicyPolicyMatcherArray and NotificationPolicyPolicyMatcherArrayOutput values.
// You can construct a concrete instance of `NotificationPolicyPolicyMatcherArrayInput` via:
//
//	NotificationPolicyPolicyMatcherArray{ NotificationPolicyPolicyMatcherArgs{...} }
type NotificationPolicyPolicyMatcherArrayInput interface {
	pulumi.Input

	ToNotificationPolicyPolicyMatcherArrayOutput() NotificationPolicyPolicyMatcherArrayOutput
	ToNotificationPolicyPolicyMatcherArrayOutputWithContext(context.Context) NotificationPolicyPolicyMatcherArrayOutput
}

type NotificationPolicyPolicyMatcherArray []NotificationPolicyPolicyMatcherInput

func (NotificationPolicyPolicyMatcherArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyPolicyMatcher)(nil)).Elem()
}

func (i NotificationPolicyPolicyMatcherArray) ToNotificationPolicyPolicyMatcherArrayOutput() NotificationPolicyPolicyMatcherArrayOutput {
	return i.ToNotificationPolicyPolicyMatcherArrayOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyMatcherArray) ToNotificationPolicyPolicyMatcherArrayOutputWithContext(ctx context.Context) NotificationPolicyPolicyMatcherArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyMatcherArrayOutput)
}

type NotificationPolicyPolicyMatcherOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyMatcherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyMatcher)(nil)).Elem()
}

func (o NotificationPolicyPolicyMatcherOutput) ToNotificationPolicyPolicyMatcherOutput() NotificationPolicyPolicyMatcherOutput {
	return o
}

func (o NotificationPolicyPolicyMatcherOutput) ToNotificationPolicyPolicyMatcherOutputWithContext(ctx context.Context) NotificationPolicyPolicyMatcherOutput {
	return o
}

func (o NotificationPolicyPolicyMatcherOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyMatcher) string { return v.Label }).(pulumi.StringOutput)
}

func (o NotificationPolicyPolicyMatcherOutput) Match() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyMatcher) string { return v.Match }).(pulumi.StringOutput)
}

func (o NotificationPolicyPolicyMatcherOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyMatcher) string { return v.Value }).(pulumi.StringOutput)
}

type NotificationPolicyPolicyMatcherArrayOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyMatcherArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyPolicyMatcher)(nil)).Elem()
}

func (o NotificationPolicyPolicyMatcherArrayOutput) ToNotificationPolicyPolicyMatcherArrayOutput() NotificationPolicyPolicyMatcherArrayOutput {
	return o
}

func (o NotificationPolicyPolicyMatcherArrayOutput) ToNotificationPolicyPolicyMatcherArrayOutputWithContext(ctx context.Context) NotificationPolicyPolicyMatcherArrayOutput {
	return o
}

func (o NotificationPolicyPolicyMatcherArrayOutput) Index(i pulumi.IntInput) NotificationPolicyPolicyMatcherOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationPolicyPolicyMatcher {
		return vs[0].([]NotificationPolicyPolicyMatcher)[vs[1].(int)]
	}).(NotificationPolicyPolicyMatcherOutput)
}

type NotificationPolicyPolicyPolicy struct {
	// The contact point to route notifications that match this rule to.
	ContactPoint string `pulumi:"contactPoint"`
	// Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.
	Continue *bool `pulumi:"continue"`
	// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping.
	GroupBies []string `pulumi:"groupBies"`
	// Minimum time interval between two notifications for the same group. Default is 5 minutes.
	GroupInterval *string `pulumi:"groupInterval"`
	// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
	GroupWait *string `pulumi:"groupWait"`
	// Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.
	Matchers []NotificationPolicyPolicyPolicyMatcher `pulumi:"matchers"`
	// A list of mute timing names to apply to alerts that match this policy.
	MuteTimings []string `pulumi:"muteTimings"`
	// Routing rules for specific label sets.
	Policies []NotificationPolicyPolicyPolicyPolicy `pulumi:"policies"`
	// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
	RepeatInterval *string `pulumi:"repeatInterval"`
}

// NotificationPolicyPolicyPolicyInput is an input type that accepts NotificationPolicyPolicyPolicyArgs and NotificationPolicyPolicyPolicyOutput values.
// You can construct a concrete instance of `NotificationPolicyPolicyPolicyInput` via:
//
//	NotificationPolicyPolicyPolicyArgs{...}
type NotificationPolicyPolicyPolicyInput interface {
	pulumi.Input

	ToNotificationPolicyPolicyPolicyOutput() NotificationPolicyPolicyPolicyOutput
	ToNotificationPolicyPolicyPolicyOutputWithContext(context.Context) NotificationPolicyPolicyPolicyOutput
}

type NotificationPolicyPolicyPolicyArgs struct {
	// The contact point to route notifications that match this rule to.
	ContactPoint pulumi.StringInput `pulumi:"contactPoint"`
	// Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.
	Continue pulumi.BoolPtrInput `pulumi:"continue"`
	// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping.
	GroupBies pulumi.StringArrayInput `pulumi:"groupBies"`
	// Minimum time interval between two notifications for the same group. Default is 5 minutes.
	GroupInterval pulumi.StringPtrInput `pulumi:"groupInterval"`
	// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
	GroupWait pulumi.StringPtrInput `pulumi:"groupWait"`
	// Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.
	Matchers NotificationPolicyPolicyPolicyMatcherArrayInput `pulumi:"matchers"`
	// A list of mute timing names to apply to alerts that match this policy.
	MuteTimings pulumi.StringArrayInput `pulumi:"muteTimings"`
	// Routing rules for specific label sets.
	Policies NotificationPolicyPolicyPolicyPolicyArrayInput `pulumi:"policies"`
	// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
	RepeatInterval pulumi.StringPtrInput `pulumi:"repeatInterval"`
}

func (NotificationPolicyPolicyPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyPolicy)(nil)).Elem()
}

func (i NotificationPolicyPolicyPolicyArgs) ToNotificationPolicyPolicyPolicyOutput() NotificationPolicyPolicyPolicyOutput {
	return i.ToNotificationPolicyPolicyPolicyOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyPolicyArgs) ToNotificationPolicyPolicyPolicyOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyPolicyOutput)
}

// NotificationPolicyPolicyPolicyArrayInput is an input type that accepts NotificationPolicyPolicyPolicyArray and NotificationPolicyPolicyPolicyArrayOutput values.
// You can construct a concrete instance of `NotificationPolicyPolicyPolicyArrayInput` via:
//
//	NotificationPolicyPolicyPolicyArray{ NotificationPolicyPolicyPolicyArgs{...} }
type NotificationPolicyPolicyPolicyArrayInput interface {
	pulumi.Input

	ToNotificationPolicyPolicyPolicyArrayOutput() NotificationPolicyPolicyPolicyArrayOutput
	ToNotificationPolicyPolicyPolicyArrayOutputWithContext(context.Context) NotificationPolicyPolicyPolicyArrayOutput
}

type NotificationPolicyPolicyPolicyArray []NotificationPolicyPolicyPolicyInput

func (NotificationPolicyPolicyPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyPolicyPolicy)(nil)).Elem()
}

func (i NotificationPolicyPolicyPolicyArray) ToNotificationPolicyPolicyPolicyArrayOutput() NotificationPolicyPolicyPolicyArrayOutput {
	return i.ToNotificationPolicyPolicyPolicyArrayOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyPolicyArray) ToNotificationPolicyPolicyPolicyArrayOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyPolicyArrayOutput)
}

type NotificationPolicyPolicyPolicyOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyPolicy)(nil)).Elem()
}

func (o NotificationPolicyPolicyPolicyOutput) ToNotificationPolicyPolicyPolicyOutput() NotificationPolicyPolicyPolicyOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyOutput) ToNotificationPolicyPolicyPolicyOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyOutput {
	return o
}

// The contact point to route notifications that match this rule to.
func (o NotificationPolicyPolicyPolicyOutput) ContactPoint() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicy) string { return v.ContactPoint }).(pulumi.StringOutput)
}

// Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.
func (o NotificationPolicyPolicyPolicyOutput) Continue() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicy) *bool { return v.Continue }).(pulumi.BoolPtrOutput)
}

// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping.
func (o NotificationPolicyPolicyPolicyOutput) GroupBies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicy) []string { return v.GroupBies }).(pulumi.StringArrayOutput)
}

// Minimum time interval between two notifications for the same group. Default is 5 minutes.
func (o NotificationPolicyPolicyPolicyOutput) GroupInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicy) *string { return v.GroupInterval }).(pulumi.StringPtrOutput)
}

// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
func (o NotificationPolicyPolicyPolicyOutput) GroupWait() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicy) *string { return v.GroupWait }).(pulumi.StringPtrOutput)
}

// Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.
func (o NotificationPolicyPolicyPolicyOutput) Matchers() NotificationPolicyPolicyPolicyMatcherArrayOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicy) []NotificationPolicyPolicyPolicyMatcher { return v.Matchers }).(NotificationPolicyPolicyPolicyMatcherArrayOutput)
}

// A list of mute timing names to apply to alerts that match this policy.
func (o NotificationPolicyPolicyPolicyOutput) MuteTimings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicy) []string { return v.MuteTimings }).(pulumi.StringArrayOutput)
}

// Routing rules for specific label sets.
func (o NotificationPolicyPolicyPolicyOutput) Policies() NotificationPolicyPolicyPolicyPolicyArrayOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicy) []NotificationPolicyPolicyPolicyPolicy { return v.Policies }).(NotificationPolicyPolicyPolicyPolicyArrayOutput)
}

// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
func (o NotificationPolicyPolicyPolicyOutput) RepeatInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicy) *string { return v.RepeatInterval }).(pulumi.StringPtrOutput)
}

type NotificationPolicyPolicyPolicyArrayOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyPolicyPolicy)(nil)).Elem()
}

func (o NotificationPolicyPolicyPolicyArrayOutput) ToNotificationPolicyPolicyPolicyArrayOutput() NotificationPolicyPolicyPolicyArrayOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyArrayOutput) ToNotificationPolicyPolicyPolicyArrayOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyArrayOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyArrayOutput) Index(i pulumi.IntInput) NotificationPolicyPolicyPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationPolicyPolicyPolicy {
		return vs[0].([]NotificationPolicyPolicyPolicy)[vs[1].(int)]
	}).(NotificationPolicyPolicyPolicyOutput)
}

type NotificationPolicyPolicyPolicyMatcher struct {
	Label string `pulumi:"label"`
	Match string `pulumi:"match"`
	Value string `pulumi:"value"`
}

// NotificationPolicyPolicyPolicyMatcherInput is an input type that accepts NotificationPolicyPolicyPolicyMatcherArgs and NotificationPolicyPolicyPolicyMatcherOutput values.
// You can construct a concrete instance of `NotificationPolicyPolicyPolicyMatcherInput` via:
//
//	NotificationPolicyPolicyPolicyMatcherArgs{...}
type NotificationPolicyPolicyPolicyMatcherInput interface {
	pulumi.Input

	ToNotificationPolicyPolicyPolicyMatcherOutput() NotificationPolicyPolicyPolicyMatcherOutput
	ToNotificationPolicyPolicyPolicyMatcherOutputWithContext(context.Context) NotificationPolicyPolicyPolicyMatcherOutput
}

type NotificationPolicyPolicyPolicyMatcherArgs struct {
	Label pulumi.StringInput `pulumi:"label"`
	Match pulumi.StringInput `pulumi:"match"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (NotificationPolicyPolicyPolicyMatcherArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyPolicyMatcher)(nil)).Elem()
}

func (i NotificationPolicyPolicyPolicyMatcherArgs) ToNotificationPolicyPolicyPolicyMatcherOutput() NotificationPolicyPolicyPolicyMatcherOutput {
	return i.ToNotificationPolicyPolicyPolicyMatcherOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyPolicyMatcherArgs) ToNotificationPolicyPolicyPolicyMatcherOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyMatcherOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyPolicyMatcherOutput)
}

// NotificationPolicyPolicyPolicyMatcherArrayInput is an input type that accepts NotificationPolicyPolicyPolicyMatcherArray and NotificationPolicyPolicyPolicyMatcherArrayOutput values.
// You can construct a concrete instance of `NotificationPolicyPolicyPolicyMatcherArrayInput` via:
//
//	NotificationPolicyPolicyPolicyMatcherArray{ NotificationPolicyPolicyPolicyMatcherArgs{...} }
type NotificationPolicyPolicyPolicyMatcherArrayInput interface {
	pulumi.Input

	ToNotificationPolicyPolicyPolicyMatcherArrayOutput() NotificationPolicyPolicyPolicyMatcherArrayOutput
	ToNotificationPolicyPolicyPolicyMatcherArrayOutputWithContext(context.Context) NotificationPolicyPolicyPolicyMatcherArrayOutput
}

type NotificationPolicyPolicyPolicyMatcherArray []NotificationPolicyPolicyPolicyMatcherInput

func (NotificationPolicyPolicyPolicyMatcherArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyPolicyPolicyMatcher)(nil)).Elem()
}

func (i NotificationPolicyPolicyPolicyMatcherArray) ToNotificationPolicyPolicyPolicyMatcherArrayOutput() NotificationPolicyPolicyPolicyMatcherArrayOutput {
	return i.ToNotificationPolicyPolicyPolicyMatcherArrayOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyPolicyMatcherArray) ToNotificationPolicyPolicyPolicyMatcherArrayOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyMatcherArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyPolicyMatcherArrayOutput)
}

type NotificationPolicyPolicyPolicyMatcherOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyPolicyMatcherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyPolicyMatcher)(nil)).Elem()
}

func (o NotificationPolicyPolicyPolicyMatcherOutput) ToNotificationPolicyPolicyPolicyMatcherOutput() NotificationPolicyPolicyPolicyMatcherOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyMatcherOutput) ToNotificationPolicyPolicyPolicyMatcherOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyMatcherOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyMatcherOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyMatcher) string { return v.Label }).(pulumi.StringOutput)
}

func (o NotificationPolicyPolicyPolicyMatcherOutput) Match() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyMatcher) string { return v.Match }).(pulumi.StringOutput)
}

func (o NotificationPolicyPolicyPolicyMatcherOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyMatcher) string { return v.Value }).(pulumi.StringOutput)
}

type NotificationPolicyPolicyPolicyMatcherArrayOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyPolicyMatcherArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyPolicyPolicyMatcher)(nil)).Elem()
}

func (o NotificationPolicyPolicyPolicyMatcherArrayOutput) ToNotificationPolicyPolicyPolicyMatcherArrayOutput() NotificationPolicyPolicyPolicyMatcherArrayOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyMatcherArrayOutput) ToNotificationPolicyPolicyPolicyMatcherArrayOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyMatcherArrayOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyMatcherArrayOutput) Index(i pulumi.IntInput) NotificationPolicyPolicyPolicyMatcherOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationPolicyPolicyPolicyMatcher {
		return vs[0].([]NotificationPolicyPolicyPolicyMatcher)[vs[1].(int)]
	}).(NotificationPolicyPolicyPolicyMatcherOutput)
}

type NotificationPolicyPolicyPolicyPolicy struct {
	// The contact point to route notifications that match this rule to.
	ContactPoint string `pulumi:"contactPoint"`
	// Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.
	Continue *bool `pulumi:"continue"`
	// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping.
	GroupBies []string `pulumi:"groupBies"`
	// Minimum time interval between two notifications for the same group. Default is 5 minutes.
	GroupInterval *string `pulumi:"groupInterval"`
	// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
	GroupWait *string `pulumi:"groupWait"`
	// Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.
	Matchers []NotificationPolicyPolicyPolicyPolicyMatcher `pulumi:"matchers"`
	// A list of mute timing names to apply to alerts that match this policy.
	MuteTimings []string `pulumi:"muteTimings"`
	// Routing rules for specific label sets.
	Policies []NotificationPolicyPolicyPolicyPolicyPolicy `pulumi:"policies"`
	// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
	RepeatInterval *string `pulumi:"repeatInterval"`
}

// NotificationPolicyPolicyPolicyPolicyInput is an input type that accepts NotificationPolicyPolicyPolicyPolicyArgs and NotificationPolicyPolicyPolicyPolicyOutput values.
// You can construct a concrete instance of `NotificationPolicyPolicyPolicyPolicyInput` via:
//
//	NotificationPolicyPolicyPolicyPolicyArgs{...}
type NotificationPolicyPolicyPolicyPolicyInput interface {
	pulumi.Input

	ToNotificationPolicyPolicyPolicyPolicyOutput() NotificationPolicyPolicyPolicyPolicyOutput
	ToNotificationPolicyPolicyPolicyPolicyOutputWithContext(context.Context) NotificationPolicyPolicyPolicyPolicyOutput
}

type NotificationPolicyPolicyPolicyPolicyArgs struct {
	// The contact point to route notifications that match this rule to.
	ContactPoint pulumi.StringInput `pulumi:"contactPoint"`
	// Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.
	Continue pulumi.BoolPtrInput `pulumi:"continue"`
	// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping.
	GroupBies pulumi.StringArrayInput `pulumi:"groupBies"`
	// Minimum time interval between two notifications for the same group. Default is 5 minutes.
	GroupInterval pulumi.StringPtrInput `pulumi:"groupInterval"`
	// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
	GroupWait pulumi.StringPtrInput `pulumi:"groupWait"`
	// Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.
	Matchers NotificationPolicyPolicyPolicyPolicyMatcherArrayInput `pulumi:"matchers"`
	// A list of mute timing names to apply to alerts that match this policy.
	MuteTimings pulumi.StringArrayInput `pulumi:"muteTimings"`
	// Routing rules for specific label sets.
	Policies NotificationPolicyPolicyPolicyPolicyPolicyArrayInput `pulumi:"policies"`
	// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
	RepeatInterval pulumi.StringPtrInput `pulumi:"repeatInterval"`
}

func (NotificationPolicyPolicyPolicyPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicy)(nil)).Elem()
}

func (i NotificationPolicyPolicyPolicyPolicyArgs) ToNotificationPolicyPolicyPolicyPolicyOutput() NotificationPolicyPolicyPolicyPolicyOutput {
	return i.ToNotificationPolicyPolicyPolicyPolicyOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyPolicyPolicyArgs) ToNotificationPolicyPolicyPolicyPolicyOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyPolicyPolicyOutput)
}

// NotificationPolicyPolicyPolicyPolicyArrayInput is an input type that accepts NotificationPolicyPolicyPolicyPolicyArray and NotificationPolicyPolicyPolicyPolicyArrayOutput values.
// You can construct a concrete instance of `NotificationPolicyPolicyPolicyPolicyArrayInput` via:
//
//	NotificationPolicyPolicyPolicyPolicyArray{ NotificationPolicyPolicyPolicyPolicyArgs{...} }
type NotificationPolicyPolicyPolicyPolicyArrayInput interface {
	pulumi.Input

	ToNotificationPolicyPolicyPolicyPolicyArrayOutput() NotificationPolicyPolicyPolicyPolicyArrayOutput
	ToNotificationPolicyPolicyPolicyPolicyArrayOutputWithContext(context.Context) NotificationPolicyPolicyPolicyPolicyArrayOutput
}

type NotificationPolicyPolicyPolicyPolicyArray []NotificationPolicyPolicyPolicyPolicyInput

func (NotificationPolicyPolicyPolicyPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyPolicyPolicyPolicy)(nil)).Elem()
}

func (i NotificationPolicyPolicyPolicyPolicyArray) ToNotificationPolicyPolicyPolicyPolicyArrayOutput() NotificationPolicyPolicyPolicyPolicyArrayOutput {
	return i.ToNotificationPolicyPolicyPolicyPolicyArrayOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyPolicyPolicyArray) ToNotificationPolicyPolicyPolicyPolicyArrayOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyPolicyPolicyArrayOutput)
}

type NotificationPolicyPolicyPolicyPolicyOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyPolicyPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicy)(nil)).Elem()
}

func (o NotificationPolicyPolicyPolicyPolicyOutput) ToNotificationPolicyPolicyPolicyPolicyOutput() NotificationPolicyPolicyPolicyPolicyOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyPolicyOutput) ToNotificationPolicyPolicyPolicyPolicyOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyOutput {
	return o
}

// The contact point to route notifications that match this rule to.
func (o NotificationPolicyPolicyPolicyPolicyOutput) ContactPoint() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicy) string { return v.ContactPoint }).(pulumi.StringOutput)
}

// Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.
func (o NotificationPolicyPolicyPolicyPolicyOutput) Continue() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicy) *bool { return v.Continue }).(pulumi.BoolPtrOutput)
}

// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping.
func (o NotificationPolicyPolicyPolicyPolicyOutput) GroupBies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicy) []string { return v.GroupBies }).(pulumi.StringArrayOutput)
}

// Minimum time interval between two notifications for the same group. Default is 5 minutes.
func (o NotificationPolicyPolicyPolicyPolicyOutput) GroupInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicy) *string { return v.GroupInterval }).(pulumi.StringPtrOutput)
}

// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
func (o NotificationPolicyPolicyPolicyPolicyOutput) GroupWait() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicy) *string { return v.GroupWait }).(pulumi.StringPtrOutput)
}

// Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.
func (o NotificationPolicyPolicyPolicyPolicyOutput) Matchers() NotificationPolicyPolicyPolicyPolicyMatcherArrayOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicy) []NotificationPolicyPolicyPolicyPolicyMatcher {
		return v.Matchers
	}).(NotificationPolicyPolicyPolicyPolicyMatcherArrayOutput)
}

// A list of mute timing names to apply to alerts that match this policy.
func (o NotificationPolicyPolicyPolicyPolicyOutput) MuteTimings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicy) []string { return v.MuteTimings }).(pulumi.StringArrayOutput)
}

// Routing rules for specific label sets.
func (o NotificationPolicyPolicyPolicyPolicyOutput) Policies() NotificationPolicyPolicyPolicyPolicyPolicyArrayOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicy) []NotificationPolicyPolicyPolicyPolicyPolicy {
		return v.Policies
	}).(NotificationPolicyPolicyPolicyPolicyPolicyArrayOutput)
}

// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
func (o NotificationPolicyPolicyPolicyPolicyOutput) RepeatInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicy) *string { return v.RepeatInterval }).(pulumi.StringPtrOutput)
}

type NotificationPolicyPolicyPolicyPolicyArrayOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyPolicyPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyPolicyPolicyPolicy)(nil)).Elem()
}

func (o NotificationPolicyPolicyPolicyPolicyArrayOutput) ToNotificationPolicyPolicyPolicyPolicyArrayOutput() NotificationPolicyPolicyPolicyPolicyArrayOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyPolicyArrayOutput) ToNotificationPolicyPolicyPolicyPolicyArrayOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyArrayOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyPolicyArrayOutput) Index(i pulumi.IntInput) NotificationPolicyPolicyPolicyPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationPolicyPolicyPolicyPolicy {
		return vs[0].([]NotificationPolicyPolicyPolicyPolicy)[vs[1].(int)]
	}).(NotificationPolicyPolicyPolicyPolicyOutput)
}

type NotificationPolicyPolicyPolicyPolicyMatcher struct {
	Label string `pulumi:"label"`
	Match string `pulumi:"match"`
	Value string `pulumi:"value"`
}

// NotificationPolicyPolicyPolicyPolicyMatcherInput is an input type that accepts NotificationPolicyPolicyPolicyPolicyMatcherArgs and NotificationPolicyPolicyPolicyPolicyMatcherOutput values.
// You can construct a concrete instance of `NotificationPolicyPolicyPolicyPolicyMatcherInput` via:
//
//	NotificationPolicyPolicyPolicyPolicyMatcherArgs{...}
type NotificationPolicyPolicyPolicyPolicyMatcherInput interface {
	pulumi.Input

	ToNotificationPolicyPolicyPolicyPolicyMatcherOutput() NotificationPolicyPolicyPolicyPolicyMatcherOutput
	ToNotificationPolicyPolicyPolicyPolicyMatcherOutputWithContext(context.Context) NotificationPolicyPolicyPolicyPolicyMatcherOutput
}

type NotificationPolicyPolicyPolicyPolicyMatcherArgs struct {
	Label pulumi.StringInput `pulumi:"label"`
	Match pulumi.StringInput `pulumi:"match"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (NotificationPolicyPolicyPolicyPolicyMatcherArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicyMatcher)(nil)).Elem()
}

func (i NotificationPolicyPolicyPolicyPolicyMatcherArgs) ToNotificationPolicyPolicyPolicyPolicyMatcherOutput() NotificationPolicyPolicyPolicyPolicyMatcherOutput {
	return i.ToNotificationPolicyPolicyPolicyPolicyMatcherOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyPolicyPolicyMatcherArgs) ToNotificationPolicyPolicyPolicyPolicyMatcherOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyMatcherOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyPolicyPolicyMatcherOutput)
}

// NotificationPolicyPolicyPolicyPolicyMatcherArrayInput is an input type that accepts NotificationPolicyPolicyPolicyPolicyMatcherArray and NotificationPolicyPolicyPolicyPolicyMatcherArrayOutput values.
// You can construct a concrete instance of `NotificationPolicyPolicyPolicyPolicyMatcherArrayInput` via:
//
//	NotificationPolicyPolicyPolicyPolicyMatcherArray{ NotificationPolicyPolicyPolicyPolicyMatcherArgs{...} }
type NotificationPolicyPolicyPolicyPolicyMatcherArrayInput interface {
	pulumi.Input

	ToNotificationPolicyPolicyPolicyPolicyMatcherArrayOutput() NotificationPolicyPolicyPolicyPolicyMatcherArrayOutput
	ToNotificationPolicyPolicyPolicyPolicyMatcherArrayOutputWithContext(context.Context) NotificationPolicyPolicyPolicyPolicyMatcherArrayOutput
}

type NotificationPolicyPolicyPolicyPolicyMatcherArray []NotificationPolicyPolicyPolicyPolicyMatcherInput

func (NotificationPolicyPolicyPolicyPolicyMatcherArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyPolicyPolicyPolicyMatcher)(nil)).Elem()
}

func (i NotificationPolicyPolicyPolicyPolicyMatcherArray) ToNotificationPolicyPolicyPolicyPolicyMatcherArrayOutput() NotificationPolicyPolicyPolicyPolicyMatcherArrayOutput {
	return i.ToNotificationPolicyPolicyPolicyPolicyMatcherArrayOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyPolicyPolicyMatcherArray) ToNotificationPolicyPolicyPolicyPolicyMatcherArrayOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyMatcherArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyPolicyPolicyMatcherArrayOutput)
}

type NotificationPolicyPolicyPolicyPolicyMatcherOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyPolicyPolicyMatcherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicyMatcher)(nil)).Elem()
}

func (o NotificationPolicyPolicyPolicyPolicyMatcherOutput) ToNotificationPolicyPolicyPolicyPolicyMatcherOutput() NotificationPolicyPolicyPolicyPolicyMatcherOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyPolicyMatcherOutput) ToNotificationPolicyPolicyPolicyPolicyMatcherOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyMatcherOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyPolicyMatcherOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicyMatcher) string { return v.Label }).(pulumi.StringOutput)
}

func (o NotificationPolicyPolicyPolicyPolicyMatcherOutput) Match() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicyMatcher) string { return v.Match }).(pulumi.StringOutput)
}

func (o NotificationPolicyPolicyPolicyPolicyMatcherOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicyMatcher) string { return v.Value }).(pulumi.StringOutput)
}

type NotificationPolicyPolicyPolicyPolicyMatcherArrayOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyPolicyPolicyMatcherArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyPolicyPolicyPolicyMatcher)(nil)).Elem()
}

func (o NotificationPolicyPolicyPolicyPolicyMatcherArrayOutput) ToNotificationPolicyPolicyPolicyPolicyMatcherArrayOutput() NotificationPolicyPolicyPolicyPolicyMatcherArrayOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyPolicyMatcherArrayOutput) ToNotificationPolicyPolicyPolicyPolicyMatcherArrayOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyMatcherArrayOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyPolicyMatcherArrayOutput) Index(i pulumi.IntInput) NotificationPolicyPolicyPolicyPolicyMatcherOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationPolicyPolicyPolicyPolicyMatcher {
		return vs[0].([]NotificationPolicyPolicyPolicyPolicyMatcher)[vs[1].(int)]
	}).(NotificationPolicyPolicyPolicyPolicyMatcherOutput)
}

type NotificationPolicyPolicyPolicyPolicyPolicy struct {
	// The contact point to route notifications that match this rule to.
	ContactPoint string `pulumi:"contactPoint"`
	// Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.
	Continue *bool `pulumi:"continue"`
	// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping.
	GroupBies []string `pulumi:"groupBies"`
	// Minimum time interval between two notifications for the same group. Default is 5 minutes.
	GroupInterval *string `pulumi:"groupInterval"`
	// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
	GroupWait *string `pulumi:"groupWait"`
	// Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.
	Matchers []NotificationPolicyPolicyPolicyPolicyPolicyMatcher `pulumi:"matchers"`
	// A list of mute timing names to apply to alerts that match this policy.
	MuteTimings []string `pulumi:"muteTimings"`
	// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
	RepeatInterval *string `pulumi:"repeatInterval"`
}

// NotificationPolicyPolicyPolicyPolicyPolicyInput is an input type that accepts NotificationPolicyPolicyPolicyPolicyPolicyArgs and NotificationPolicyPolicyPolicyPolicyPolicyOutput values.
// You can construct a concrete instance of `NotificationPolicyPolicyPolicyPolicyPolicyInput` via:
//
//	NotificationPolicyPolicyPolicyPolicyPolicyArgs{...}
type NotificationPolicyPolicyPolicyPolicyPolicyInput interface {
	pulumi.Input

	ToNotificationPolicyPolicyPolicyPolicyPolicyOutput() NotificationPolicyPolicyPolicyPolicyPolicyOutput
	ToNotificationPolicyPolicyPolicyPolicyPolicyOutputWithContext(context.Context) NotificationPolicyPolicyPolicyPolicyPolicyOutput
}

type NotificationPolicyPolicyPolicyPolicyPolicyArgs struct {
	// The contact point to route notifications that match this rule to.
	ContactPoint pulumi.StringInput `pulumi:"contactPoint"`
	// Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.
	Continue pulumi.BoolPtrInput `pulumi:"continue"`
	// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping.
	GroupBies pulumi.StringArrayInput `pulumi:"groupBies"`
	// Minimum time interval between two notifications for the same group. Default is 5 minutes.
	GroupInterval pulumi.StringPtrInput `pulumi:"groupInterval"`
	// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
	GroupWait pulumi.StringPtrInput `pulumi:"groupWait"`
	// Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.
	Matchers NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayInput `pulumi:"matchers"`
	// A list of mute timing names to apply to alerts that match this policy.
	MuteTimings pulumi.StringArrayInput `pulumi:"muteTimings"`
	// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
	RepeatInterval pulumi.StringPtrInput `pulumi:"repeatInterval"`
}

func (NotificationPolicyPolicyPolicyPolicyPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicyPolicy)(nil)).Elem()
}

func (i NotificationPolicyPolicyPolicyPolicyPolicyArgs) ToNotificationPolicyPolicyPolicyPolicyPolicyOutput() NotificationPolicyPolicyPolicyPolicyPolicyOutput {
	return i.ToNotificationPolicyPolicyPolicyPolicyPolicyOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyPolicyPolicyPolicyArgs) ToNotificationPolicyPolicyPolicyPolicyPolicyOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyPolicyPolicyPolicyOutput)
}

// NotificationPolicyPolicyPolicyPolicyPolicyArrayInput is an input type that accepts NotificationPolicyPolicyPolicyPolicyPolicyArray and NotificationPolicyPolicyPolicyPolicyPolicyArrayOutput values.
// You can construct a concrete instance of `NotificationPolicyPolicyPolicyPolicyPolicyArrayInput` via:
//
//	NotificationPolicyPolicyPolicyPolicyPolicyArray{ NotificationPolicyPolicyPolicyPolicyPolicyArgs{...} }
type NotificationPolicyPolicyPolicyPolicyPolicyArrayInput interface {
	pulumi.Input

	ToNotificationPolicyPolicyPolicyPolicyPolicyArrayOutput() NotificationPolicyPolicyPolicyPolicyPolicyArrayOutput
	ToNotificationPolicyPolicyPolicyPolicyPolicyArrayOutputWithContext(context.Context) NotificationPolicyPolicyPolicyPolicyPolicyArrayOutput
}

type NotificationPolicyPolicyPolicyPolicyPolicyArray []NotificationPolicyPolicyPolicyPolicyPolicyInput

func (NotificationPolicyPolicyPolicyPolicyPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyPolicyPolicyPolicyPolicy)(nil)).Elem()
}

func (i NotificationPolicyPolicyPolicyPolicyPolicyArray) ToNotificationPolicyPolicyPolicyPolicyPolicyArrayOutput() NotificationPolicyPolicyPolicyPolicyPolicyArrayOutput {
	return i.ToNotificationPolicyPolicyPolicyPolicyPolicyArrayOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyPolicyPolicyPolicyArray) ToNotificationPolicyPolicyPolicyPolicyPolicyArrayOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyPolicyPolicyPolicyArrayOutput)
}

type NotificationPolicyPolicyPolicyPolicyPolicyOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyPolicyPolicyPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicyPolicy)(nil)).Elem()
}

func (o NotificationPolicyPolicyPolicyPolicyPolicyOutput) ToNotificationPolicyPolicyPolicyPolicyPolicyOutput() NotificationPolicyPolicyPolicyPolicyPolicyOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyPolicyPolicyOutput) ToNotificationPolicyPolicyPolicyPolicyPolicyOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyPolicyOutput {
	return o
}

// The contact point to route notifications that match this rule to.
func (o NotificationPolicyPolicyPolicyPolicyPolicyOutput) ContactPoint() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicyPolicy) string { return v.ContactPoint }).(pulumi.StringOutput)
}

// Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.
func (o NotificationPolicyPolicyPolicyPolicyPolicyOutput) Continue() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicyPolicy) *bool { return v.Continue }).(pulumi.BoolPtrOutput)
}

// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping.
func (o NotificationPolicyPolicyPolicyPolicyPolicyOutput) GroupBies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicyPolicy) []string { return v.GroupBies }).(pulumi.StringArrayOutput)
}

// Minimum time interval between two notifications for the same group. Default is 5 minutes.
func (o NotificationPolicyPolicyPolicyPolicyPolicyOutput) GroupInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicyPolicy) *string { return v.GroupInterval }).(pulumi.StringPtrOutput)
}

// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
func (o NotificationPolicyPolicyPolicyPolicyPolicyOutput) GroupWait() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicyPolicy) *string { return v.GroupWait }).(pulumi.StringPtrOutput)
}

// Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.
func (o NotificationPolicyPolicyPolicyPolicyPolicyOutput) Matchers() NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicyPolicy) []NotificationPolicyPolicyPolicyPolicyPolicyMatcher {
		return v.Matchers
	}).(NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput)
}

// A list of mute timing names to apply to alerts that match this policy.
func (o NotificationPolicyPolicyPolicyPolicyPolicyOutput) MuteTimings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicyPolicy) []string { return v.MuteTimings }).(pulumi.StringArrayOutput)
}

// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
func (o NotificationPolicyPolicyPolicyPolicyPolicyOutput) RepeatInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicyPolicy) *string { return v.RepeatInterval }).(pulumi.StringPtrOutput)
}

type NotificationPolicyPolicyPolicyPolicyPolicyArrayOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyPolicyPolicyPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyPolicyPolicyPolicyPolicy)(nil)).Elem()
}

func (o NotificationPolicyPolicyPolicyPolicyPolicyArrayOutput) ToNotificationPolicyPolicyPolicyPolicyPolicyArrayOutput() NotificationPolicyPolicyPolicyPolicyPolicyArrayOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyPolicyPolicyArrayOutput) ToNotificationPolicyPolicyPolicyPolicyPolicyArrayOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyPolicyArrayOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyPolicyPolicyArrayOutput) Index(i pulumi.IntInput) NotificationPolicyPolicyPolicyPolicyPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationPolicyPolicyPolicyPolicyPolicy {
		return vs[0].([]NotificationPolicyPolicyPolicyPolicyPolicy)[vs[1].(int)]
	}).(NotificationPolicyPolicyPolicyPolicyPolicyOutput)
}

type NotificationPolicyPolicyPolicyPolicyPolicyMatcher struct {
	Label string `pulumi:"label"`
	Match string `pulumi:"match"`
	Value string `pulumi:"value"`
}

// NotificationPolicyPolicyPolicyPolicyPolicyMatcherInput is an input type that accepts NotificationPolicyPolicyPolicyPolicyPolicyMatcherArgs and NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput values.
// You can construct a concrete instance of `NotificationPolicyPolicyPolicyPolicyPolicyMatcherInput` via:
//
//	NotificationPolicyPolicyPolicyPolicyPolicyMatcherArgs{...}
type NotificationPolicyPolicyPolicyPolicyPolicyMatcherInput interface {
	pulumi.Input

	ToNotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput() NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput
	ToNotificationPolicyPolicyPolicyPolicyPolicyMatcherOutputWithContext(context.Context) NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput
}

type NotificationPolicyPolicyPolicyPolicyPolicyMatcherArgs struct {
	Label pulumi.StringInput `pulumi:"label"`
	Match pulumi.StringInput `pulumi:"match"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (NotificationPolicyPolicyPolicyPolicyPolicyMatcherArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicyPolicyMatcher)(nil)).Elem()
}

func (i NotificationPolicyPolicyPolicyPolicyPolicyMatcherArgs) ToNotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput() NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput {
	return i.ToNotificationPolicyPolicyPolicyPolicyPolicyMatcherOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyPolicyPolicyPolicyMatcherArgs) ToNotificationPolicyPolicyPolicyPolicyPolicyMatcherOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput)
}

// NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayInput is an input type that accepts NotificationPolicyPolicyPolicyPolicyPolicyMatcherArray and NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput values.
// You can construct a concrete instance of `NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayInput` via:
//
//	NotificationPolicyPolicyPolicyPolicyPolicyMatcherArray{ NotificationPolicyPolicyPolicyPolicyPolicyMatcherArgs{...} }
type NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayInput interface {
	pulumi.Input

	ToNotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput() NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput
	ToNotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutputWithContext(context.Context) NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput
}

type NotificationPolicyPolicyPolicyPolicyPolicyMatcherArray []NotificationPolicyPolicyPolicyPolicyPolicyMatcherInput

func (NotificationPolicyPolicyPolicyPolicyPolicyMatcherArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyPolicyPolicyPolicyPolicyMatcher)(nil)).Elem()
}

func (i NotificationPolicyPolicyPolicyPolicyPolicyMatcherArray) ToNotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput() NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput {
	return i.ToNotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyPolicyPolicyPolicyMatcherArray) ToNotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput)
}

type NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicyPolicyMatcher)(nil)).Elem()
}

func (o NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput) ToNotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput() NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput) ToNotificationPolicyPolicyPolicyPolicyPolicyMatcherOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicyPolicyMatcher) string { return v.Label }).(pulumi.StringOutput)
}

func (o NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput) Match() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicyPolicyMatcher) string { return v.Match }).(pulumi.StringOutput)
}

func (o NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicyPolicyMatcher) string { return v.Value }).(pulumi.StringOutput)
}

type NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyPolicyPolicyPolicyPolicyMatcher)(nil)).Elem()
}

func (o NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput) ToNotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput() NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput) ToNotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput) Index(i pulumi.IntInput) NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationPolicyPolicyPolicyPolicyPolicyMatcher {
		return vs[0].([]NotificationPolicyPolicyPolicyPolicyPolicyMatcher)[vs[1].(int)]
	}).(NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput)
}

type OncallIntegrationDefaultRoute struct {
	// The ID of the escalation chain.
	EscalationChainId *string `pulumi:"escalationChainId"`
	// The ID of this resource.
	Id *string `pulumi:"id"`
	// MS teams-specific settings for a route.
	Msteams *OncallIntegrationDefaultRouteMsteams `pulumi:"msteams"`
	// Slack-specific settings for a route.
	Slack *OncallIntegrationDefaultRouteSlack `pulumi:"slack"`
	// Telegram-specific settings for a route.
	Telegram *OncallIntegrationDefaultRouteTelegram `pulumi:"telegram"`
}

// OncallIntegrationDefaultRouteInput is an input type that accepts OncallIntegrationDefaultRouteArgs and OncallIntegrationDefaultRouteOutput values.
// You can construct a concrete instance of `OncallIntegrationDefaultRouteInput` via:
//
//	OncallIntegrationDefaultRouteArgs{...}
type OncallIntegrationDefaultRouteInput interface {
	pulumi.Input

	ToOncallIntegrationDefaultRouteOutput() OncallIntegrationDefaultRouteOutput
	ToOncallIntegrationDefaultRouteOutputWithContext(context.Context) OncallIntegrationDefaultRouteOutput
}

type OncallIntegrationDefaultRouteArgs struct {
	// The ID of the escalation chain.
	EscalationChainId pulumi.StringPtrInput `pulumi:"escalationChainId"`
	// The ID of this resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// MS teams-specific settings for a route.
	Msteams OncallIntegrationDefaultRouteMsteamsPtrInput `pulumi:"msteams"`
	// Slack-specific settings for a route.
	Slack OncallIntegrationDefaultRouteSlackPtrInput `pulumi:"slack"`
	// Telegram-specific settings for a route.
	Telegram OncallIntegrationDefaultRouteTelegramPtrInput `pulumi:"telegram"`
}

func (OncallIntegrationDefaultRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationDefaultRoute)(nil)).Elem()
}

func (i OncallIntegrationDefaultRouteArgs) ToOncallIntegrationDefaultRouteOutput() OncallIntegrationDefaultRouteOutput {
	return i.ToOncallIntegrationDefaultRouteOutputWithContext(context.Background())
}

func (i OncallIntegrationDefaultRouteArgs) ToOncallIntegrationDefaultRouteOutputWithContext(ctx context.Context) OncallIntegrationDefaultRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationDefaultRouteOutput)
}

func (i OncallIntegrationDefaultRouteArgs) ToOncallIntegrationDefaultRoutePtrOutput() OncallIntegrationDefaultRoutePtrOutput {
	return i.ToOncallIntegrationDefaultRoutePtrOutputWithContext(context.Background())
}

func (i OncallIntegrationDefaultRouteArgs) ToOncallIntegrationDefaultRoutePtrOutputWithContext(ctx context.Context) OncallIntegrationDefaultRoutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationDefaultRouteOutput).ToOncallIntegrationDefaultRoutePtrOutputWithContext(ctx)
}

// OncallIntegrationDefaultRoutePtrInput is an input type that accepts OncallIntegrationDefaultRouteArgs, OncallIntegrationDefaultRoutePtr and OncallIntegrationDefaultRoutePtrOutput values.
// You can construct a concrete instance of `OncallIntegrationDefaultRoutePtrInput` via:
//
//	        OncallIntegrationDefaultRouteArgs{...}
//
//	or:
//
//	        nil
type OncallIntegrationDefaultRoutePtrInput interface {
	pulumi.Input

	ToOncallIntegrationDefaultRoutePtrOutput() OncallIntegrationDefaultRoutePtrOutput
	ToOncallIntegrationDefaultRoutePtrOutputWithContext(context.Context) OncallIntegrationDefaultRoutePtrOutput
}

type oncallIntegrationDefaultRoutePtrType OncallIntegrationDefaultRouteArgs

func OncallIntegrationDefaultRoutePtr(v *OncallIntegrationDefaultRouteArgs) OncallIntegrationDefaultRoutePtrInput {
	return (*oncallIntegrationDefaultRoutePtrType)(v)
}

func (*oncallIntegrationDefaultRoutePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallIntegrationDefaultRoute)(nil)).Elem()
}

func (i *oncallIntegrationDefaultRoutePtrType) ToOncallIntegrationDefaultRoutePtrOutput() OncallIntegrationDefaultRoutePtrOutput {
	return i.ToOncallIntegrationDefaultRoutePtrOutputWithContext(context.Background())
}

func (i *oncallIntegrationDefaultRoutePtrType) ToOncallIntegrationDefaultRoutePtrOutputWithContext(ctx context.Context) OncallIntegrationDefaultRoutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationDefaultRoutePtrOutput)
}

type OncallIntegrationDefaultRouteOutput struct{ *pulumi.OutputState }

func (OncallIntegrationDefaultRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationDefaultRoute)(nil)).Elem()
}

func (o OncallIntegrationDefaultRouteOutput) ToOncallIntegrationDefaultRouteOutput() OncallIntegrationDefaultRouteOutput {
	return o
}

func (o OncallIntegrationDefaultRouteOutput) ToOncallIntegrationDefaultRouteOutputWithContext(ctx context.Context) OncallIntegrationDefaultRouteOutput {
	return o
}

func (o OncallIntegrationDefaultRouteOutput) ToOncallIntegrationDefaultRoutePtrOutput() OncallIntegrationDefaultRoutePtrOutput {
	return o.ToOncallIntegrationDefaultRoutePtrOutputWithContext(context.Background())
}

func (o OncallIntegrationDefaultRouteOutput) ToOncallIntegrationDefaultRoutePtrOutputWithContext(ctx context.Context) OncallIntegrationDefaultRoutePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OncallIntegrationDefaultRoute) *OncallIntegrationDefaultRoute {
		return &v
	}).(OncallIntegrationDefaultRoutePtrOutput)
}

// The ID of the escalation chain.
func (o OncallIntegrationDefaultRouteOutput) EscalationChainId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OncallIntegrationDefaultRoute) *string { return v.EscalationChainId }).(pulumi.StringPtrOutput)
}

// The ID of this resource.
func (o OncallIntegrationDefaultRouteOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OncallIntegrationDefaultRoute) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// MS teams-specific settings for a route.
func (o OncallIntegrationDefaultRouteOutput) Msteams() OncallIntegrationDefaultRouteMsteamsPtrOutput {
	return o.ApplyT(func(v OncallIntegrationDefaultRoute) *OncallIntegrationDefaultRouteMsteams { return v.Msteams }).(OncallIntegrationDefaultRouteMsteamsPtrOutput)
}

// Slack-specific settings for a route.
func (o OncallIntegrationDefaultRouteOutput) Slack() OncallIntegrationDefaultRouteSlackPtrOutput {
	return o.ApplyT(func(v OncallIntegrationDefaultRoute) *OncallIntegrationDefaultRouteSlack { return v.Slack }).(OncallIntegrationDefaultRouteSlackPtrOutput)
}

// Telegram-specific settings for a route.
func (o OncallIntegrationDefaultRouteOutput) Telegram() OncallIntegrationDefaultRouteTelegramPtrOutput {
	return o.ApplyT(func(v OncallIntegrationDefaultRoute) *OncallIntegrationDefaultRouteTelegram { return v.Telegram }).(OncallIntegrationDefaultRouteTelegramPtrOutput)
}

type OncallIntegrationDefaultRoutePtrOutput struct{ *pulumi.OutputState }

func (OncallIntegrationDefaultRoutePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallIntegrationDefaultRoute)(nil)).Elem()
}

func (o OncallIntegrationDefaultRoutePtrOutput) ToOncallIntegrationDefaultRoutePtrOutput() OncallIntegrationDefaultRoutePtrOutput {
	return o
}

func (o OncallIntegrationDefaultRoutePtrOutput) ToOncallIntegrationDefaultRoutePtrOutputWithContext(ctx context.Context) OncallIntegrationDefaultRoutePtrOutput {
	return o
}

func (o OncallIntegrationDefaultRoutePtrOutput) Elem() OncallIntegrationDefaultRouteOutput {
	return o.ApplyT(func(v *OncallIntegrationDefaultRoute) OncallIntegrationDefaultRoute {
		if v != nil {
			return *v
		}
		var ret OncallIntegrationDefaultRoute
		return ret
	}).(OncallIntegrationDefaultRouteOutput)
}

// The ID of the escalation chain.
func (o OncallIntegrationDefaultRoutePtrOutput) EscalationChainId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationDefaultRoute) *string {
		if v == nil {
			return nil
		}
		return v.EscalationChainId
	}).(pulumi.StringPtrOutput)
}

// The ID of this resource.
func (o OncallIntegrationDefaultRoutePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationDefaultRoute) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// MS teams-specific settings for a route.
func (o OncallIntegrationDefaultRoutePtrOutput) Msteams() OncallIntegrationDefaultRouteMsteamsPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationDefaultRoute) *OncallIntegrationDefaultRouteMsteams {
		if v == nil {
			return nil
		}
		return v.Msteams
	}).(OncallIntegrationDefaultRouteMsteamsPtrOutput)
}

// Slack-specific settings for a route.
func (o OncallIntegrationDefaultRoutePtrOutput) Slack() OncallIntegrationDefaultRouteSlackPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationDefaultRoute) *OncallIntegrationDefaultRouteSlack {
		if v == nil {
			return nil
		}
		return v.Slack
	}).(OncallIntegrationDefaultRouteSlackPtrOutput)
}

// Telegram-specific settings for a route.
func (o OncallIntegrationDefaultRoutePtrOutput) Telegram() OncallIntegrationDefaultRouteTelegramPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationDefaultRoute) *OncallIntegrationDefaultRouteTelegram {
		if v == nil {
			return nil
		}
		return v.Telegram
	}).(OncallIntegrationDefaultRouteTelegramPtrOutput)
}

type OncallIntegrationDefaultRouteMsteams struct {
	Enabled *bool `pulumi:"enabled"`
	// The ID of this resource.
	Id *string `pulumi:"id"`
}

// OncallIntegrationDefaultRouteMsteamsInput is an input type that accepts OncallIntegrationDefaultRouteMsteamsArgs and OncallIntegrationDefaultRouteMsteamsOutput values.
// You can construct a concrete instance of `OncallIntegrationDefaultRouteMsteamsInput` via:
//
//	OncallIntegrationDefaultRouteMsteamsArgs{...}
type OncallIntegrationDefaultRouteMsteamsInput interface {
	pulumi.Input

	ToOncallIntegrationDefaultRouteMsteamsOutput() OncallIntegrationDefaultRouteMsteamsOutput
	ToOncallIntegrationDefaultRouteMsteamsOutputWithContext(context.Context) OncallIntegrationDefaultRouteMsteamsOutput
}

type OncallIntegrationDefaultRouteMsteamsArgs struct {
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The ID of this resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (OncallIntegrationDefaultRouteMsteamsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationDefaultRouteMsteams)(nil)).Elem()
}

func (i OncallIntegrationDefaultRouteMsteamsArgs) ToOncallIntegrationDefaultRouteMsteamsOutput() OncallIntegrationDefaultRouteMsteamsOutput {
	return i.ToOncallIntegrationDefaultRouteMsteamsOutputWithContext(context.Background())
}

func (i OncallIntegrationDefaultRouteMsteamsArgs) ToOncallIntegrationDefaultRouteMsteamsOutputWithContext(ctx context.Context) OncallIntegrationDefaultRouteMsteamsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationDefaultRouteMsteamsOutput)
}

func (i OncallIntegrationDefaultRouteMsteamsArgs) ToOncallIntegrationDefaultRouteMsteamsPtrOutput() OncallIntegrationDefaultRouteMsteamsPtrOutput {
	return i.ToOncallIntegrationDefaultRouteMsteamsPtrOutputWithContext(context.Background())
}

func (i OncallIntegrationDefaultRouteMsteamsArgs) ToOncallIntegrationDefaultRouteMsteamsPtrOutputWithContext(ctx context.Context) OncallIntegrationDefaultRouteMsteamsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationDefaultRouteMsteamsOutput).ToOncallIntegrationDefaultRouteMsteamsPtrOutputWithContext(ctx)
}

// OncallIntegrationDefaultRouteMsteamsPtrInput is an input type that accepts OncallIntegrationDefaultRouteMsteamsArgs, OncallIntegrationDefaultRouteMsteamsPtr and OncallIntegrationDefaultRouteMsteamsPtrOutput values.
// You can construct a concrete instance of `OncallIntegrationDefaultRouteMsteamsPtrInput` via:
//
//	        OncallIntegrationDefaultRouteMsteamsArgs{...}
//
//	or:
//
//	        nil
type OncallIntegrationDefaultRouteMsteamsPtrInput interface {
	pulumi.Input

	ToOncallIntegrationDefaultRouteMsteamsPtrOutput() OncallIntegrationDefaultRouteMsteamsPtrOutput
	ToOncallIntegrationDefaultRouteMsteamsPtrOutputWithContext(context.Context) OncallIntegrationDefaultRouteMsteamsPtrOutput
}

type oncallIntegrationDefaultRouteMsteamsPtrType OncallIntegrationDefaultRouteMsteamsArgs

func OncallIntegrationDefaultRouteMsteamsPtr(v *OncallIntegrationDefaultRouteMsteamsArgs) OncallIntegrationDefaultRouteMsteamsPtrInput {
	return (*oncallIntegrationDefaultRouteMsteamsPtrType)(v)
}

func (*oncallIntegrationDefaultRouteMsteamsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallIntegrationDefaultRouteMsteams)(nil)).Elem()
}

func (i *oncallIntegrationDefaultRouteMsteamsPtrType) ToOncallIntegrationDefaultRouteMsteamsPtrOutput() OncallIntegrationDefaultRouteMsteamsPtrOutput {
	return i.ToOncallIntegrationDefaultRouteMsteamsPtrOutputWithContext(context.Background())
}

func (i *oncallIntegrationDefaultRouteMsteamsPtrType) ToOncallIntegrationDefaultRouteMsteamsPtrOutputWithContext(ctx context.Context) OncallIntegrationDefaultRouteMsteamsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationDefaultRouteMsteamsPtrOutput)
}

type OncallIntegrationDefaultRouteMsteamsOutput struct{ *pulumi.OutputState }

func (OncallIntegrationDefaultRouteMsteamsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationDefaultRouteMsteams)(nil)).Elem()
}

func (o OncallIntegrationDefaultRouteMsteamsOutput) ToOncallIntegrationDefaultRouteMsteamsOutput() OncallIntegrationDefaultRouteMsteamsOutput {
	return o
}

func (o OncallIntegrationDefaultRouteMsteamsOutput) ToOncallIntegrationDefaultRouteMsteamsOutputWithContext(ctx context.Context) OncallIntegrationDefaultRouteMsteamsOutput {
	return o
}

func (o OncallIntegrationDefaultRouteMsteamsOutput) ToOncallIntegrationDefaultRouteMsteamsPtrOutput() OncallIntegrationDefaultRouteMsteamsPtrOutput {
	return o.ToOncallIntegrationDefaultRouteMsteamsPtrOutputWithContext(context.Background())
}

func (o OncallIntegrationDefaultRouteMsteamsOutput) ToOncallIntegrationDefaultRouteMsteamsPtrOutputWithContext(ctx context.Context) OncallIntegrationDefaultRouteMsteamsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OncallIntegrationDefaultRouteMsteams) *OncallIntegrationDefaultRouteMsteams {
		return &v
	}).(OncallIntegrationDefaultRouteMsteamsPtrOutput)
}

func (o OncallIntegrationDefaultRouteMsteamsOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OncallIntegrationDefaultRouteMsteams) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The ID of this resource.
func (o OncallIntegrationDefaultRouteMsteamsOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OncallIntegrationDefaultRouteMsteams) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type OncallIntegrationDefaultRouteMsteamsPtrOutput struct{ *pulumi.OutputState }

func (OncallIntegrationDefaultRouteMsteamsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallIntegrationDefaultRouteMsteams)(nil)).Elem()
}

func (o OncallIntegrationDefaultRouteMsteamsPtrOutput) ToOncallIntegrationDefaultRouteMsteamsPtrOutput() OncallIntegrationDefaultRouteMsteamsPtrOutput {
	return o
}

func (o OncallIntegrationDefaultRouteMsteamsPtrOutput) ToOncallIntegrationDefaultRouteMsteamsPtrOutputWithContext(ctx context.Context) OncallIntegrationDefaultRouteMsteamsPtrOutput {
	return o
}

func (o OncallIntegrationDefaultRouteMsteamsPtrOutput) Elem() OncallIntegrationDefaultRouteMsteamsOutput {
	return o.ApplyT(func(v *OncallIntegrationDefaultRouteMsteams) OncallIntegrationDefaultRouteMsteams {
		if v != nil {
			return *v
		}
		var ret OncallIntegrationDefaultRouteMsteams
		return ret
	}).(OncallIntegrationDefaultRouteMsteamsOutput)
}

func (o OncallIntegrationDefaultRouteMsteamsPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationDefaultRouteMsteams) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The ID of this resource.
func (o OncallIntegrationDefaultRouteMsteamsPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationDefaultRouteMsteams) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

type OncallIntegrationDefaultRouteSlack struct {
	ChannelId *string `pulumi:"channelId"`
	Enabled   *bool   `pulumi:"enabled"`
}

// OncallIntegrationDefaultRouteSlackInput is an input type that accepts OncallIntegrationDefaultRouteSlackArgs and OncallIntegrationDefaultRouteSlackOutput values.
// You can construct a concrete instance of `OncallIntegrationDefaultRouteSlackInput` via:
//
//	OncallIntegrationDefaultRouteSlackArgs{...}
type OncallIntegrationDefaultRouteSlackInput interface {
	pulumi.Input

	ToOncallIntegrationDefaultRouteSlackOutput() OncallIntegrationDefaultRouteSlackOutput
	ToOncallIntegrationDefaultRouteSlackOutputWithContext(context.Context) OncallIntegrationDefaultRouteSlackOutput
}

type OncallIntegrationDefaultRouteSlackArgs struct {
	ChannelId pulumi.StringPtrInput `pulumi:"channelId"`
	Enabled   pulumi.BoolPtrInput   `pulumi:"enabled"`
}

func (OncallIntegrationDefaultRouteSlackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationDefaultRouteSlack)(nil)).Elem()
}

func (i OncallIntegrationDefaultRouteSlackArgs) ToOncallIntegrationDefaultRouteSlackOutput() OncallIntegrationDefaultRouteSlackOutput {
	return i.ToOncallIntegrationDefaultRouteSlackOutputWithContext(context.Background())
}

func (i OncallIntegrationDefaultRouteSlackArgs) ToOncallIntegrationDefaultRouteSlackOutputWithContext(ctx context.Context) OncallIntegrationDefaultRouteSlackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationDefaultRouteSlackOutput)
}

func (i OncallIntegrationDefaultRouteSlackArgs) ToOncallIntegrationDefaultRouteSlackPtrOutput() OncallIntegrationDefaultRouteSlackPtrOutput {
	return i.ToOncallIntegrationDefaultRouteSlackPtrOutputWithContext(context.Background())
}

func (i OncallIntegrationDefaultRouteSlackArgs) ToOncallIntegrationDefaultRouteSlackPtrOutputWithContext(ctx context.Context) OncallIntegrationDefaultRouteSlackPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationDefaultRouteSlackOutput).ToOncallIntegrationDefaultRouteSlackPtrOutputWithContext(ctx)
}

// OncallIntegrationDefaultRouteSlackPtrInput is an input type that accepts OncallIntegrationDefaultRouteSlackArgs, OncallIntegrationDefaultRouteSlackPtr and OncallIntegrationDefaultRouteSlackPtrOutput values.
// You can construct a concrete instance of `OncallIntegrationDefaultRouteSlackPtrInput` via:
//
//	        OncallIntegrationDefaultRouteSlackArgs{...}
//
//	or:
//
//	        nil
type OncallIntegrationDefaultRouteSlackPtrInput interface {
	pulumi.Input

	ToOncallIntegrationDefaultRouteSlackPtrOutput() OncallIntegrationDefaultRouteSlackPtrOutput
	ToOncallIntegrationDefaultRouteSlackPtrOutputWithContext(context.Context) OncallIntegrationDefaultRouteSlackPtrOutput
}

type oncallIntegrationDefaultRouteSlackPtrType OncallIntegrationDefaultRouteSlackArgs

func OncallIntegrationDefaultRouteSlackPtr(v *OncallIntegrationDefaultRouteSlackArgs) OncallIntegrationDefaultRouteSlackPtrInput {
	return (*oncallIntegrationDefaultRouteSlackPtrType)(v)
}

func (*oncallIntegrationDefaultRouteSlackPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallIntegrationDefaultRouteSlack)(nil)).Elem()
}

func (i *oncallIntegrationDefaultRouteSlackPtrType) ToOncallIntegrationDefaultRouteSlackPtrOutput() OncallIntegrationDefaultRouteSlackPtrOutput {
	return i.ToOncallIntegrationDefaultRouteSlackPtrOutputWithContext(context.Background())
}

func (i *oncallIntegrationDefaultRouteSlackPtrType) ToOncallIntegrationDefaultRouteSlackPtrOutputWithContext(ctx context.Context) OncallIntegrationDefaultRouteSlackPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationDefaultRouteSlackPtrOutput)
}

type OncallIntegrationDefaultRouteSlackOutput struct{ *pulumi.OutputState }

func (OncallIntegrationDefaultRouteSlackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationDefaultRouteSlack)(nil)).Elem()
}

func (o OncallIntegrationDefaultRouteSlackOutput) ToOncallIntegrationDefaultRouteSlackOutput() OncallIntegrationDefaultRouteSlackOutput {
	return o
}

func (o OncallIntegrationDefaultRouteSlackOutput) ToOncallIntegrationDefaultRouteSlackOutputWithContext(ctx context.Context) OncallIntegrationDefaultRouteSlackOutput {
	return o
}

func (o OncallIntegrationDefaultRouteSlackOutput) ToOncallIntegrationDefaultRouteSlackPtrOutput() OncallIntegrationDefaultRouteSlackPtrOutput {
	return o.ToOncallIntegrationDefaultRouteSlackPtrOutputWithContext(context.Background())
}

func (o OncallIntegrationDefaultRouteSlackOutput) ToOncallIntegrationDefaultRouteSlackPtrOutputWithContext(ctx context.Context) OncallIntegrationDefaultRouteSlackPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OncallIntegrationDefaultRouteSlack) *OncallIntegrationDefaultRouteSlack {
		return &v
	}).(OncallIntegrationDefaultRouteSlackPtrOutput)
}

func (o OncallIntegrationDefaultRouteSlackOutput) ChannelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OncallIntegrationDefaultRouteSlack) *string { return v.ChannelId }).(pulumi.StringPtrOutput)
}

func (o OncallIntegrationDefaultRouteSlackOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OncallIntegrationDefaultRouteSlack) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type OncallIntegrationDefaultRouteSlackPtrOutput struct{ *pulumi.OutputState }

func (OncallIntegrationDefaultRouteSlackPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallIntegrationDefaultRouteSlack)(nil)).Elem()
}

func (o OncallIntegrationDefaultRouteSlackPtrOutput) ToOncallIntegrationDefaultRouteSlackPtrOutput() OncallIntegrationDefaultRouteSlackPtrOutput {
	return o
}

func (o OncallIntegrationDefaultRouteSlackPtrOutput) ToOncallIntegrationDefaultRouteSlackPtrOutputWithContext(ctx context.Context) OncallIntegrationDefaultRouteSlackPtrOutput {
	return o
}

func (o OncallIntegrationDefaultRouteSlackPtrOutput) Elem() OncallIntegrationDefaultRouteSlackOutput {
	return o.ApplyT(func(v *OncallIntegrationDefaultRouteSlack) OncallIntegrationDefaultRouteSlack {
		if v != nil {
			return *v
		}
		var ret OncallIntegrationDefaultRouteSlack
		return ret
	}).(OncallIntegrationDefaultRouteSlackOutput)
}

func (o OncallIntegrationDefaultRouteSlackPtrOutput) ChannelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationDefaultRouteSlack) *string {
		if v == nil {
			return nil
		}
		return v.ChannelId
	}).(pulumi.StringPtrOutput)
}

func (o OncallIntegrationDefaultRouteSlackPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationDefaultRouteSlack) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type OncallIntegrationDefaultRouteTelegram struct {
	Enabled *bool `pulumi:"enabled"`
	// The ID of this resource.
	Id *string `pulumi:"id"`
}

// OncallIntegrationDefaultRouteTelegramInput is an input type that accepts OncallIntegrationDefaultRouteTelegramArgs and OncallIntegrationDefaultRouteTelegramOutput values.
// You can construct a concrete instance of `OncallIntegrationDefaultRouteTelegramInput` via:
//
//	OncallIntegrationDefaultRouteTelegramArgs{...}
type OncallIntegrationDefaultRouteTelegramInput interface {
	pulumi.Input

	ToOncallIntegrationDefaultRouteTelegramOutput() OncallIntegrationDefaultRouteTelegramOutput
	ToOncallIntegrationDefaultRouteTelegramOutputWithContext(context.Context) OncallIntegrationDefaultRouteTelegramOutput
}

type OncallIntegrationDefaultRouteTelegramArgs struct {
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The ID of this resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (OncallIntegrationDefaultRouteTelegramArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationDefaultRouteTelegram)(nil)).Elem()
}

func (i OncallIntegrationDefaultRouteTelegramArgs) ToOncallIntegrationDefaultRouteTelegramOutput() OncallIntegrationDefaultRouteTelegramOutput {
	return i.ToOncallIntegrationDefaultRouteTelegramOutputWithContext(context.Background())
}

func (i OncallIntegrationDefaultRouteTelegramArgs) ToOncallIntegrationDefaultRouteTelegramOutputWithContext(ctx context.Context) OncallIntegrationDefaultRouteTelegramOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationDefaultRouteTelegramOutput)
}

func (i OncallIntegrationDefaultRouteTelegramArgs) ToOncallIntegrationDefaultRouteTelegramPtrOutput() OncallIntegrationDefaultRouteTelegramPtrOutput {
	return i.ToOncallIntegrationDefaultRouteTelegramPtrOutputWithContext(context.Background())
}

func (i OncallIntegrationDefaultRouteTelegramArgs) ToOncallIntegrationDefaultRouteTelegramPtrOutputWithContext(ctx context.Context) OncallIntegrationDefaultRouteTelegramPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationDefaultRouteTelegramOutput).ToOncallIntegrationDefaultRouteTelegramPtrOutputWithContext(ctx)
}

// OncallIntegrationDefaultRouteTelegramPtrInput is an input type that accepts OncallIntegrationDefaultRouteTelegramArgs, OncallIntegrationDefaultRouteTelegramPtr and OncallIntegrationDefaultRouteTelegramPtrOutput values.
// You can construct a concrete instance of `OncallIntegrationDefaultRouteTelegramPtrInput` via:
//
//	        OncallIntegrationDefaultRouteTelegramArgs{...}
//
//	or:
//
//	        nil
type OncallIntegrationDefaultRouteTelegramPtrInput interface {
	pulumi.Input

	ToOncallIntegrationDefaultRouteTelegramPtrOutput() OncallIntegrationDefaultRouteTelegramPtrOutput
	ToOncallIntegrationDefaultRouteTelegramPtrOutputWithContext(context.Context) OncallIntegrationDefaultRouteTelegramPtrOutput
}

type oncallIntegrationDefaultRouteTelegramPtrType OncallIntegrationDefaultRouteTelegramArgs

func OncallIntegrationDefaultRouteTelegramPtr(v *OncallIntegrationDefaultRouteTelegramArgs) OncallIntegrationDefaultRouteTelegramPtrInput {
	return (*oncallIntegrationDefaultRouteTelegramPtrType)(v)
}

func (*oncallIntegrationDefaultRouteTelegramPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallIntegrationDefaultRouteTelegram)(nil)).Elem()
}

func (i *oncallIntegrationDefaultRouteTelegramPtrType) ToOncallIntegrationDefaultRouteTelegramPtrOutput() OncallIntegrationDefaultRouteTelegramPtrOutput {
	return i.ToOncallIntegrationDefaultRouteTelegramPtrOutputWithContext(context.Background())
}

func (i *oncallIntegrationDefaultRouteTelegramPtrType) ToOncallIntegrationDefaultRouteTelegramPtrOutputWithContext(ctx context.Context) OncallIntegrationDefaultRouteTelegramPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationDefaultRouteTelegramPtrOutput)
}

type OncallIntegrationDefaultRouteTelegramOutput struct{ *pulumi.OutputState }

func (OncallIntegrationDefaultRouteTelegramOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationDefaultRouteTelegram)(nil)).Elem()
}

func (o OncallIntegrationDefaultRouteTelegramOutput) ToOncallIntegrationDefaultRouteTelegramOutput() OncallIntegrationDefaultRouteTelegramOutput {
	return o
}

func (o OncallIntegrationDefaultRouteTelegramOutput) ToOncallIntegrationDefaultRouteTelegramOutputWithContext(ctx context.Context) OncallIntegrationDefaultRouteTelegramOutput {
	return o
}

func (o OncallIntegrationDefaultRouteTelegramOutput) ToOncallIntegrationDefaultRouteTelegramPtrOutput() OncallIntegrationDefaultRouteTelegramPtrOutput {
	return o.ToOncallIntegrationDefaultRouteTelegramPtrOutputWithContext(context.Background())
}

func (o OncallIntegrationDefaultRouteTelegramOutput) ToOncallIntegrationDefaultRouteTelegramPtrOutputWithContext(ctx context.Context) OncallIntegrationDefaultRouteTelegramPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OncallIntegrationDefaultRouteTelegram) *OncallIntegrationDefaultRouteTelegram {
		return &v
	}).(OncallIntegrationDefaultRouteTelegramPtrOutput)
}

func (o OncallIntegrationDefaultRouteTelegramOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OncallIntegrationDefaultRouteTelegram) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The ID of this resource.
func (o OncallIntegrationDefaultRouteTelegramOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OncallIntegrationDefaultRouteTelegram) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type OncallIntegrationDefaultRouteTelegramPtrOutput struct{ *pulumi.OutputState }

func (OncallIntegrationDefaultRouteTelegramPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallIntegrationDefaultRouteTelegram)(nil)).Elem()
}

func (o OncallIntegrationDefaultRouteTelegramPtrOutput) ToOncallIntegrationDefaultRouteTelegramPtrOutput() OncallIntegrationDefaultRouteTelegramPtrOutput {
	return o
}

func (o OncallIntegrationDefaultRouteTelegramPtrOutput) ToOncallIntegrationDefaultRouteTelegramPtrOutputWithContext(ctx context.Context) OncallIntegrationDefaultRouteTelegramPtrOutput {
	return o
}

func (o OncallIntegrationDefaultRouteTelegramPtrOutput) Elem() OncallIntegrationDefaultRouteTelegramOutput {
	return o.ApplyT(func(v *OncallIntegrationDefaultRouteTelegram) OncallIntegrationDefaultRouteTelegram {
		if v != nil {
			return *v
		}
		var ret OncallIntegrationDefaultRouteTelegram
		return ret
	}).(OncallIntegrationDefaultRouteTelegramOutput)
}

func (o OncallIntegrationDefaultRouteTelegramPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationDefaultRouteTelegram) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The ID of this resource.
func (o OncallIntegrationDefaultRouteTelegramPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationDefaultRouteTelegram) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

type OncallIntegrationTemplates struct {
	// Template for the key by which alerts are grouped.
	GroupingKey *string `pulumi:"groupingKey"`
	// Template for sending a signal to resolve the Incident.
	ResolveSignal *string `pulumi:"resolveSignal"`
	// Templates for Slack.
	Slack *OncallIntegrationTemplatesSlack `pulumi:"slack"`
}

// OncallIntegrationTemplatesInput is an input type that accepts OncallIntegrationTemplatesArgs and OncallIntegrationTemplatesOutput values.
// You can construct a concrete instance of `OncallIntegrationTemplatesInput` via:
//
//	OncallIntegrationTemplatesArgs{...}
type OncallIntegrationTemplatesInput interface {
	pulumi.Input

	ToOncallIntegrationTemplatesOutput() OncallIntegrationTemplatesOutput
	ToOncallIntegrationTemplatesOutputWithContext(context.Context) OncallIntegrationTemplatesOutput
}

type OncallIntegrationTemplatesArgs struct {
	// Template for the key by which alerts are grouped.
	GroupingKey pulumi.StringPtrInput `pulumi:"groupingKey"`
	// Template for sending a signal to resolve the Incident.
	ResolveSignal pulumi.StringPtrInput `pulumi:"resolveSignal"`
	// Templates for Slack.
	Slack OncallIntegrationTemplatesSlackPtrInput `pulumi:"slack"`
}

func (OncallIntegrationTemplatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationTemplates)(nil)).Elem()
}

func (i OncallIntegrationTemplatesArgs) ToOncallIntegrationTemplatesOutput() OncallIntegrationTemplatesOutput {
	return i.ToOncallIntegrationTemplatesOutputWithContext(context.Background())
}

func (i OncallIntegrationTemplatesArgs) ToOncallIntegrationTemplatesOutputWithContext(ctx context.Context) OncallIntegrationTemplatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationTemplatesOutput)
}

func (i OncallIntegrationTemplatesArgs) ToOncallIntegrationTemplatesPtrOutput() OncallIntegrationTemplatesPtrOutput {
	return i.ToOncallIntegrationTemplatesPtrOutputWithContext(context.Background())
}

func (i OncallIntegrationTemplatesArgs) ToOncallIntegrationTemplatesPtrOutputWithContext(ctx context.Context) OncallIntegrationTemplatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationTemplatesOutput).ToOncallIntegrationTemplatesPtrOutputWithContext(ctx)
}

// OncallIntegrationTemplatesPtrInput is an input type that accepts OncallIntegrationTemplatesArgs, OncallIntegrationTemplatesPtr and OncallIntegrationTemplatesPtrOutput values.
// You can construct a concrete instance of `OncallIntegrationTemplatesPtrInput` via:
//
//	        OncallIntegrationTemplatesArgs{...}
//
//	or:
//
//	        nil
type OncallIntegrationTemplatesPtrInput interface {
	pulumi.Input

	ToOncallIntegrationTemplatesPtrOutput() OncallIntegrationTemplatesPtrOutput
	ToOncallIntegrationTemplatesPtrOutputWithContext(context.Context) OncallIntegrationTemplatesPtrOutput
}

type oncallIntegrationTemplatesPtrType OncallIntegrationTemplatesArgs

func OncallIntegrationTemplatesPtr(v *OncallIntegrationTemplatesArgs) OncallIntegrationTemplatesPtrInput {
	return (*oncallIntegrationTemplatesPtrType)(v)
}

func (*oncallIntegrationTemplatesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallIntegrationTemplates)(nil)).Elem()
}

func (i *oncallIntegrationTemplatesPtrType) ToOncallIntegrationTemplatesPtrOutput() OncallIntegrationTemplatesPtrOutput {
	return i.ToOncallIntegrationTemplatesPtrOutputWithContext(context.Background())
}

func (i *oncallIntegrationTemplatesPtrType) ToOncallIntegrationTemplatesPtrOutputWithContext(ctx context.Context) OncallIntegrationTemplatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationTemplatesPtrOutput)
}

type OncallIntegrationTemplatesOutput struct{ *pulumi.OutputState }

func (OncallIntegrationTemplatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationTemplates)(nil)).Elem()
}

func (o OncallIntegrationTemplatesOutput) ToOncallIntegrationTemplatesOutput() OncallIntegrationTemplatesOutput {
	return o
}

func (o OncallIntegrationTemplatesOutput) ToOncallIntegrationTemplatesOutputWithContext(ctx context.Context) OncallIntegrationTemplatesOutput {
	return o
}

func (o OncallIntegrationTemplatesOutput) ToOncallIntegrationTemplatesPtrOutput() OncallIntegrationTemplatesPtrOutput {
	return o.ToOncallIntegrationTemplatesPtrOutputWithContext(context.Background())
}

func (o OncallIntegrationTemplatesOutput) ToOncallIntegrationTemplatesPtrOutputWithContext(ctx context.Context) OncallIntegrationTemplatesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OncallIntegrationTemplates) *OncallIntegrationTemplates {
		return &v
	}).(OncallIntegrationTemplatesPtrOutput)
}

// Template for the key by which alerts are grouped.
func (o OncallIntegrationTemplatesOutput) GroupingKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OncallIntegrationTemplates) *string { return v.GroupingKey }).(pulumi.StringPtrOutput)
}

// Template for sending a signal to resolve the Incident.
func (o OncallIntegrationTemplatesOutput) ResolveSignal() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OncallIntegrationTemplates) *string { return v.ResolveSignal }).(pulumi.StringPtrOutput)
}

// Templates for Slack.
func (o OncallIntegrationTemplatesOutput) Slack() OncallIntegrationTemplatesSlackPtrOutput {
	return o.ApplyT(func(v OncallIntegrationTemplates) *OncallIntegrationTemplatesSlack { return v.Slack }).(OncallIntegrationTemplatesSlackPtrOutput)
}

type OncallIntegrationTemplatesPtrOutput struct{ *pulumi.OutputState }

func (OncallIntegrationTemplatesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallIntegrationTemplates)(nil)).Elem()
}

func (o OncallIntegrationTemplatesPtrOutput) ToOncallIntegrationTemplatesPtrOutput() OncallIntegrationTemplatesPtrOutput {
	return o
}

func (o OncallIntegrationTemplatesPtrOutput) ToOncallIntegrationTemplatesPtrOutputWithContext(ctx context.Context) OncallIntegrationTemplatesPtrOutput {
	return o
}

func (o OncallIntegrationTemplatesPtrOutput) Elem() OncallIntegrationTemplatesOutput {
	return o.ApplyT(func(v *OncallIntegrationTemplates) OncallIntegrationTemplates {
		if v != nil {
			return *v
		}
		var ret OncallIntegrationTemplates
		return ret
	}).(OncallIntegrationTemplatesOutput)
}

// Template for the key by which alerts are grouped.
func (o OncallIntegrationTemplatesPtrOutput) GroupingKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationTemplates) *string {
		if v == nil {
			return nil
		}
		return v.GroupingKey
	}).(pulumi.StringPtrOutput)
}

// Template for sending a signal to resolve the Incident.
func (o OncallIntegrationTemplatesPtrOutput) ResolveSignal() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ResolveSignal
	}).(pulumi.StringPtrOutput)
}

// Templates for Slack.
func (o OncallIntegrationTemplatesPtrOutput) Slack() OncallIntegrationTemplatesSlackPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationTemplates) *OncallIntegrationTemplatesSlack {
		if v == nil {
			return nil
		}
		return v.Slack
	}).(OncallIntegrationTemplatesSlackPtrOutput)
}

type OncallIntegrationTemplatesSlack struct {
	ImageUrl *string `pulumi:"imageUrl"`
	Message  *string `pulumi:"message"`
	Title    *string `pulumi:"title"`
}

// OncallIntegrationTemplatesSlackInput is an input type that accepts OncallIntegrationTemplatesSlackArgs and OncallIntegrationTemplatesSlackOutput values.
// You can construct a concrete instance of `OncallIntegrationTemplatesSlackInput` via:
//
//	OncallIntegrationTemplatesSlackArgs{...}
type OncallIntegrationTemplatesSlackInput interface {
	pulumi.Input

	ToOncallIntegrationTemplatesSlackOutput() OncallIntegrationTemplatesSlackOutput
	ToOncallIntegrationTemplatesSlackOutputWithContext(context.Context) OncallIntegrationTemplatesSlackOutput
}

type OncallIntegrationTemplatesSlackArgs struct {
	ImageUrl pulumi.StringPtrInput `pulumi:"imageUrl"`
	Message  pulumi.StringPtrInput `pulumi:"message"`
	Title    pulumi.StringPtrInput `pulumi:"title"`
}

func (OncallIntegrationTemplatesSlackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationTemplatesSlack)(nil)).Elem()
}

func (i OncallIntegrationTemplatesSlackArgs) ToOncallIntegrationTemplatesSlackOutput() OncallIntegrationTemplatesSlackOutput {
	return i.ToOncallIntegrationTemplatesSlackOutputWithContext(context.Background())
}

func (i OncallIntegrationTemplatesSlackArgs) ToOncallIntegrationTemplatesSlackOutputWithContext(ctx context.Context) OncallIntegrationTemplatesSlackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationTemplatesSlackOutput)
}

func (i OncallIntegrationTemplatesSlackArgs) ToOncallIntegrationTemplatesSlackPtrOutput() OncallIntegrationTemplatesSlackPtrOutput {
	return i.ToOncallIntegrationTemplatesSlackPtrOutputWithContext(context.Background())
}

func (i OncallIntegrationTemplatesSlackArgs) ToOncallIntegrationTemplatesSlackPtrOutputWithContext(ctx context.Context) OncallIntegrationTemplatesSlackPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationTemplatesSlackOutput).ToOncallIntegrationTemplatesSlackPtrOutputWithContext(ctx)
}

// OncallIntegrationTemplatesSlackPtrInput is an input type that accepts OncallIntegrationTemplatesSlackArgs, OncallIntegrationTemplatesSlackPtr and OncallIntegrationTemplatesSlackPtrOutput values.
// You can construct a concrete instance of `OncallIntegrationTemplatesSlackPtrInput` via:
//
//	        OncallIntegrationTemplatesSlackArgs{...}
//
//	or:
//
//	        nil
type OncallIntegrationTemplatesSlackPtrInput interface {
	pulumi.Input

	ToOncallIntegrationTemplatesSlackPtrOutput() OncallIntegrationTemplatesSlackPtrOutput
	ToOncallIntegrationTemplatesSlackPtrOutputWithContext(context.Context) OncallIntegrationTemplatesSlackPtrOutput
}

type oncallIntegrationTemplatesSlackPtrType OncallIntegrationTemplatesSlackArgs

func OncallIntegrationTemplatesSlackPtr(v *OncallIntegrationTemplatesSlackArgs) OncallIntegrationTemplatesSlackPtrInput {
	return (*oncallIntegrationTemplatesSlackPtrType)(v)
}

func (*oncallIntegrationTemplatesSlackPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallIntegrationTemplatesSlack)(nil)).Elem()
}

func (i *oncallIntegrationTemplatesSlackPtrType) ToOncallIntegrationTemplatesSlackPtrOutput() OncallIntegrationTemplatesSlackPtrOutput {
	return i.ToOncallIntegrationTemplatesSlackPtrOutputWithContext(context.Background())
}

func (i *oncallIntegrationTemplatesSlackPtrType) ToOncallIntegrationTemplatesSlackPtrOutputWithContext(ctx context.Context) OncallIntegrationTemplatesSlackPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationTemplatesSlackPtrOutput)
}

type OncallIntegrationTemplatesSlackOutput struct{ *pulumi.OutputState }

func (OncallIntegrationTemplatesSlackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationTemplatesSlack)(nil)).Elem()
}

func (o OncallIntegrationTemplatesSlackOutput) ToOncallIntegrationTemplatesSlackOutput() OncallIntegrationTemplatesSlackOutput {
	return o
}

func (o OncallIntegrationTemplatesSlackOutput) ToOncallIntegrationTemplatesSlackOutputWithContext(ctx context.Context) OncallIntegrationTemplatesSlackOutput {
	return o
}

func (o OncallIntegrationTemplatesSlackOutput) ToOncallIntegrationTemplatesSlackPtrOutput() OncallIntegrationTemplatesSlackPtrOutput {
	return o.ToOncallIntegrationTemplatesSlackPtrOutputWithContext(context.Background())
}

func (o OncallIntegrationTemplatesSlackOutput) ToOncallIntegrationTemplatesSlackPtrOutputWithContext(ctx context.Context) OncallIntegrationTemplatesSlackPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OncallIntegrationTemplatesSlack) *OncallIntegrationTemplatesSlack {
		return &v
	}).(OncallIntegrationTemplatesSlackPtrOutput)
}

func (o OncallIntegrationTemplatesSlackOutput) ImageUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OncallIntegrationTemplatesSlack) *string { return v.ImageUrl }).(pulumi.StringPtrOutput)
}

func (o OncallIntegrationTemplatesSlackOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OncallIntegrationTemplatesSlack) *string { return v.Message }).(pulumi.StringPtrOutput)
}

func (o OncallIntegrationTemplatesSlackOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OncallIntegrationTemplatesSlack) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type OncallIntegrationTemplatesSlackPtrOutput struct{ *pulumi.OutputState }

func (OncallIntegrationTemplatesSlackPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallIntegrationTemplatesSlack)(nil)).Elem()
}

func (o OncallIntegrationTemplatesSlackPtrOutput) ToOncallIntegrationTemplatesSlackPtrOutput() OncallIntegrationTemplatesSlackPtrOutput {
	return o
}

func (o OncallIntegrationTemplatesSlackPtrOutput) ToOncallIntegrationTemplatesSlackPtrOutputWithContext(ctx context.Context) OncallIntegrationTemplatesSlackPtrOutput {
	return o
}

func (o OncallIntegrationTemplatesSlackPtrOutput) Elem() OncallIntegrationTemplatesSlackOutput {
	return o.ApplyT(func(v *OncallIntegrationTemplatesSlack) OncallIntegrationTemplatesSlack {
		if v != nil {
			return *v
		}
		var ret OncallIntegrationTemplatesSlack
		return ret
	}).(OncallIntegrationTemplatesSlackOutput)
}

func (o OncallIntegrationTemplatesSlackPtrOutput) ImageUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationTemplatesSlack) *string {
		if v == nil {
			return nil
		}
		return v.ImageUrl
	}).(pulumi.StringPtrOutput)
}

func (o OncallIntegrationTemplatesSlackPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationTemplatesSlack) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

func (o OncallIntegrationTemplatesSlackPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationTemplatesSlack) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

type OncallRouteMsteams struct {
	// Enable notification in MS teams. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// MS teams channel id. Alerts will be directed to this channel in Microsoft teams.
	Id *string `pulumi:"id"`
}

// OncallRouteMsteamsInput is an input type that accepts OncallRouteMsteamsArgs and OncallRouteMsteamsOutput values.
// You can construct a concrete instance of `OncallRouteMsteamsInput` via:
//
//	OncallRouteMsteamsArgs{...}
type OncallRouteMsteamsInput interface {
	pulumi.Input

	ToOncallRouteMsteamsOutput() OncallRouteMsteamsOutput
	ToOncallRouteMsteamsOutputWithContext(context.Context) OncallRouteMsteamsOutput
}

type OncallRouteMsteamsArgs struct {
	// Enable notification in MS teams. Defaults to `true`.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// MS teams channel id. Alerts will be directed to this channel in Microsoft teams.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (OncallRouteMsteamsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallRouteMsteams)(nil)).Elem()
}

func (i OncallRouteMsteamsArgs) ToOncallRouteMsteamsOutput() OncallRouteMsteamsOutput {
	return i.ToOncallRouteMsteamsOutputWithContext(context.Background())
}

func (i OncallRouteMsteamsArgs) ToOncallRouteMsteamsOutputWithContext(ctx context.Context) OncallRouteMsteamsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallRouteMsteamsOutput)
}

func (i OncallRouteMsteamsArgs) ToOncallRouteMsteamsPtrOutput() OncallRouteMsteamsPtrOutput {
	return i.ToOncallRouteMsteamsPtrOutputWithContext(context.Background())
}

func (i OncallRouteMsteamsArgs) ToOncallRouteMsteamsPtrOutputWithContext(ctx context.Context) OncallRouteMsteamsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallRouteMsteamsOutput).ToOncallRouteMsteamsPtrOutputWithContext(ctx)
}

// OncallRouteMsteamsPtrInput is an input type that accepts OncallRouteMsteamsArgs, OncallRouteMsteamsPtr and OncallRouteMsteamsPtrOutput values.
// You can construct a concrete instance of `OncallRouteMsteamsPtrInput` via:
//
//	        OncallRouteMsteamsArgs{...}
//
//	or:
//
//	        nil
type OncallRouteMsteamsPtrInput interface {
	pulumi.Input

	ToOncallRouteMsteamsPtrOutput() OncallRouteMsteamsPtrOutput
	ToOncallRouteMsteamsPtrOutputWithContext(context.Context) OncallRouteMsteamsPtrOutput
}

type oncallRouteMsteamsPtrType OncallRouteMsteamsArgs

func OncallRouteMsteamsPtr(v *OncallRouteMsteamsArgs) OncallRouteMsteamsPtrInput {
	return (*oncallRouteMsteamsPtrType)(v)
}

func (*oncallRouteMsteamsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallRouteMsteams)(nil)).Elem()
}

func (i *oncallRouteMsteamsPtrType) ToOncallRouteMsteamsPtrOutput() OncallRouteMsteamsPtrOutput {
	return i.ToOncallRouteMsteamsPtrOutputWithContext(context.Background())
}

func (i *oncallRouteMsteamsPtrType) ToOncallRouteMsteamsPtrOutputWithContext(ctx context.Context) OncallRouteMsteamsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallRouteMsteamsPtrOutput)
}

type OncallRouteMsteamsOutput struct{ *pulumi.OutputState }

func (OncallRouteMsteamsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallRouteMsteams)(nil)).Elem()
}

func (o OncallRouteMsteamsOutput) ToOncallRouteMsteamsOutput() OncallRouteMsteamsOutput {
	return o
}

func (o OncallRouteMsteamsOutput) ToOncallRouteMsteamsOutputWithContext(ctx context.Context) OncallRouteMsteamsOutput {
	return o
}

func (o OncallRouteMsteamsOutput) ToOncallRouteMsteamsPtrOutput() OncallRouteMsteamsPtrOutput {
	return o.ToOncallRouteMsteamsPtrOutputWithContext(context.Background())
}

func (o OncallRouteMsteamsOutput) ToOncallRouteMsteamsPtrOutputWithContext(ctx context.Context) OncallRouteMsteamsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OncallRouteMsteams) *OncallRouteMsteams {
		return &v
	}).(OncallRouteMsteamsPtrOutput)
}

// Enable notification in MS teams. Defaults to `true`.
func (o OncallRouteMsteamsOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OncallRouteMsteams) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// MS teams channel id. Alerts will be directed to this channel in Microsoft teams.
func (o OncallRouteMsteamsOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OncallRouteMsteams) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type OncallRouteMsteamsPtrOutput struct{ *pulumi.OutputState }

func (OncallRouteMsteamsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallRouteMsteams)(nil)).Elem()
}

func (o OncallRouteMsteamsPtrOutput) ToOncallRouteMsteamsPtrOutput() OncallRouteMsteamsPtrOutput {
	return o
}

func (o OncallRouteMsteamsPtrOutput) ToOncallRouteMsteamsPtrOutputWithContext(ctx context.Context) OncallRouteMsteamsPtrOutput {
	return o
}

func (o OncallRouteMsteamsPtrOutput) Elem() OncallRouteMsteamsOutput {
	return o.ApplyT(func(v *OncallRouteMsteams) OncallRouteMsteams {
		if v != nil {
			return *v
		}
		var ret OncallRouteMsteams
		return ret
	}).(OncallRouteMsteamsOutput)
}

// Enable notification in MS teams. Defaults to `true`.
func (o OncallRouteMsteamsPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OncallRouteMsteams) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// MS teams channel id. Alerts will be directed to this channel in Microsoft teams.
func (o OncallRouteMsteamsPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OncallRouteMsteams) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

type OncallRouteSlack struct {
	// Slack channel id. Alerts will be directed to this channel in Slack.
	ChannelId *string `pulumi:"channelId"`
	// Enable notification in Slack. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
}

// OncallRouteSlackInput is an input type that accepts OncallRouteSlackArgs and OncallRouteSlackOutput values.
// You can construct a concrete instance of `OncallRouteSlackInput` via:
//
//	OncallRouteSlackArgs{...}
type OncallRouteSlackInput interface {
	pulumi.Input

	ToOncallRouteSlackOutput() OncallRouteSlackOutput
	ToOncallRouteSlackOutputWithContext(context.Context) OncallRouteSlackOutput
}

type OncallRouteSlackArgs struct {
	// Slack channel id. Alerts will be directed to this channel in Slack.
	ChannelId pulumi.StringPtrInput `pulumi:"channelId"`
	// Enable notification in Slack. Defaults to `true`.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (OncallRouteSlackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallRouteSlack)(nil)).Elem()
}

func (i OncallRouteSlackArgs) ToOncallRouteSlackOutput() OncallRouteSlackOutput {
	return i.ToOncallRouteSlackOutputWithContext(context.Background())
}

func (i OncallRouteSlackArgs) ToOncallRouteSlackOutputWithContext(ctx context.Context) OncallRouteSlackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallRouteSlackOutput)
}

func (i OncallRouteSlackArgs) ToOncallRouteSlackPtrOutput() OncallRouteSlackPtrOutput {
	return i.ToOncallRouteSlackPtrOutputWithContext(context.Background())
}

func (i OncallRouteSlackArgs) ToOncallRouteSlackPtrOutputWithContext(ctx context.Context) OncallRouteSlackPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallRouteSlackOutput).ToOncallRouteSlackPtrOutputWithContext(ctx)
}

// OncallRouteSlackPtrInput is an input type that accepts OncallRouteSlackArgs, OncallRouteSlackPtr and OncallRouteSlackPtrOutput values.
// You can construct a concrete instance of `OncallRouteSlackPtrInput` via:
//
//	        OncallRouteSlackArgs{...}
//
//	or:
//
//	        nil
type OncallRouteSlackPtrInput interface {
	pulumi.Input

	ToOncallRouteSlackPtrOutput() OncallRouteSlackPtrOutput
	ToOncallRouteSlackPtrOutputWithContext(context.Context) OncallRouteSlackPtrOutput
}

type oncallRouteSlackPtrType OncallRouteSlackArgs

func OncallRouteSlackPtr(v *OncallRouteSlackArgs) OncallRouteSlackPtrInput {
	return (*oncallRouteSlackPtrType)(v)
}

func (*oncallRouteSlackPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallRouteSlack)(nil)).Elem()
}

func (i *oncallRouteSlackPtrType) ToOncallRouteSlackPtrOutput() OncallRouteSlackPtrOutput {
	return i.ToOncallRouteSlackPtrOutputWithContext(context.Background())
}

func (i *oncallRouteSlackPtrType) ToOncallRouteSlackPtrOutputWithContext(ctx context.Context) OncallRouteSlackPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallRouteSlackPtrOutput)
}

type OncallRouteSlackOutput struct{ *pulumi.OutputState }

func (OncallRouteSlackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallRouteSlack)(nil)).Elem()
}

func (o OncallRouteSlackOutput) ToOncallRouteSlackOutput() OncallRouteSlackOutput {
	return o
}

func (o OncallRouteSlackOutput) ToOncallRouteSlackOutputWithContext(ctx context.Context) OncallRouteSlackOutput {
	return o
}

func (o OncallRouteSlackOutput) ToOncallRouteSlackPtrOutput() OncallRouteSlackPtrOutput {
	return o.ToOncallRouteSlackPtrOutputWithContext(context.Background())
}

func (o OncallRouteSlackOutput) ToOncallRouteSlackPtrOutputWithContext(ctx context.Context) OncallRouteSlackPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OncallRouteSlack) *OncallRouteSlack {
		return &v
	}).(OncallRouteSlackPtrOutput)
}

// Slack channel id. Alerts will be directed to this channel in Slack.
func (o OncallRouteSlackOutput) ChannelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OncallRouteSlack) *string { return v.ChannelId }).(pulumi.StringPtrOutput)
}

// Enable notification in Slack. Defaults to `true`.
func (o OncallRouteSlackOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OncallRouteSlack) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type OncallRouteSlackPtrOutput struct{ *pulumi.OutputState }

func (OncallRouteSlackPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallRouteSlack)(nil)).Elem()
}

func (o OncallRouteSlackPtrOutput) ToOncallRouteSlackPtrOutput() OncallRouteSlackPtrOutput {
	return o
}

func (o OncallRouteSlackPtrOutput) ToOncallRouteSlackPtrOutputWithContext(ctx context.Context) OncallRouteSlackPtrOutput {
	return o
}

func (o OncallRouteSlackPtrOutput) Elem() OncallRouteSlackOutput {
	return o.ApplyT(func(v *OncallRouteSlack) OncallRouteSlack {
		if v != nil {
			return *v
		}
		var ret OncallRouteSlack
		return ret
	}).(OncallRouteSlackOutput)
}

// Slack channel id. Alerts will be directed to this channel in Slack.
func (o OncallRouteSlackPtrOutput) ChannelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OncallRouteSlack) *string {
		if v == nil {
			return nil
		}
		return v.ChannelId
	}).(pulumi.StringPtrOutput)
}

// Enable notification in Slack. Defaults to `true`.
func (o OncallRouteSlackPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OncallRouteSlack) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type OncallRouteTelegram struct {
	// Enable notification in Telegram. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// Telegram channel id. Alerts will be directed to this channel in Telegram.
	Id *string `pulumi:"id"`
}

// OncallRouteTelegramInput is an input type that accepts OncallRouteTelegramArgs and OncallRouteTelegramOutput values.
// You can construct a concrete instance of `OncallRouteTelegramInput` via:
//
//	OncallRouteTelegramArgs{...}
type OncallRouteTelegramInput interface {
	pulumi.Input

	ToOncallRouteTelegramOutput() OncallRouteTelegramOutput
	ToOncallRouteTelegramOutputWithContext(context.Context) OncallRouteTelegramOutput
}

type OncallRouteTelegramArgs struct {
	// Enable notification in Telegram. Defaults to `true`.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Telegram channel id. Alerts will be directed to this channel in Telegram.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (OncallRouteTelegramArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallRouteTelegram)(nil)).Elem()
}

func (i OncallRouteTelegramArgs) ToOncallRouteTelegramOutput() OncallRouteTelegramOutput {
	return i.ToOncallRouteTelegramOutputWithContext(context.Background())
}

func (i OncallRouteTelegramArgs) ToOncallRouteTelegramOutputWithContext(ctx context.Context) OncallRouteTelegramOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallRouteTelegramOutput)
}

func (i OncallRouteTelegramArgs) ToOncallRouteTelegramPtrOutput() OncallRouteTelegramPtrOutput {
	return i.ToOncallRouteTelegramPtrOutputWithContext(context.Background())
}

func (i OncallRouteTelegramArgs) ToOncallRouteTelegramPtrOutputWithContext(ctx context.Context) OncallRouteTelegramPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallRouteTelegramOutput).ToOncallRouteTelegramPtrOutputWithContext(ctx)
}

// OncallRouteTelegramPtrInput is an input type that accepts OncallRouteTelegramArgs, OncallRouteTelegramPtr and OncallRouteTelegramPtrOutput values.
// You can construct a concrete instance of `OncallRouteTelegramPtrInput` via:
//
//	        OncallRouteTelegramArgs{...}
//
//	or:
//
//	        nil
type OncallRouteTelegramPtrInput interface {
	pulumi.Input

	ToOncallRouteTelegramPtrOutput() OncallRouteTelegramPtrOutput
	ToOncallRouteTelegramPtrOutputWithContext(context.Context) OncallRouteTelegramPtrOutput
}

type oncallRouteTelegramPtrType OncallRouteTelegramArgs

func OncallRouteTelegramPtr(v *OncallRouteTelegramArgs) OncallRouteTelegramPtrInput {
	return (*oncallRouteTelegramPtrType)(v)
}

func (*oncallRouteTelegramPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallRouteTelegram)(nil)).Elem()
}

func (i *oncallRouteTelegramPtrType) ToOncallRouteTelegramPtrOutput() OncallRouteTelegramPtrOutput {
	return i.ToOncallRouteTelegramPtrOutputWithContext(context.Background())
}

func (i *oncallRouteTelegramPtrType) ToOncallRouteTelegramPtrOutputWithContext(ctx context.Context) OncallRouteTelegramPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallRouteTelegramPtrOutput)
}

type OncallRouteTelegramOutput struct{ *pulumi.OutputState }

func (OncallRouteTelegramOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallRouteTelegram)(nil)).Elem()
}

func (o OncallRouteTelegramOutput) ToOncallRouteTelegramOutput() OncallRouteTelegramOutput {
	return o
}

func (o OncallRouteTelegramOutput) ToOncallRouteTelegramOutputWithContext(ctx context.Context) OncallRouteTelegramOutput {
	return o
}

func (o OncallRouteTelegramOutput) ToOncallRouteTelegramPtrOutput() OncallRouteTelegramPtrOutput {
	return o.ToOncallRouteTelegramPtrOutputWithContext(context.Background())
}

func (o OncallRouteTelegramOutput) ToOncallRouteTelegramPtrOutputWithContext(ctx context.Context) OncallRouteTelegramPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OncallRouteTelegram) *OncallRouteTelegram {
		return &v
	}).(OncallRouteTelegramPtrOutput)
}

// Enable notification in Telegram. Defaults to `true`.
func (o OncallRouteTelegramOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OncallRouteTelegram) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Telegram channel id. Alerts will be directed to this channel in Telegram.
func (o OncallRouteTelegramOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OncallRouteTelegram) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type OncallRouteTelegramPtrOutput struct{ *pulumi.OutputState }

func (OncallRouteTelegramPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallRouteTelegram)(nil)).Elem()
}

func (o OncallRouteTelegramPtrOutput) ToOncallRouteTelegramPtrOutput() OncallRouteTelegramPtrOutput {
	return o
}

func (o OncallRouteTelegramPtrOutput) ToOncallRouteTelegramPtrOutputWithContext(ctx context.Context) OncallRouteTelegramPtrOutput {
	return o
}

func (o OncallRouteTelegramPtrOutput) Elem() OncallRouteTelegramOutput {
	return o.ApplyT(func(v *OncallRouteTelegram) OncallRouteTelegram {
		if v != nil {
			return *v
		}
		var ret OncallRouteTelegram
		return ret
	}).(OncallRouteTelegramOutput)
}

// Enable notification in Telegram. Defaults to `true`.
func (o OncallRouteTelegramPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OncallRouteTelegram) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Telegram channel id. Alerts will be directed to this channel in Telegram.
func (o OncallRouteTelegramPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OncallRouteTelegram) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

type OncallScheduleSlack struct {
	// Slack channel id. Reminder about schedule shifts will be directed to this channel in Slack.
	ChannelId *string `pulumi:"channelId"`
	// Slack user group id. Members of user group will be updated when on-call users change.
	UserGroupId *string `pulumi:"userGroupId"`
}

// OncallScheduleSlackInput is an input type that accepts OncallScheduleSlackArgs and OncallScheduleSlackOutput values.
// You can construct a concrete instance of `OncallScheduleSlackInput` via:
//
//	OncallScheduleSlackArgs{...}
type OncallScheduleSlackInput interface {
	pulumi.Input

	ToOncallScheduleSlackOutput() OncallScheduleSlackOutput
	ToOncallScheduleSlackOutputWithContext(context.Context) OncallScheduleSlackOutput
}

type OncallScheduleSlackArgs struct {
	// Slack channel id. Reminder about schedule shifts will be directed to this channel in Slack.
	ChannelId pulumi.StringPtrInput `pulumi:"channelId"`
	// Slack user group id. Members of user group will be updated when on-call users change.
	UserGroupId pulumi.StringPtrInput `pulumi:"userGroupId"`
}

func (OncallScheduleSlackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallScheduleSlack)(nil)).Elem()
}

func (i OncallScheduleSlackArgs) ToOncallScheduleSlackOutput() OncallScheduleSlackOutput {
	return i.ToOncallScheduleSlackOutputWithContext(context.Background())
}

func (i OncallScheduleSlackArgs) ToOncallScheduleSlackOutputWithContext(ctx context.Context) OncallScheduleSlackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallScheduleSlackOutput)
}

func (i OncallScheduleSlackArgs) ToOncallScheduleSlackPtrOutput() OncallScheduleSlackPtrOutput {
	return i.ToOncallScheduleSlackPtrOutputWithContext(context.Background())
}

func (i OncallScheduleSlackArgs) ToOncallScheduleSlackPtrOutputWithContext(ctx context.Context) OncallScheduleSlackPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallScheduleSlackOutput).ToOncallScheduleSlackPtrOutputWithContext(ctx)
}

// OncallScheduleSlackPtrInput is an input type that accepts OncallScheduleSlackArgs, OncallScheduleSlackPtr and OncallScheduleSlackPtrOutput values.
// You can construct a concrete instance of `OncallScheduleSlackPtrInput` via:
//
//	        OncallScheduleSlackArgs{...}
//
//	or:
//
//	        nil
type OncallScheduleSlackPtrInput interface {
	pulumi.Input

	ToOncallScheduleSlackPtrOutput() OncallScheduleSlackPtrOutput
	ToOncallScheduleSlackPtrOutputWithContext(context.Context) OncallScheduleSlackPtrOutput
}

type oncallScheduleSlackPtrType OncallScheduleSlackArgs

func OncallScheduleSlackPtr(v *OncallScheduleSlackArgs) OncallScheduleSlackPtrInput {
	return (*oncallScheduleSlackPtrType)(v)
}

func (*oncallScheduleSlackPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallScheduleSlack)(nil)).Elem()
}

func (i *oncallScheduleSlackPtrType) ToOncallScheduleSlackPtrOutput() OncallScheduleSlackPtrOutput {
	return i.ToOncallScheduleSlackPtrOutputWithContext(context.Background())
}

func (i *oncallScheduleSlackPtrType) ToOncallScheduleSlackPtrOutputWithContext(ctx context.Context) OncallScheduleSlackPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallScheduleSlackPtrOutput)
}

type OncallScheduleSlackOutput struct{ *pulumi.OutputState }

func (OncallScheduleSlackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallScheduleSlack)(nil)).Elem()
}

func (o OncallScheduleSlackOutput) ToOncallScheduleSlackOutput() OncallScheduleSlackOutput {
	return o
}

func (o OncallScheduleSlackOutput) ToOncallScheduleSlackOutputWithContext(ctx context.Context) OncallScheduleSlackOutput {
	return o
}

func (o OncallScheduleSlackOutput) ToOncallScheduleSlackPtrOutput() OncallScheduleSlackPtrOutput {
	return o.ToOncallScheduleSlackPtrOutputWithContext(context.Background())
}

func (o OncallScheduleSlackOutput) ToOncallScheduleSlackPtrOutputWithContext(ctx context.Context) OncallScheduleSlackPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OncallScheduleSlack) *OncallScheduleSlack {
		return &v
	}).(OncallScheduleSlackPtrOutput)
}

// Slack channel id. Reminder about schedule shifts will be directed to this channel in Slack.
func (o OncallScheduleSlackOutput) ChannelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OncallScheduleSlack) *string { return v.ChannelId }).(pulumi.StringPtrOutput)
}

// Slack user group id. Members of user group will be updated when on-call users change.
func (o OncallScheduleSlackOutput) UserGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OncallScheduleSlack) *string { return v.UserGroupId }).(pulumi.StringPtrOutput)
}

type OncallScheduleSlackPtrOutput struct{ *pulumi.OutputState }

func (OncallScheduleSlackPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallScheduleSlack)(nil)).Elem()
}

func (o OncallScheduleSlackPtrOutput) ToOncallScheduleSlackPtrOutput() OncallScheduleSlackPtrOutput {
	return o
}

func (o OncallScheduleSlackPtrOutput) ToOncallScheduleSlackPtrOutputWithContext(ctx context.Context) OncallScheduleSlackPtrOutput {
	return o
}

func (o OncallScheduleSlackPtrOutput) Elem() OncallScheduleSlackOutput {
	return o.ApplyT(func(v *OncallScheduleSlack) OncallScheduleSlack {
		if v != nil {
			return *v
		}
		var ret OncallScheduleSlack
		return ret
	}).(OncallScheduleSlackOutput)
}

// Slack channel id. Reminder about schedule shifts will be directed to this channel in Slack.
func (o OncallScheduleSlackPtrOutput) ChannelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OncallScheduleSlack) *string {
		if v == nil {
			return nil
		}
		return v.ChannelId
	}).(pulumi.StringPtrOutput)
}

// Slack user group id. Members of user group will be updated when on-call users change.
func (o OncallScheduleSlackPtrOutput) UserGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OncallScheduleSlack) *string {
		if v == nil {
			return nil
		}
		return v.UserGroupId
	}).(pulumi.StringPtrOutput)
}

type PlaylistItem struct {
	// The ID of this resource.
	Id    *string `pulumi:"id"`
	Order int     `pulumi:"order"`
	Title string  `pulumi:"title"`
	Type  *string `pulumi:"type"`
	Value *string `pulumi:"value"`
}

// PlaylistItemInput is an input type that accepts PlaylistItemArgs and PlaylistItemOutput values.
// You can construct a concrete instance of `PlaylistItemInput` via:
//
//	PlaylistItemArgs{...}
type PlaylistItemInput interface {
	pulumi.Input

	ToPlaylistItemOutput() PlaylistItemOutput
	ToPlaylistItemOutputWithContext(context.Context) PlaylistItemOutput
}

type PlaylistItemArgs struct {
	// The ID of this resource.
	Id    pulumi.StringPtrInput `pulumi:"id"`
	Order pulumi.IntInput       `pulumi:"order"`
	Title pulumi.StringInput    `pulumi:"title"`
	Type  pulumi.StringPtrInput `pulumi:"type"`
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (PlaylistItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaylistItem)(nil)).Elem()
}

func (i PlaylistItemArgs) ToPlaylistItemOutput() PlaylistItemOutput {
	return i.ToPlaylistItemOutputWithContext(context.Background())
}

func (i PlaylistItemArgs) ToPlaylistItemOutputWithContext(ctx context.Context) PlaylistItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaylistItemOutput)
}

// PlaylistItemArrayInput is an input type that accepts PlaylistItemArray and PlaylistItemArrayOutput values.
// You can construct a concrete instance of `PlaylistItemArrayInput` via:
//
//	PlaylistItemArray{ PlaylistItemArgs{...} }
type PlaylistItemArrayInput interface {
	pulumi.Input

	ToPlaylistItemArrayOutput() PlaylistItemArrayOutput
	ToPlaylistItemArrayOutputWithContext(context.Context) PlaylistItemArrayOutput
}

type PlaylistItemArray []PlaylistItemInput

func (PlaylistItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlaylistItem)(nil)).Elem()
}

func (i PlaylistItemArray) ToPlaylistItemArrayOutput() PlaylistItemArrayOutput {
	return i.ToPlaylistItemArrayOutputWithContext(context.Background())
}

func (i PlaylistItemArray) ToPlaylistItemArrayOutputWithContext(ctx context.Context) PlaylistItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaylistItemArrayOutput)
}

type PlaylistItemOutput struct{ *pulumi.OutputState }

func (PlaylistItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaylistItem)(nil)).Elem()
}

func (o PlaylistItemOutput) ToPlaylistItemOutput() PlaylistItemOutput {
	return o
}

func (o PlaylistItemOutput) ToPlaylistItemOutputWithContext(ctx context.Context) PlaylistItemOutput {
	return o
}

// The ID of this resource.
func (o PlaylistItemOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlaylistItem) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o PlaylistItemOutput) Order() pulumi.IntOutput {
	return o.ApplyT(func(v PlaylistItem) int { return v.Order }).(pulumi.IntOutput)
}

func (o PlaylistItemOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v PlaylistItem) string { return v.Title }).(pulumi.StringOutput)
}

func (o PlaylistItemOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlaylistItem) *string { return v.Type }).(pulumi.StringPtrOutput)
}

func (o PlaylistItemOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlaylistItem) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type PlaylistItemArrayOutput struct{ *pulumi.OutputState }

func (PlaylistItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlaylistItem)(nil)).Elem()
}

func (o PlaylistItemArrayOutput) ToPlaylistItemArrayOutput() PlaylistItemArrayOutput {
	return o
}

func (o PlaylistItemArrayOutput) ToPlaylistItemArrayOutputWithContext(ctx context.Context) PlaylistItemArrayOutput {
	return o
}

func (o PlaylistItemArrayOutput) Index(i pulumi.IntInput) PlaylistItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PlaylistItem {
		return vs[0].([]PlaylistItem)[vs[1].(int)]
	}).(PlaylistItemOutput)
}

type ReportSchedule struct {
	// Custom interval of the report.
	// **Note:** This field is only available when frequency is set to `custom`.
	CustomInterval *string `pulumi:"customInterval"`
	// End time of the report. If empty, the report will be sent indefinitely (according to frequency). Note that times will be saved as UTC in Grafana.
	EndTime *string `pulumi:"endTime"`
	// Frequency of the report. Allowed values: `never`, `once`, `hourly`, `daily`, `weekly`, `monthly`, `custom`.
	Frequency string `pulumi:"frequency"`
	// Send the report on the last day of the month Defaults to `false`.
	LastDayOfMonth *bool `pulumi:"lastDayOfMonth"`
	// Start time of the report. If empty, the start date will be set to the creation time. Note that times will be saved as UTC in Grafana.
	StartTime *string `pulumi:"startTime"`
	// Whether to send the report only on work days. Defaults to `false`.
	WorkdaysOnly *bool `pulumi:"workdaysOnly"`
}

// ReportScheduleInput is an input type that accepts ReportScheduleArgs and ReportScheduleOutput values.
// You can construct a concrete instance of `ReportScheduleInput` via:
//
//	ReportScheduleArgs{...}
type ReportScheduleInput interface {
	pulumi.Input

	ToReportScheduleOutput() ReportScheduleOutput
	ToReportScheduleOutputWithContext(context.Context) ReportScheduleOutput
}

type ReportScheduleArgs struct {
	// Custom interval of the report.
	// **Note:** This field is only available when frequency is set to `custom`.
	CustomInterval pulumi.StringPtrInput `pulumi:"customInterval"`
	// End time of the report. If empty, the report will be sent indefinitely (according to frequency). Note that times will be saved as UTC in Grafana.
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// Frequency of the report. Allowed values: `never`, `once`, `hourly`, `daily`, `weekly`, `monthly`, `custom`.
	Frequency pulumi.StringInput `pulumi:"frequency"`
	// Send the report on the last day of the month Defaults to `false`.
	LastDayOfMonth pulumi.BoolPtrInput `pulumi:"lastDayOfMonth"`
	// Start time of the report. If empty, the start date will be set to the creation time. Note that times will be saved as UTC in Grafana.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// Whether to send the report only on work days. Defaults to `false`.
	WorkdaysOnly pulumi.BoolPtrInput `pulumi:"workdaysOnly"`
}

func (ReportScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportSchedule)(nil)).Elem()
}

func (i ReportScheduleArgs) ToReportScheduleOutput() ReportScheduleOutput {
	return i.ToReportScheduleOutputWithContext(context.Background())
}

func (i ReportScheduleArgs) ToReportScheduleOutputWithContext(ctx context.Context) ReportScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportScheduleOutput)
}

func (i ReportScheduleArgs) ToReportSchedulePtrOutput() ReportSchedulePtrOutput {
	return i.ToReportSchedulePtrOutputWithContext(context.Background())
}

func (i ReportScheduleArgs) ToReportSchedulePtrOutputWithContext(ctx context.Context) ReportSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportScheduleOutput).ToReportSchedulePtrOutputWithContext(ctx)
}

// ReportSchedulePtrInput is an input type that accepts ReportScheduleArgs, ReportSchedulePtr and ReportSchedulePtrOutput values.
// You can construct a concrete instance of `ReportSchedulePtrInput` via:
//
//	        ReportScheduleArgs{...}
//
//	or:
//
//	        nil
type ReportSchedulePtrInput interface {
	pulumi.Input

	ToReportSchedulePtrOutput() ReportSchedulePtrOutput
	ToReportSchedulePtrOutputWithContext(context.Context) ReportSchedulePtrOutput
}

type reportSchedulePtrType ReportScheduleArgs

func ReportSchedulePtr(v *ReportScheduleArgs) ReportSchedulePtrInput {
	return (*reportSchedulePtrType)(v)
}

func (*reportSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportSchedule)(nil)).Elem()
}

func (i *reportSchedulePtrType) ToReportSchedulePtrOutput() ReportSchedulePtrOutput {
	return i.ToReportSchedulePtrOutputWithContext(context.Background())
}

func (i *reportSchedulePtrType) ToReportSchedulePtrOutputWithContext(ctx context.Context) ReportSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportSchedulePtrOutput)
}

type ReportScheduleOutput struct{ *pulumi.OutputState }

func (ReportScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportSchedule)(nil)).Elem()
}

func (o ReportScheduleOutput) ToReportScheduleOutput() ReportScheduleOutput {
	return o
}

func (o ReportScheduleOutput) ToReportScheduleOutputWithContext(ctx context.Context) ReportScheduleOutput {
	return o
}

func (o ReportScheduleOutput) ToReportSchedulePtrOutput() ReportSchedulePtrOutput {
	return o.ToReportSchedulePtrOutputWithContext(context.Background())
}

func (o ReportScheduleOutput) ToReportSchedulePtrOutputWithContext(ctx context.Context) ReportSchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReportSchedule) *ReportSchedule {
		return &v
	}).(ReportSchedulePtrOutput)
}

// Custom interval of the report.
// **Note:** This field is only available when frequency is set to `custom`.
func (o ReportScheduleOutput) CustomInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportSchedule) *string { return v.CustomInterval }).(pulumi.StringPtrOutput)
}

// End time of the report. If empty, the report will be sent indefinitely (according to frequency). Note that times will be saved as UTC in Grafana.
func (o ReportScheduleOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportSchedule) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// Frequency of the report. Allowed values: `never`, `once`, `hourly`, `daily`, `weekly`, `monthly`, `custom`.
func (o ReportScheduleOutput) Frequency() pulumi.StringOutput {
	return o.ApplyT(func(v ReportSchedule) string { return v.Frequency }).(pulumi.StringOutput)
}

// Send the report on the last day of the month Defaults to `false`.
func (o ReportScheduleOutput) LastDayOfMonth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReportSchedule) *bool { return v.LastDayOfMonth }).(pulumi.BoolPtrOutput)
}

// Start time of the report. If empty, the start date will be set to the creation time. Note that times will be saved as UTC in Grafana.
func (o ReportScheduleOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportSchedule) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// Whether to send the report only on work days. Defaults to `false`.
func (o ReportScheduleOutput) WorkdaysOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReportSchedule) *bool { return v.WorkdaysOnly }).(pulumi.BoolPtrOutput)
}

type ReportSchedulePtrOutput struct{ *pulumi.OutputState }

func (ReportSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportSchedule)(nil)).Elem()
}

func (o ReportSchedulePtrOutput) ToReportSchedulePtrOutput() ReportSchedulePtrOutput {
	return o
}

func (o ReportSchedulePtrOutput) ToReportSchedulePtrOutputWithContext(ctx context.Context) ReportSchedulePtrOutput {
	return o
}

func (o ReportSchedulePtrOutput) Elem() ReportScheduleOutput {
	return o.ApplyT(func(v *ReportSchedule) ReportSchedule {
		if v != nil {
			return *v
		}
		var ret ReportSchedule
		return ret
	}).(ReportScheduleOutput)
}

// Custom interval of the report.
// **Note:** This field is only available when frequency is set to `custom`.
func (o ReportSchedulePtrOutput) CustomInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportSchedule) *string {
		if v == nil {
			return nil
		}
		return v.CustomInterval
	}).(pulumi.StringPtrOutput)
}

// End time of the report. If empty, the report will be sent indefinitely (according to frequency). Note that times will be saved as UTC in Grafana.
func (o ReportSchedulePtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportSchedule) *string {
		if v == nil {
			return nil
		}
		return v.EndTime
	}).(pulumi.StringPtrOutput)
}

// Frequency of the report. Allowed values: `never`, `once`, `hourly`, `daily`, `weekly`, `monthly`, `custom`.
func (o ReportSchedulePtrOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportSchedule) *string {
		if v == nil {
			return nil
		}
		return &v.Frequency
	}).(pulumi.StringPtrOutput)
}

// Send the report on the last day of the month Defaults to `false`.
func (o ReportSchedulePtrOutput) LastDayOfMonth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ReportSchedule) *bool {
		if v == nil {
			return nil
		}
		return v.LastDayOfMonth
	}).(pulumi.BoolPtrOutput)
}

// Start time of the report. If empty, the start date will be set to the creation time. Note that times will be saved as UTC in Grafana.
func (o ReportSchedulePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportSchedule) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Whether to send the report only on work days. Defaults to `false`.
func (o ReportSchedulePtrOutput) WorkdaysOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ReportSchedule) *bool {
		if v == nil {
			return nil
		}
		return v.WorkdaysOnly
	}).(pulumi.BoolPtrOutput)
}

type ReportTimeRange struct {
	// Start of the time range.
	From *string `pulumi:"from"`
	// End of the time range.
	To *string `pulumi:"to"`
}

// ReportTimeRangeInput is an input type that accepts ReportTimeRangeArgs and ReportTimeRangeOutput values.
// You can construct a concrete instance of `ReportTimeRangeInput` via:
//
//	ReportTimeRangeArgs{...}
type ReportTimeRangeInput interface {
	pulumi.Input

	ToReportTimeRangeOutput() ReportTimeRangeOutput
	ToReportTimeRangeOutputWithContext(context.Context) ReportTimeRangeOutput
}

type ReportTimeRangeArgs struct {
	// Start of the time range.
	From pulumi.StringPtrInput `pulumi:"from"`
	// End of the time range.
	To pulumi.StringPtrInput `pulumi:"to"`
}

func (ReportTimeRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportTimeRange)(nil)).Elem()
}

func (i ReportTimeRangeArgs) ToReportTimeRangeOutput() ReportTimeRangeOutput {
	return i.ToReportTimeRangeOutputWithContext(context.Background())
}

func (i ReportTimeRangeArgs) ToReportTimeRangeOutputWithContext(ctx context.Context) ReportTimeRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportTimeRangeOutput)
}

func (i ReportTimeRangeArgs) ToReportTimeRangePtrOutput() ReportTimeRangePtrOutput {
	return i.ToReportTimeRangePtrOutputWithContext(context.Background())
}

func (i ReportTimeRangeArgs) ToReportTimeRangePtrOutputWithContext(ctx context.Context) ReportTimeRangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportTimeRangeOutput).ToReportTimeRangePtrOutputWithContext(ctx)
}

// ReportTimeRangePtrInput is an input type that accepts ReportTimeRangeArgs, ReportTimeRangePtr and ReportTimeRangePtrOutput values.
// You can construct a concrete instance of `ReportTimeRangePtrInput` via:
//
//	        ReportTimeRangeArgs{...}
//
//	or:
//
//	        nil
type ReportTimeRangePtrInput interface {
	pulumi.Input

	ToReportTimeRangePtrOutput() ReportTimeRangePtrOutput
	ToReportTimeRangePtrOutputWithContext(context.Context) ReportTimeRangePtrOutput
}

type reportTimeRangePtrType ReportTimeRangeArgs

func ReportTimeRangePtr(v *ReportTimeRangeArgs) ReportTimeRangePtrInput {
	return (*reportTimeRangePtrType)(v)
}

func (*reportTimeRangePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportTimeRange)(nil)).Elem()
}

func (i *reportTimeRangePtrType) ToReportTimeRangePtrOutput() ReportTimeRangePtrOutput {
	return i.ToReportTimeRangePtrOutputWithContext(context.Background())
}

func (i *reportTimeRangePtrType) ToReportTimeRangePtrOutputWithContext(ctx context.Context) ReportTimeRangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportTimeRangePtrOutput)
}

type ReportTimeRangeOutput struct{ *pulumi.OutputState }

func (ReportTimeRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportTimeRange)(nil)).Elem()
}

func (o ReportTimeRangeOutput) ToReportTimeRangeOutput() ReportTimeRangeOutput {
	return o
}

func (o ReportTimeRangeOutput) ToReportTimeRangeOutputWithContext(ctx context.Context) ReportTimeRangeOutput {
	return o
}

func (o ReportTimeRangeOutput) ToReportTimeRangePtrOutput() ReportTimeRangePtrOutput {
	return o.ToReportTimeRangePtrOutputWithContext(context.Background())
}

func (o ReportTimeRangeOutput) ToReportTimeRangePtrOutputWithContext(ctx context.Context) ReportTimeRangePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReportTimeRange) *ReportTimeRange {
		return &v
	}).(ReportTimeRangePtrOutput)
}

// Start of the time range.
func (o ReportTimeRangeOutput) From() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportTimeRange) *string { return v.From }).(pulumi.StringPtrOutput)
}

// End of the time range.
func (o ReportTimeRangeOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportTimeRange) *string { return v.To }).(pulumi.StringPtrOutput)
}

type ReportTimeRangePtrOutput struct{ *pulumi.OutputState }

func (ReportTimeRangePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportTimeRange)(nil)).Elem()
}

func (o ReportTimeRangePtrOutput) ToReportTimeRangePtrOutput() ReportTimeRangePtrOutput {
	return o
}

func (o ReportTimeRangePtrOutput) ToReportTimeRangePtrOutputWithContext(ctx context.Context) ReportTimeRangePtrOutput {
	return o
}

func (o ReportTimeRangePtrOutput) Elem() ReportTimeRangeOutput {
	return o.ApplyT(func(v *ReportTimeRange) ReportTimeRange {
		if v != nil {
			return *v
		}
		var ret ReportTimeRange
		return ret
	}).(ReportTimeRangeOutput)
}

// Start of the time range.
func (o ReportTimeRangePtrOutput) From() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportTimeRange) *string {
		if v == nil {
			return nil
		}
		return v.From
	}).(pulumi.StringPtrOutput)
}

// End of the time range.
func (o ReportTimeRangePtrOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportTimeRange) *string {
		if v == nil {
			return nil
		}
		return v.To
	}).(pulumi.StringPtrOutput)
}

type RolePermission struct {
	// Specific action users granted with the role will be allowed to perform (for example: `users:read`)
	Action string `pulumi:"action"`
	// Scope to restrict the action to a set of resources (for example: `users:*` or `roles:customrole1`)
	Scope *string `pulumi:"scope"`
}

// RolePermissionInput is an input type that accepts RolePermissionArgs and RolePermissionOutput values.
// You can construct a concrete instance of `RolePermissionInput` via:
//
//	RolePermissionArgs{...}
type RolePermissionInput interface {
	pulumi.Input

	ToRolePermissionOutput() RolePermissionOutput
	ToRolePermissionOutputWithContext(context.Context) RolePermissionOutput
}

type RolePermissionArgs struct {
	// Specific action users granted with the role will be allowed to perform (for example: `users:read`)
	Action pulumi.StringInput `pulumi:"action"`
	// Scope to restrict the action to a set of resources (for example: `users:*` or `roles:customrole1`)
	Scope pulumi.StringPtrInput `pulumi:"scope"`
}

func (RolePermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RolePermission)(nil)).Elem()
}

func (i RolePermissionArgs) ToRolePermissionOutput() RolePermissionOutput {
	return i.ToRolePermissionOutputWithContext(context.Background())
}

func (i RolePermissionArgs) ToRolePermissionOutputWithContext(ctx context.Context) RolePermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolePermissionOutput)
}

// RolePermissionArrayInput is an input type that accepts RolePermissionArray and RolePermissionArrayOutput values.
// You can construct a concrete instance of `RolePermissionArrayInput` via:
//
//	RolePermissionArray{ RolePermissionArgs{...} }
type RolePermissionArrayInput interface {
	pulumi.Input

	ToRolePermissionArrayOutput() RolePermissionArrayOutput
	ToRolePermissionArrayOutputWithContext(context.Context) RolePermissionArrayOutput
}

type RolePermissionArray []RolePermissionInput

func (RolePermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RolePermission)(nil)).Elem()
}

func (i RolePermissionArray) ToRolePermissionArrayOutput() RolePermissionArrayOutput {
	return i.ToRolePermissionArrayOutputWithContext(context.Background())
}

func (i RolePermissionArray) ToRolePermissionArrayOutputWithContext(ctx context.Context) RolePermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolePermissionArrayOutput)
}

type RolePermissionOutput struct{ *pulumi.OutputState }

func (RolePermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RolePermission)(nil)).Elem()
}

func (o RolePermissionOutput) ToRolePermissionOutput() RolePermissionOutput {
	return o
}

func (o RolePermissionOutput) ToRolePermissionOutputWithContext(ctx context.Context) RolePermissionOutput {
	return o
}

// Specific action users granted with the role will be allowed to perform (for example: `users:read`)
func (o RolePermissionOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v RolePermission) string { return v.Action }).(pulumi.StringOutput)
}

// Scope to restrict the action to a set of resources (for example: `users:*` or `roles:customrole1`)
func (o RolePermissionOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RolePermission) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

type RolePermissionArrayOutput struct{ *pulumi.OutputState }

func (RolePermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RolePermission)(nil)).Elem()
}

func (o RolePermissionArrayOutput) ToRolePermissionArrayOutput() RolePermissionArrayOutput {
	return o
}

func (o RolePermissionArrayOutput) ToRolePermissionArrayOutputWithContext(ctx context.Context) RolePermissionArrayOutput {
	return o
}

func (o RolePermissionArrayOutput) Index(i pulumi.IntInput) RolePermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RolePermission {
		return vs[0].([]RolePermission)[vs[1].(int)]
	}).(RolePermissionOutput)
}

type RuleGroupRule struct {
	// Key-value pairs of metadata to attach to the alert rule that may add user-defined context, but cannot be used for matching, grouping, or routing. Defaults to `map[]`.
	Annotations map[string]string `pulumi:"annotations"`
	// The `refId` of the query node in the `data` field to use as the alert condition.
	Condition string `pulumi:"condition"`
	// A sequence of stages that describe the contents of the rule.
	Datas []RuleGroupRuleData `pulumi:"datas"`
	// Describes what state to enter when the rule's query is invalid and the rule cannot be executed. Options are OK, Error, and Alerting. Defaults to `Alerting`.
	ExecErrState *string `pulumi:"execErrState"`
	// The amount of time for which the rule must be breached for the rule to be considered to be Firing. Before this time has elapsed, the rule is only considered to be Pending. Defaults to `0`.
	For *string `pulumi:"for"`
	// Key-value pairs to attach to the alert rule that can be used in matching, grouping, and routing. Defaults to `map[]`.
	Labels map[string]string `pulumi:"labels"`
	// The name of the alert rule.
	Name string `pulumi:"name"`
	// Describes what state to enter when the rule's query returns No Data. Options are OK, NoData, and Alerting. Defaults to `NoData`.
	NoDataState *string `pulumi:"noDataState"`
	// The unique identifier of the alert rule.
	Uid *string `pulumi:"uid"`
}

// RuleGroupRuleInput is an input type that accepts RuleGroupRuleArgs and RuleGroupRuleOutput values.
// You can construct a concrete instance of `RuleGroupRuleInput` via:
//
//	RuleGroupRuleArgs{...}
type RuleGroupRuleInput interface {
	pulumi.Input

	ToRuleGroupRuleOutput() RuleGroupRuleOutput
	ToRuleGroupRuleOutputWithContext(context.Context) RuleGroupRuleOutput
}

type RuleGroupRuleArgs struct {
	// Key-value pairs of metadata to attach to the alert rule that may add user-defined context, but cannot be used for matching, grouping, or routing. Defaults to `map[]`.
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	// The `refId` of the query node in the `data` field to use as the alert condition.
	Condition pulumi.StringInput `pulumi:"condition"`
	// A sequence of stages that describe the contents of the rule.
	Datas RuleGroupRuleDataArrayInput `pulumi:"datas"`
	// Describes what state to enter when the rule's query is invalid and the rule cannot be executed. Options are OK, Error, and Alerting. Defaults to `Alerting`.
	ExecErrState pulumi.StringPtrInput `pulumi:"execErrState"`
	// The amount of time for which the rule must be breached for the rule to be considered to be Firing. Before this time has elapsed, the rule is only considered to be Pending. Defaults to `0`.
	For pulumi.StringPtrInput `pulumi:"for"`
	// Key-value pairs to attach to the alert rule that can be used in matching, grouping, and routing. Defaults to `map[]`.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// The name of the alert rule.
	Name pulumi.StringInput `pulumi:"name"`
	// Describes what state to enter when the rule's query returns No Data. Options are OK, NoData, and Alerting. Defaults to `NoData`.
	NoDataState pulumi.StringPtrInput `pulumi:"noDataState"`
	// The unique identifier of the alert rule.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (RuleGroupRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleGroupRule)(nil)).Elem()
}

func (i RuleGroupRuleArgs) ToRuleGroupRuleOutput() RuleGroupRuleOutput {
	return i.ToRuleGroupRuleOutputWithContext(context.Background())
}

func (i RuleGroupRuleArgs) ToRuleGroupRuleOutputWithContext(ctx context.Context) RuleGroupRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleGroupRuleOutput)
}

// RuleGroupRuleArrayInput is an input type that accepts RuleGroupRuleArray and RuleGroupRuleArrayOutput values.
// You can construct a concrete instance of `RuleGroupRuleArrayInput` via:
//
//	RuleGroupRuleArray{ RuleGroupRuleArgs{...} }
type RuleGroupRuleArrayInput interface {
	pulumi.Input

	ToRuleGroupRuleArrayOutput() RuleGroupRuleArrayOutput
	ToRuleGroupRuleArrayOutputWithContext(context.Context) RuleGroupRuleArrayOutput
}

type RuleGroupRuleArray []RuleGroupRuleInput

func (RuleGroupRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleGroupRule)(nil)).Elem()
}

func (i RuleGroupRuleArray) ToRuleGroupRuleArrayOutput() RuleGroupRuleArrayOutput {
	return i.ToRuleGroupRuleArrayOutputWithContext(context.Background())
}

func (i RuleGroupRuleArray) ToRuleGroupRuleArrayOutputWithContext(ctx context.Context) RuleGroupRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleGroupRuleArrayOutput)
}

type RuleGroupRuleOutput struct{ *pulumi.OutputState }

func (RuleGroupRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleGroupRule)(nil)).Elem()
}

func (o RuleGroupRuleOutput) ToRuleGroupRuleOutput() RuleGroupRuleOutput {
	return o
}

func (o RuleGroupRuleOutput) ToRuleGroupRuleOutputWithContext(ctx context.Context) RuleGroupRuleOutput {
	return o
}

// Key-value pairs of metadata to attach to the alert rule that may add user-defined context, but cannot be used for matching, grouping, or routing. Defaults to `map[]`.
func (o RuleGroupRuleOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v RuleGroupRule) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// The `refId` of the query node in the `data` field to use as the alert condition.
func (o RuleGroupRuleOutput) Condition() pulumi.StringOutput {
	return o.ApplyT(func(v RuleGroupRule) string { return v.Condition }).(pulumi.StringOutput)
}

// A sequence of stages that describe the contents of the rule.
func (o RuleGroupRuleOutput) Datas() RuleGroupRuleDataArrayOutput {
	return o.ApplyT(func(v RuleGroupRule) []RuleGroupRuleData { return v.Datas }).(RuleGroupRuleDataArrayOutput)
}

// Describes what state to enter when the rule's query is invalid and the rule cannot be executed. Options are OK, Error, and Alerting. Defaults to `Alerting`.
func (o RuleGroupRuleOutput) ExecErrState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleGroupRule) *string { return v.ExecErrState }).(pulumi.StringPtrOutput)
}

// The amount of time for which the rule must be breached for the rule to be considered to be Firing. Before this time has elapsed, the rule is only considered to be Pending. Defaults to `0`.
func (o RuleGroupRuleOutput) For() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleGroupRule) *string { return v.For }).(pulumi.StringPtrOutput)
}

// Key-value pairs to attach to the alert rule that can be used in matching, grouping, and routing. Defaults to `map[]`.
func (o RuleGroupRuleOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v RuleGroupRule) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The name of the alert rule.
func (o RuleGroupRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RuleGroupRule) string { return v.Name }).(pulumi.StringOutput)
}

// Describes what state to enter when the rule's query returns No Data. Options are OK, NoData, and Alerting. Defaults to `NoData`.
func (o RuleGroupRuleOutput) NoDataState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleGroupRule) *string { return v.NoDataState }).(pulumi.StringPtrOutput)
}

// The unique identifier of the alert rule.
func (o RuleGroupRuleOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleGroupRule) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type RuleGroupRuleArrayOutput struct{ *pulumi.OutputState }

func (RuleGroupRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleGroupRule)(nil)).Elem()
}

func (o RuleGroupRuleArrayOutput) ToRuleGroupRuleArrayOutput() RuleGroupRuleArrayOutput {
	return o
}

func (o RuleGroupRuleArrayOutput) ToRuleGroupRuleArrayOutputWithContext(ctx context.Context) RuleGroupRuleArrayOutput {
	return o
}

func (o RuleGroupRuleArrayOutput) Index(i pulumi.IntInput) RuleGroupRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleGroupRule {
		return vs[0].([]RuleGroupRule)[vs[1].(int)]
	}).(RuleGroupRuleOutput)
}

type RuleGroupRuleData struct {
	DatasourceUid     string                             `pulumi:"datasourceUid"`
	Model             string                             `pulumi:"model"`
	QueryType         *string                            `pulumi:"queryType"`
	RefId             string                             `pulumi:"refId"`
	RelativeTimeRange RuleGroupRuleDataRelativeTimeRange `pulumi:"relativeTimeRange"`
}

// RuleGroupRuleDataInput is an input type that accepts RuleGroupRuleDataArgs and RuleGroupRuleDataOutput values.
// You can construct a concrete instance of `RuleGroupRuleDataInput` via:
//
//	RuleGroupRuleDataArgs{...}
type RuleGroupRuleDataInput interface {
	pulumi.Input

	ToRuleGroupRuleDataOutput() RuleGroupRuleDataOutput
	ToRuleGroupRuleDataOutputWithContext(context.Context) RuleGroupRuleDataOutput
}

type RuleGroupRuleDataArgs struct {
	DatasourceUid     pulumi.StringInput                      `pulumi:"datasourceUid"`
	Model             pulumi.StringInput                      `pulumi:"model"`
	QueryType         pulumi.StringPtrInput                   `pulumi:"queryType"`
	RefId             pulumi.StringInput                      `pulumi:"refId"`
	RelativeTimeRange RuleGroupRuleDataRelativeTimeRangeInput `pulumi:"relativeTimeRange"`
}

func (RuleGroupRuleDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleGroupRuleData)(nil)).Elem()
}

func (i RuleGroupRuleDataArgs) ToRuleGroupRuleDataOutput() RuleGroupRuleDataOutput {
	return i.ToRuleGroupRuleDataOutputWithContext(context.Background())
}

func (i RuleGroupRuleDataArgs) ToRuleGroupRuleDataOutputWithContext(ctx context.Context) RuleGroupRuleDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleGroupRuleDataOutput)
}

// RuleGroupRuleDataArrayInput is an input type that accepts RuleGroupRuleDataArray and RuleGroupRuleDataArrayOutput values.
// You can construct a concrete instance of `RuleGroupRuleDataArrayInput` via:
//
//	RuleGroupRuleDataArray{ RuleGroupRuleDataArgs{...} }
type RuleGroupRuleDataArrayInput interface {
	pulumi.Input

	ToRuleGroupRuleDataArrayOutput() RuleGroupRuleDataArrayOutput
	ToRuleGroupRuleDataArrayOutputWithContext(context.Context) RuleGroupRuleDataArrayOutput
}

type RuleGroupRuleDataArray []RuleGroupRuleDataInput

func (RuleGroupRuleDataArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleGroupRuleData)(nil)).Elem()
}

func (i RuleGroupRuleDataArray) ToRuleGroupRuleDataArrayOutput() RuleGroupRuleDataArrayOutput {
	return i.ToRuleGroupRuleDataArrayOutputWithContext(context.Background())
}

func (i RuleGroupRuleDataArray) ToRuleGroupRuleDataArrayOutputWithContext(ctx context.Context) RuleGroupRuleDataArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleGroupRuleDataArrayOutput)
}

type RuleGroupRuleDataOutput struct{ *pulumi.OutputState }

func (RuleGroupRuleDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleGroupRuleData)(nil)).Elem()
}

func (o RuleGroupRuleDataOutput) ToRuleGroupRuleDataOutput() RuleGroupRuleDataOutput {
	return o
}

func (o RuleGroupRuleDataOutput) ToRuleGroupRuleDataOutputWithContext(ctx context.Context) RuleGroupRuleDataOutput {
	return o
}

func (o RuleGroupRuleDataOutput) DatasourceUid() pulumi.StringOutput {
	return o.ApplyT(func(v RuleGroupRuleData) string { return v.DatasourceUid }).(pulumi.StringOutput)
}

func (o RuleGroupRuleDataOutput) Model() pulumi.StringOutput {
	return o.ApplyT(func(v RuleGroupRuleData) string { return v.Model }).(pulumi.StringOutput)
}

func (o RuleGroupRuleDataOutput) QueryType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleGroupRuleData) *string { return v.QueryType }).(pulumi.StringPtrOutput)
}

func (o RuleGroupRuleDataOutput) RefId() pulumi.StringOutput {
	return o.ApplyT(func(v RuleGroupRuleData) string { return v.RefId }).(pulumi.StringOutput)
}

func (o RuleGroupRuleDataOutput) RelativeTimeRange() RuleGroupRuleDataRelativeTimeRangeOutput {
	return o.ApplyT(func(v RuleGroupRuleData) RuleGroupRuleDataRelativeTimeRange { return v.RelativeTimeRange }).(RuleGroupRuleDataRelativeTimeRangeOutput)
}

type RuleGroupRuleDataArrayOutput struct{ *pulumi.OutputState }

func (RuleGroupRuleDataArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleGroupRuleData)(nil)).Elem()
}

func (o RuleGroupRuleDataArrayOutput) ToRuleGroupRuleDataArrayOutput() RuleGroupRuleDataArrayOutput {
	return o
}

func (o RuleGroupRuleDataArrayOutput) ToRuleGroupRuleDataArrayOutputWithContext(ctx context.Context) RuleGroupRuleDataArrayOutput {
	return o
}

func (o RuleGroupRuleDataArrayOutput) Index(i pulumi.IntInput) RuleGroupRuleDataOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleGroupRuleData {
		return vs[0].([]RuleGroupRuleData)[vs[1].(int)]
	}).(RuleGroupRuleDataOutput)
}

type RuleGroupRuleDataRelativeTimeRange struct {
	From int `pulumi:"from"`
	To   int `pulumi:"to"`
}

// RuleGroupRuleDataRelativeTimeRangeInput is an input type that accepts RuleGroupRuleDataRelativeTimeRangeArgs and RuleGroupRuleDataRelativeTimeRangeOutput values.
// You can construct a concrete instance of `RuleGroupRuleDataRelativeTimeRangeInput` via:
//
//	RuleGroupRuleDataRelativeTimeRangeArgs{...}
type RuleGroupRuleDataRelativeTimeRangeInput interface {
	pulumi.Input

	ToRuleGroupRuleDataRelativeTimeRangeOutput() RuleGroupRuleDataRelativeTimeRangeOutput
	ToRuleGroupRuleDataRelativeTimeRangeOutputWithContext(context.Context) RuleGroupRuleDataRelativeTimeRangeOutput
}

type RuleGroupRuleDataRelativeTimeRangeArgs struct {
	From pulumi.IntInput `pulumi:"from"`
	To   pulumi.IntInput `pulumi:"to"`
}

func (RuleGroupRuleDataRelativeTimeRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleGroupRuleDataRelativeTimeRange)(nil)).Elem()
}

func (i RuleGroupRuleDataRelativeTimeRangeArgs) ToRuleGroupRuleDataRelativeTimeRangeOutput() RuleGroupRuleDataRelativeTimeRangeOutput {
	return i.ToRuleGroupRuleDataRelativeTimeRangeOutputWithContext(context.Background())
}

func (i RuleGroupRuleDataRelativeTimeRangeArgs) ToRuleGroupRuleDataRelativeTimeRangeOutputWithContext(ctx context.Context) RuleGroupRuleDataRelativeTimeRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleGroupRuleDataRelativeTimeRangeOutput)
}

type RuleGroupRuleDataRelativeTimeRangeOutput struct{ *pulumi.OutputState }

func (RuleGroupRuleDataRelativeTimeRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleGroupRuleDataRelativeTimeRange)(nil)).Elem()
}

func (o RuleGroupRuleDataRelativeTimeRangeOutput) ToRuleGroupRuleDataRelativeTimeRangeOutput() RuleGroupRuleDataRelativeTimeRangeOutput {
	return o
}

func (o RuleGroupRuleDataRelativeTimeRangeOutput) ToRuleGroupRuleDataRelativeTimeRangeOutputWithContext(ctx context.Context) RuleGroupRuleDataRelativeTimeRangeOutput {
	return o
}

func (o RuleGroupRuleDataRelativeTimeRangeOutput) From() pulumi.IntOutput {
	return o.ApplyT(func(v RuleGroupRuleDataRelativeTimeRange) int { return v.From }).(pulumi.IntOutput)
}

func (o RuleGroupRuleDataRelativeTimeRangeOutput) To() pulumi.IntOutput {
	return o.ApplyT(func(v RuleGroupRuleDataRelativeTimeRange) int { return v.To }).(pulumi.IntOutput)
}

type SyntheticMonitoringCheckSettings struct {
	// Settings for DNS check. The target must be a valid hostname (or IP address for `PTR` records).
	Dns *SyntheticMonitoringCheckSettingsDns `pulumi:"dns"`
	// Settings for HTTP check. The target must be a URL (http or https).
	Http *SyntheticMonitoringCheckSettingsHttp `pulumi:"http"`
	// Settings for ping (ICMP) check. The target must be a valid hostname or IP address.
	Ping *SyntheticMonitoringCheckSettingsPing `pulumi:"ping"`
	// Settings for TCP check. The target must be of the form `<host>:<port>`, where the host portion must be a valid hostname or IP address.
	Tcp *SyntheticMonitoringCheckSettingsTcp `pulumi:"tcp"`
	// Settings for traceroute check. The target must be a valid hostname or IP address
	Traceroute *SyntheticMonitoringCheckSettingsTraceroute `pulumi:"traceroute"`
}

// SyntheticMonitoringCheckSettingsInput is an input type that accepts SyntheticMonitoringCheckSettingsArgs and SyntheticMonitoringCheckSettingsOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsInput` via:
//
//	SyntheticMonitoringCheckSettingsArgs{...}
type SyntheticMonitoringCheckSettingsInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsOutput() SyntheticMonitoringCheckSettingsOutput
	ToSyntheticMonitoringCheckSettingsOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsOutput
}

type SyntheticMonitoringCheckSettingsArgs struct {
	// Settings for DNS check. The target must be a valid hostname (or IP address for `PTR` records).
	Dns SyntheticMonitoringCheckSettingsDnsPtrInput `pulumi:"dns"`
	// Settings for HTTP check. The target must be a URL (http or https).
	Http SyntheticMonitoringCheckSettingsHttpPtrInput `pulumi:"http"`
	// Settings for ping (ICMP) check. The target must be a valid hostname or IP address.
	Ping SyntheticMonitoringCheckSettingsPingPtrInput `pulumi:"ping"`
	// Settings for TCP check. The target must be of the form `<host>:<port>`, where the host portion must be a valid hostname or IP address.
	Tcp SyntheticMonitoringCheckSettingsTcpPtrInput `pulumi:"tcp"`
	// Settings for traceroute check. The target must be a valid hostname or IP address
	Traceroute SyntheticMonitoringCheckSettingsTraceroutePtrInput `pulumi:"traceroute"`
}

func (SyntheticMonitoringCheckSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettings)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsArgs) ToSyntheticMonitoringCheckSettingsOutput() SyntheticMonitoringCheckSettingsOutput {
	return i.ToSyntheticMonitoringCheckSettingsOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsArgs) ToSyntheticMonitoringCheckSettingsOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsOutput)
}

func (i SyntheticMonitoringCheckSettingsArgs) ToSyntheticMonitoringCheckSettingsPtrOutput() SyntheticMonitoringCheckSettingsPtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsPtrOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsArgs) ToSyntheticMonitoringCheckSettingsPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsOutput).ToSyntheticMonitoringCheckSettingsPtrOutputWithContext(ctx)
}

// SyntheticMonitoringCheckSettingsPtrInput is an input type that accepts SyntheticMonitoringCheckSettingsArgs, SyntheticMonitoringCheckSettingsPtr and SyntheticMonitoringCheckSettingsPtrOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsPtrInput` via:
//
//	        SyntheticMonitoringCheckSettingsArgs{...}
//
//	or:
//
//	        nil
type SyntheticMonitoringCheckSettingsPtrInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsPtrOutput() SyntheticMonitoringCheckSettingsPtrOutput
	ToSyntheticMonitoringCheckSettingsPtrOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsPtrOutput
}

type syntheticMonitoringCheckSettingsPtrType SyntheticMonitoringCheckSettingsArgs

func SyntheticMonitoringCheckSettingsPtr(v *SyntheticMonitoringCheckSettingsArgs) SyntheticMonitoringCheckSettingsPtrInput {
	return (*syntheticMonitoringCheckSettingsPtrType)(v)
}

func (*syntheticMonitoringCheckSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettings)(nil)).Elem()
}

func (i *syntheticMonitoringCheckSettingsPtrType) ToSyntheticMonitoringCheckSettingsPtrOutput() SyntheticMonitoringCheckSettingsPtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsPtrOutputWithContext(context.Background())
}

func (i *syntheticMonitoringCheckSettingsPtrType) ToSyntheticMonitoringCheckSettingsPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsPtrOutput)
}

type SyntheticMonitoringCheckSettingsOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettings)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsOutput) ToSyntheticMonitoringCheckSettingsOutput() SyntheticMonitoringCheckSettingsOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsOutput) ToSyntheticMonitoringCheckSettingsOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsOutput) ToSyntheticMonitoringCheckSettingsPtrOutput() SyntheticMonitoringCheckSettingsPtrOutput {
	return o.ToSyntheticMonitoringCheckSettingsPtrOutputWithContext(context.Background())
}

func (o SyntheticMonitoringCheckSettingsOutput) ToSyntheticMonitoringCheckSettingsPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticMonitoringCheckSettings) *SyntheticMonitoringCheckSettings {
		return &v
	}).(SyntheticMonitoringCheckSettingsPtrOutput)
}

// Settings for DNS check. The target must be a valid hostname (or IP address for `PTR` records).
func (o SyntheticMonitoringCheckSettingsOutput) Dns() SyntheticMonitoringCheckSettingsDnsPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettings) *SyntheticMonitoringCheckSettingsDns { return v.Dns }).(SyntheticMonitoringCheckSettingsDnsPtrOutput)
}

// Settings for HTTP check. The target must be a URL (http or https).
func (o SyntheticMonitoringCheckSettingsOutput) Http() SyntheticMonitoringCheckSettingsHttpPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettings) *SyntheticMonitoringCheckSettingsHttp { return v.Http }).(SyntheticMonitoringCheckSettingsHttpPtrOutput)
}

// Settings for ping (ICMP) check. The target must be a valid hostname or IP address.
func (o SyntheticMonitoringCheckSettingsOutput) Ping() SyntheticMonitoringCheckSettingsPingPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettings) *SyntheticMonitoringCheckSettingsPing { return v.Ping }).(SyntheticMonitoringCheckSettingsPingPtrOutput)
}

// Settings for TCP check. The target must be of the form `<host>:<port>`, where the host portion must be a valid hostname or IP address.
func (o SyntheticMonitoringCheckSettingsOutput) Tcp() SyntheticMonitoringCheckSettingsTcpPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettings) *SyntheticMonitoringCheckSettingsTcp { return v.Tcp }).(SyntheticMonitoringCheckSettingsTcpPtrOutput)
}

// Settings for traceroute check. The target must be a valid hostname or IP address
func (o SyntheticMonitoringCheckSettingsOutput) Traceroute() SyntheticMonitoringCheckSettingsTraceroutePtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettings) *SyntheticMonitoringCheckSettingsTraceroute {
		return v.Traceroute
	}).(SyntheticMonitoringCheckSettingsTraceroutePtrOutput)
}

type SyntheticMonitoringCheckSettingsPtrOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettings)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsPtrOutput) ToSyntheticMonitoringCheckSettingsPtrOutput() SyntheticMonitoringCheckSettingsPtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsPtrOutput) ToSyntheticMonitoringCheckSettingsPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsPtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsPtrOutput) Elem() SyntheticMonitoringCheckSettingsOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettings) SyntheticMonitoringCheckSettings {
		if v != nil {
			return *v
		}
		var ret SyntheticMonitoringCheckSettings
		return ret
	}).(SyntheticMonitoringCheckSettingsOutput)
}

// Settings for DNS check. The target must be a valid hostname (or IP address for `PTR` records).
func (o SyntheticMonitoringCheckSettingsPtrOutput) Dns() SyntheticMonitoringCheckSettingsDnsPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettings) *SyntheticMonitoringCheckSettingsDns {
		if v == nil {
			return nil
		}
		return v.Dns
	}).(SyntheticMonitoringCheckSettingsDnsPtrOutput)
}

// Settings for HTTP check. The target must be a URL (http or https).
func (o SyntheticMonitoringCheckSettingsPtrOutput) Http() SyntheticMonitoringCheckSettingsHttpPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettings) *SyntheticMonitoringCheckSettingsHttp {
		if v == nil {
			return nil
		}
		return v.Http
	}).(SyntheticMonitoringCheckSettingsHttpPtrOutput)
}

// Settings for ping (ICMP) check. The target must be a valid hostname or IP address.
func (o SyntheticMonitoringCheckSettingsPtrOutput) Ping() SyntheticMonitoringCheckSettingsPingPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettings) *SyntheticMonitoringCheckSettingsPing {
		if v == nil {
			return nil
		}
		return v.Ping
	}).(SyntheticMonitoringCheckSettingsPingPtrOutput)
}

// Settings for TCP check. The target must be of the form `<host>:<port>`, where the host portion must be a valid hostname or IP address.
func (o SyntheticMonitoringCheckSettingsPtrOutput) Tcp() SyntheticMonitoringCheckSettingsTcpPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettings) *SyntheticMonitoringCheckSettingsTcp {
		if v == nil {
			return nil
		}
		return v.Tcp
	}).(SyntheticMonitoringCheckSettingsTcpPtrOutput)
}

// Settings for traceroute check. The target must be a valid hostname or IP address
func (o SyntheticMonitoringCheckSettingsPtrOutput) Traceroute() SyntheticMonitoringCheckSettingsTraceroutePtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettings) *SyntheticMonitoringCheckSettingsTraceroute {
		if v == nil {
			return nil
		}
		return v.Traceroute
	}).(SyntheticMonitoringCheckSettingsTraceroutePtrOutput)
}

type SyntheticMonitoringCheckSettingsDns struct {
	IpVersion             *string                                                   `pulumi:"ipVersion"`
	Port                  *int                                                      `pulumi:"port"`
	Protocol              *string                                                   `pulumi:"protocol"`
	RecordType            *string                                                   `pulumi:"recordType"`
	Server                *string                                                   `pulumi:"server"`
	SourceIpAddress       *string                                                   `pulumi:"sourceIpAddress"`
	ValidRCodes           []string                                                  `pulumi:"validRCodes"`
	ValidateAdditionalRrs []SyntheticMonitoringCheckSettingsDnsValidateAdditionalRr `pulumi:"validateAdditionalRrs"`
	ValidateAnswerRrs     *SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs     `pulumi:"validateAnswerRrs"`
	ValidateAuthorityRrs  *SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs  `pulumi:"validateAuthorityRrs"`
}

// SyntheticMonitoringCheckSettingsDnsInput is an input type that accepts SyntheticMonitoringCheckSettingsDnsArgs and SyntheticMonitoringCheckSettingsDnsOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsDnsInput` via:
//
//	SyntheticMonitoringCheckSettingsDnsArgs{...}
type SyntheticMonitoringCheckSettingsDnsInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsDnsOutput() SyntheticMonitoringCheckSettingsDnsOutput
	ToSyntheticMonitoringCheckSettingsDnsOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsDnsOutput
}

type SyntheticMonitoringCheckSettingsDnsArgs struct {
	IpVersion             pulumi.StringPtrInput                                             `pulumi:"ipVersion"`
	Port                  pulumi.IntPtrInput                                                `pulumi:"port"`
	Protocol              pulumi.StringPtrInput                                             `pulumi:"protocol"`
	RecordType            pulumi.StringPtrInput                                             `pulumi:"recordType"`
	Server                pulumi.StringPtrInput                                             `pulumi:"server"`
	SourceIpAddress       pulumi.StringPtrInput                                             `pulumi:"sourceIpAddress"`
	ValidRCodes           pulumi.StringArrayInput                                           `pulumi:"validRCodes"`
	ValidateAdditionalRrs SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayInput `pulumi:"validateAdditionalRrs"`
	ValidateAnswerRrs     SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrInput      `pulumi:"validateAnswerRrs"`
	ValidateAuthorityRrs  SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrInput   `pulumi:"validateAuthorityRrs"`
}

func (SyntheticMonitoringCheckSettingsDnsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsDns)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsDnsArgs) ToSyntheticMonitoringCheckSettingsDnsOutput() SyntheticMonitoringCheckSettingsDnsOutput {
	return i.ToSyntheticMonitoringCheckSettingsDnsOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsDnsArgs) ToSyntheticMonitoringCheckSettingsDnsOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsDnsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsDnsOutput)
}

func (i SyntheticMonitoringCheckSettingsDnsArgs) ToSyntheticMonitoringCheckSettingsDnsPtrOutput() SyntheticMonitoringCheckSettingsDnsPtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsDnsPtrOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsDnsArgs) ToSyntheticMonitoringCheckSettingsDnsPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsDnsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsDnsOutput).ToSyntheticMonitoringCheckSettingsDnsPtrOutputWithContext(ctx)
}

// SyntheticMonitoringCheckSettingsDnsPtrInput is an input type that accepts SyntheticMonitoringCheckSettingsDnsArgs, SyntheticMonitoringCheckSettingsDnsPtr and SyntheticMonitoringCheckSettingsDnsPtrOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsDnsPtrInput` via:
//
//	        SyntheticMonitoringCheckSettingsDnsArgs{...}
//
//	or:
//
//	        nil
type SyntheticMonitoringCheckSettingsDnsPtrInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsDnsPtrOutput() SyntheticMonitoringCheckSettingsDnsPtrOutput
	ToSyntheticMonitoringCheckSettingsDnsPtrOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsDnsPtrOutput
}

type syntheticMonitoringCheckSettingsDnsPtrType SyntheticMonitoringCheckSettingsDnsArgs

func SyntheticMonitoringCheckSettingsDnsPtr(v *SyntheticMonitoringCheckSettingsDnsArgs) SyntheticMonitoringCheckSettingsDnsPtrInput {
	return (*syntheticMonitoringCheckSettingsDnsPtrType)(v)
}

func (*syntheticMonitoringCheckSettingsDnsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettingsDns)(nil)).Elem()
}

func (i *syntheticMonitoringCheckSettingsDnsPtrType) ToSyntheticMonitoringCheckSettingsDnsPtrOutput() SyntheticMonitoringCheckSettingsDnsPtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsDnsPtrOutputWithContext(context.Background())
}

func (i *syntheticMonitoringCheckSettingsDnsPtrType) ToSyntheticMonitoringCheckSettingsDnsPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsDnsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsDnsPtrOutput)
}

type SyntheticMonitoringCheckSettingsDnsOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsDnsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsDns)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsDnsOutput) ToSyntheticMonitoringCheckSettingsDnsOutput() SyntheticMonitoringCheckSettingsDnsOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsDnsOutput) ToSyntheticMonitoringCheckSettingsDnsOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsDnsOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsDnsOutput) ToSyntheticMonitoringCheckSettingsDnsPtrOutput() SyntheticMonitoringCheckSettingsDnsPtrOutput {
	return o.ToSyntheticMonitoringCheckSettingsDnsPtrOutputWithContext(context.Background())
}

func (o SyntheticMonitoringCheckSettingsDnsOutput) ToSyntheticMonitoringCheckSettingsDnsPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsDnsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticMonitoringCheckSettingsDns) *SyntheticMonitoringCheckSettingsDns {
		return &v
	}).(SyntheticMonitoringCheckSettingsDnsPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsDnsOutput) IpVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsDns) *string { return v.IpVersion }).(pulumi.StringPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsDnsOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsDns) *int { return v.Port }).(pulumi.IntPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsDnsOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsDns) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsDnsOutput) RecordType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsDns) *string { return v.RecordType }).(pulumi.StringPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsDnsOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsDns) *string { return v.Server }).(pulumi.StringPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsDnsOutput) SourceIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsDns) *string { return v.SourceIpAddress }).(pulumi.StringPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsDnsOutput) ValidRCodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsDns) []string { return v.ValidRCodes }).(pulumi.StringArrayOutput)
}

func (o SyntheticMonitoringCheckSettingsDnsOutput) ValidateAdditionalRrs() SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsDns) []SyntheticMonitoringCheckSettingsDnsValidateAdditionalRr {
		return v.ValidateAdditionalRrs
	}).(SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayOutput)
}

func (o SyntheticMonitoringCheckSettingsDnsOutput) ValidateAnswerRrs() SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsDns) *SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs {
		return v.ValidateAnswerRrs
	}).(SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsDnsOutput) ValidateAuthorityRrs() SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsDns) *SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs {
		return v.ValidateAuthorityRrs
	}).(SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput)
}

type SyntheticMonitoringCheckSettingsDnsPtrOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsDnsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettingsDns)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsDnsPtrOutput) ToSyntheticMonitoringCheckSettingsDnsPtrOutput() SyntheticMonitoringCheckSettingsDnsPtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsDnsPtrOutput) ToSyntheticMonitoringCheckSettingsDnsPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsDnsPtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsDnsPtrOutput) Elem() SyntheticMonitoringCheckSettingsDnsOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsDns) SyntheticMonitoringCheckSettingsDns {
		if v != nil {
			return *v
		}
		var ret SyntheticMonitoringCheckSettingsDns
		return ret
	}).(SyntheticMonitoringCheckSettingsDnsOutput)
}

func (o SyntheticMonitoringCheckSettingsDnsPtrOutput) IpVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsDns) *string {
		if v == nil {
			return nil
		}
		return v.IpVersion
	}).(pulumi.StringPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsDnsPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsDns) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsDnsPtrOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsDns) *string {
		if v == nil {
			return nil
		}
		return v.Protocol
	}).(pulumi.StringPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsDnsPtrOutput) RecordType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsDns) *string {
		if v == nil {
			return nil
		}
		return v.RecordType
	}).(pulumi.StringPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsDnsPtrOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsDns) *string {
		if v == nil {
			return nil
		}
		return v.Server
	}).(pulumi.StringPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsDnsPtrOutput) SourceIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsDns) *string {
		if v == nil {
			return nil
		}
		return v.SourceIpAddress
	}).(pulumi.StringPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsDnsPtrOutput) ValidRCodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsDns) []string {
		if v == nil {
			return nil
		}
		return v.ValidRCodes
	}).(pulumi.StringArrayOutput)
}

func (o SyntheticMonitoringCheckSettingsDnsPtrOutput) ValidateAdditionalRrs() SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsDns) []SyntheticMonitoringCheckSettingsDnsValidateAdditionalRr {
		if v == nil {
			return nil
		}
		return v.ValidateAdditionalRrs
	}).(SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayOutput)
}

func (o SyntheticMonitoringCheckSettingsDnsPtrOutput) ValidateAnswerRrs() SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsDns) *SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs {
		if v == nil {
			return nil
		}
		return v.ValidateAnswerRrs
	}).(SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsDnsPtrOutput) ValidateAuthorityRrs() SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsDns) *SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs {
		if v == nil {
			return nil
		}
		return v.ValidateAuthorityRrs
	}).(SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput)
}

type SyntheticMonitoringCheckSettingsDnsValidateAdditionalRr struct {
	FailIfMatchesRegexps    []string `pulumi:"failIfMatchesRegexps"`
	FailIfNotMatchesRegexps []string `pulumi:"failIfNotMatchesRegexps"`
}

// SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrInput is an input type that accepts SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArgs and SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrInput` via:
//
//	SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArgs{...}
type SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput() SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput
	ToSyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput
}

type SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArgs struct {
	FailIfMatchesRegexps    pulumi.StringArrayInput `pulumi:"failIfMatchesRegexps"`
	FailIfNotMatchesRegexps pulumi.StringArrayInput `pulumi:"failIfNotMatchesRegexps"`
}

func (SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsDnsValidateAdditionalRr)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArgs) ToSyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput() SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput {
	return i.ToSyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArgs) ToSyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput)
}

// SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayInput is an input type that accepts SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArray and SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayInput` via:
//
//	SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArray{ SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArgs{...} }
type SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayOutput() SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayOutput
	ToSyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayOutput
}

type SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArray []SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrInput

func (SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyntheticMonitoringCheckSettingsDnsValidateAdditionalRr)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArray) ToSyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayOutput() SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayOutput {
	return i.ToSyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArray) ToSyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayOutput)
}

type SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsDnsValidateAdditionalRr)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput) ToSyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput() SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput) ToSyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput) FailIfMatchesRegexps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsDnsValidateAdditionalRr) []string {
		return v.FailIfMatchesRegexps
	}).(pulumi.StringArrayOutput)
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput) FailIfNotMatchesRegexps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsDnsValidateAdditionalRr) []string {
		return v.FailIfNotMatchesRegexps
	}).(pulumi.StringArrayOutput)
}

type SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyntheticMonitoringCheckSettingsDnsValidateAdditionalRr)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayOutput) ToSyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayOutput() SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayOutput) ToSyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayOutput) Index(i pulumi.IntInput) SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SyntheticMonitoringCheckSettingsDnsValidateAdditionalRr {
		return vs[0].([]SyntheticMonitoringCheckSettingsDnsValidateAdditionalRr)[vs[1].(int)]
	}).(SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput)
}

type SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs struct {
	FailIfMatchesRegexps    []string `pulumi:"failIfMatchesRegexps"`
	FailIfNotMatchesRegexps []string `pulumi:"failIfNotMatchesRegexps"`
}

// SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsInput is an input type that accepts SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsArgs and SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsInput` via:
//
//	SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsArgs{...}
type SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput() SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput
	ToSyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput
}

type SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsArgs struct {
	FailIfMatchesRegexps    pulumi.StringArrayInput `pulumi:"failIfMatchesRegexps"`
	FailIfNotMatchesRegexps pulumi.StringArrayInput `pulumi:"failIfNotMatchesRegexps"`
}

func (SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsArgs) ToSyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput() SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput {
	return i.ToSyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsArgs) ToSyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput)
}

func (i SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsArgs) ToSyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput() SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsArgs) ToSyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput).ToSyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutputWithContext(ctx)
}

// SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrInput is an input type that accepts SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsArgs, SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtr and SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrInput` via:
//
//	        SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsArgs{...}
//
//	or:
//
//	        nil
type SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput() SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput
	ToSyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput
}

type syntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrType SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsArgs

func SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtr(v *SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsArgs) SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrInput {
	return (*syntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrType)(v)
}

func (*syntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs)(nil)).Elem()
}

func (i *syntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrType) ToSyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput() SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutputWithContext(context.Background())
}

func (i *syntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrType) ToSyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput)
}

type SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput) ToSyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput() SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput) ToSyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput) ToSyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput() SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput {
	return o.ToSyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutputWithContext(context.Background())
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput) ToSyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs) *SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs {
		return &v
	}).(SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput) FailIfMatchesRegexps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs) []string { return v.FailIfMatchesRegexps }).(pulumi.StringArrayOutput)
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput) FailIfNotMatchesRegexps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs) []string {
		return v.FailIfNotMatchesRegexps
	}).(pulumi.StringArrayOutput)
}

type SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput) ToSyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput() SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput) ToSyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput) Elem() SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs) SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs {
		if v != nil {
			return *v
		}
		var ret SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs
		return ret
	}).(SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput)
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput) FailIfMatchesRegexps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs) []string {
		if v == nil {
			return nil
		}
		return v.FailIfMatchesRegexps
	}).(pulumi.StringArrayOutput)
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput) FailIfNotMatchesRegexps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs) []string {
		if v == nil {
			return nil
		}
		return v.FailIfNotMatchesRegexps
	}).(pulumi.StringArrayOutput)
}

type SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs struct {
	FailIfMatchesRegexps    []string `pulumi:"failIfMatchesRegexps"`
	FailIfNotMatchesRegexps []string `pulumi:"failIfNotMatchesRegexps"`
}

// SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsInput is an input type that accepts SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsArgs and SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsInput` via:
//
//	SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsArgs{...}
type SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput() SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput
	ToSyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput
}

type SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsArgs struct {
	FailIfMatchesRegexps    pulumi.StringArrayInput `pulumi:"failIfMatchesRegexps"`
	FailIfNotMatchesRegexps pulumi.StringArrayInput `pulumi:"failIfNotMatchesRegexps"`
}

func (SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsArgs) ToSyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput() SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput {
	return i.ToSyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsArgs) ToSyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput)
}

func (i SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsArgs) ToSyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput() SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsArgs) ToSyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput).ToSyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutputWithContext(ctx)
}

// SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrInput is an input type that accepts SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsArgs, SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtr and SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrInput` via:
//
//	        SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsArgs{...}
//
//	or:
//
//	        nil
type SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput() SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput
	ToSyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput
}

type syntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrType SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsArgs

func SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtr(v *SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsArgs) SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrInput {
	return (*syntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrType)(v)
}

func (*syntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs)(nil)).Elem()
}

func (i *syntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrType) ToSyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput() SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutputWithContext(context.Background())
}

func (i *syntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrType) ToSyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput)
}

type SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput) ToSyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput() SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput) ToSyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput) ToSyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput() SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput {
	return o.ToSyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutputWithContext(context.Background())
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput) ToSyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs) *SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs {
		return &v
	}).(SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput) FailIfMatchesRegexps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs) []string {
		return v.FailIfMatchesRegexps
	}).(pulumi.StringArrayOutput)
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput) FailIfNotMatchesRegexps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs) []string {
		return v.FailIfNotMatchesRegexps
	}).(pulumi.StringArrayOutput)
}

type SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput) ToSyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput() SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput) ToSyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput) Elem() SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs) SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs {
		if v != nil {
			return *v
		}
		var ret SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs
		return ret
	}).(SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput)
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput) FailIfMatchesRegexps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs) []string {
		if v == nil {
			return nil
		}
		return v.FailIfMatchesRegexps
	}).(pulumi.StringArrayOutput)
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput) FailIfNotMatchesRegexps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs) []string {
		if v == nil {
			return nil
		}
		return v.FailIfNotMatchesRegexps
	}).(pulumi.StringArrayOutput)
}

type SyntheticMonitoringCheckSettingsHttp struct {
	BasicAuth                     *SyntheticMonitoringCheckSettingsHttpBasicAuth                     `pulumi:"basicAuth"`
	BearerToken                   *string                                                            `pulumi:"bearerToken"`
	Body                          *string                                                            `pulumi:"body"`
	CacheBustingQueryParamName    *string                                                            `pulumi:"cacheBustingQueryParamName"`
	FailIfBodyMatchesRegexps      []string                                                           `pulumi:"failIfBodyMatchesRegexps"`
	FailIfBodyNotMatchesRegexps   []string                                                           `pulumi:"failIfBodyNotMatchesRegexps"`
	FailIfHeaderMatchesRegexps    []SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexp    `pulumi:"failIfHeaderMatchesRegexps"`
	FailIfHeaderNotMatchesRegexps []SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexp `pulumi:"failIfHeaderNotMatchesRegexps"`
	FailIfNotSsl                  *bool                                                              `pulumi:"failIfNotSsl"`
	FailIfSsl                     *bool                                                              `pulumi:"failIfSsl"`
	Headers                       []string                                                           `pulumi:"headers"`
	IpVersion                     *string                                                            `pulumi:"ipVersion"`
	Method                        *string                                                            `pulumi:"method"`
	NoFollowRedirects             *bool                                                              `pulumi:"noFollowRedirects"`
	ProxyUrl                      *string                                                            `pulumi:"proxyUrl"`
	TlsConfig                     *SyntheticMonitoringCheckSettingsHttpTlsConfig                     `pulumi:"tlsConfig"`
	ValidHttpVersions             []string                                                           `pulumi:"validHttpVersions"`
	ValidStatusCodes              []int                                                              `pulumi:"validStatusCodes"`
}

// SyntheticMonitoringCheckSettingsHttpInput is an input type that accepts SyntheticMonitoringCheckSettingsHttpArgs and SyntheticMonitoringCheckSettingsHttpOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsHttpInput` via:
//
//	SyntheticMonitoringCheckSettingsHttpArgs{...}
type SyntheticMonitoringCheckSettingsHttpInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsHttpOutput() SyntheticMonitoringCheckSettingsHttpOutput
	ToSyntheticMonitoringCheckSettingsHttpOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsHttpOutput
}

type SyntheticMonitoringCheckSettingsHttpArgs struct {
	BasicAuth                     SyntheticMonitoringCheckSettingsHttpBasicAuthPtrInput                      `pulumi:"basicAuth"`
	BearerToken                   pulumi.StringPtrInput                                                      `pulumi:"bearerToken"`
	Body                          pulumi.StringPtrInput                                                      `pulumi:"body"`
	CacheBustingQueryParamName    pulumi.StringPtrInput                                                      `pulumi:"cacheBustingQueryParamName"`
	FailIfBodyMatchesRegexps      pulumi.StringArrayInput                                                    `pulumi:"failIfBodyMatchesRegexps"`
	FailIfBodyNotMatchesRegexps   pulumi.StringArrayInput                                                    `pulumi:"failIfBodyNotMatchesRegexps"`
	FailIfHeaderMatchesRegexps    SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayInput    `pulumi:"failIfHeaderMatchesRegexps"`
	FailIfHeaderNotMatchesRegexps SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayInput `pulumi:"failIfHeaderNotMatchesRegexps"`
	FailIfNotSsl                  pulumi.BoolPtrInput                                                        `pulumi:"failIfNotSsl"`
	FailIfSsl                     pulumi.BoolPtrInput                                                        `pulumi:"failIfSsl"`
	Headers                       pulumi.StringArrayInput                                                    `pulumi:"headers"`
	IpVersion                     pulumi.StringPtrInput                                                      `pulumi:"ipVersion"`
	Method                        pulumi.StringPtrInput                                                      `pulumi:"method"`
	NoFollowRedirects             pulumi.BoolPtrInput                                                        `pulumi:"noFollowRedirects"`
	ProxyUrl                      pulumi.StringPtrInput                                                      `pulumi:"proxyUrl"`
	TlsConfig                     SyntheticMonitoringCheckSettingsHttpTlsConfigPtrInput                      `pulumi:"tlsConfig"`
	ValidHttpVersions             pulumi.StringArrayInput                                                    `pulumi:"validHttpVersions"`
	ValidStatusCodes              pulumi.IntArrayInput                                                       `pulumi:"validStatusCodes"`
}

func (SyntheticMonitoringCheckSettingsHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsHttp)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsHttpArgs) ToSyntheticMonitoringCheckSettingsHttpOutput() SyntheticMonitoringCheckSettingsHttpOutput {
	return i.ToSyntheticMonitoringCheckSettingsHttpOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsHttpArgs) ToSyntheticMonitoringCheckSettingsHttpOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsHttpOutput)
}

func (i SyntheticMonitoringCheckSettingsHttpArgs) ToSyntheticMonitoringCheckSettingsHttpPtrOutput() SyntheticMonitoringCheckSettingsHttpPtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsHttpPtrOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsHttpArgs) ToSyntheticMonitoringCheckSettingsHttpPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsHttpOutput).ToSyntheticMonitoringCheckSettingsHttpPtrOutputWithContext(ctx)
}

// SyntheticMonitoringCheckSettingsHttpPtrInput is an input type that accepts SyntheticMonitoringCheckSettingsHttpArgs, SyntheticMonitoringCheckSettingsHttpPtr and SyntheticMonitoringCheckSettingsHttpPtrOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsHttpPtrInput` via:
//
//	        SyntheticMonitoringCheckSettingsHttpArgs{...}
//
//	or:
//
//	        nil
type SyntheticMonitoringCheckSettingsHttpPtrInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsHttpPtrOutput() SyntheticMonitoringCheckSettingsHttpPtrOutput
	ToSyntheticMonitoringCheckSettingsHttpPtrOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsHttpPtrOutput
}

type syntheticMonitoringCheckSettingsHttpPtrType SyntheticMonitoringCheckSettingsHttpArgs

func SyntheticMonitoringCheckSettingsHttpPtr(v *SyntheticMonitoringCheckSettingsHttpArgs) SyntheticMonitoringCheckSettingsHttpPtrInput {
	return (*syntheticMonitoringCheckSettingsHttpPtrType)(v)
}

func (*syntheticMonitoringCheckSettingsHttpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettingsHttp)(nil)).Elem()
}

func (i *syntheticMonitoringCheckSettingsHttpPtrType) ToSyntheticMonitoringCheckSettingsHttpPtrOutput() SyntheticMonitoringCheckSettingsHttpPtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsHttpPtrOutputWithContext(context.Background())
}

func (i *syntheticMonitoringCheckSettingsHttpPtrType) ToSyntheticMonitoringCheckSettingsHttpPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsHttpPtrOutput)
}

type SyntheticMonitoringCheckSettingsHttpOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsHttp)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsHttpOutput) ToSyntheticMonitoringCheckSettingsHttpOutput() SyntheticMonitoringCheckSettingsHttpOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsHttpOutput) ToSyntheticMonitoringCheckSettingsHttpOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsHttpOutput) ToSyntheticMonitoringCheckSettingsHttpPtrOutput() SyntheticMonitoringCheckSettingsHttpPtrOutput {
	return o.ToSyntheticMonitoringCheckSettingsHttpPtrOutputWithContext(context.Background())
}

func (o SyntheticMonitoringCheckSettingsHttpOutput) ToSyntheticMonitoringCheckSettingsHttpPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticMonitoringCheckSettingsHttp) *SyntheticMonitoringCheckSettingsHttp {
		return &v
	}).(SyntheticMonitoringCheckSettingsHttpPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpOutput) BasicAuth() SyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttp) *SyntheticMonitoringCheckSettingsHttpBasicAuth {
		return v.BasicAuth
	}).(SyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpOutput) BearerToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttp) *string { return v.BearerToken }).(pulumi.StringPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttp) *string { return v.Body }).(pulumi.StringPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpOutput) CacheBustingQueryParamName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttp) *string { return v.CacheBustingQueryParamName }).(pulumi.StringPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpOutput) FailIfBodyMatchesRegexps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttp) []string { return v.FailIfBodyMatchesRegexps }).(pulumi.StringArrayOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpOutput) FailIfBodyNotMatchesRegexps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttp) []string { return v.FailIfBodyNotMatchesRegexps }).(pulumi.StringArrayOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpOutput) FailIfHeaderMatchesRegexps() SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttp) []SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexp {
		return v.FailIfHeaderMatchesRegexps
	}).(SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpOutput) FailIfHeaderNotMatchesRegexps() SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttp) []SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexp {
		return v.FailIfHeaderNotMatchesRegexps
	}).(SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpOutput) FailIfNotSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttp) *bool { return v.FailIfNotSsl }).(pulumi.BoolPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpOutput) FailIfSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttp) *bool { return v.FailIfSsl }).(pulumi.BoolPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpOutput) Headers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttp) []string { return v.Headers }).(pulumi.StringArrayOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpOutput) IpVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttp) *string { return v.IpVersion }).(pulumi.StringPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttp) *string { return v.Method }).(pulumi.StringPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpOutput) NoFollowRedirects() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttp) *bool { return v.NoFollowRedirects }).(pulumi.BoolPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpOutput) ProxyUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttp) *string { return v.ProxyUrl }).(pulumi.StringPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpOutput) TlsConfig() SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttp) *SyntheticMonitoringCheckSettingsHttpTlsConfig {
		return v.TlsConfig
	}).(SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpOutput) ValidHttpVersions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttp) []string { return v.ValidHttpVersions }).(pulumi.StringArrayOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpOutput) ValidStatusCodes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttp) []int { return v.ValidStatusCodes }).(pulumi.IntArrayOutput)
}

type SyntheticMonitoringCheckSettingsHttpPtrOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsHttpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettingsHttp)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsHttpPtrOutput) ToSyntheticMonitoringCheckSettingsHttpPtrOutput() SyntheticMonitoringCheckSettingsHttpPtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsHttpPtrOutput) ToSyntheticMonitoringCheckSettingsHttpPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpPtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsHttpPtrOutput) Elem() SyntheticMonitoringCheckSettingsHttpOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttp) SyntheticMonitoringCheckSettingsHttp {
		if v != nil {
			return *v
		}
		var ret SyntheticMonitoringCheckSettingsHttp
		return ret
	}).(SyntheticMonitoringCheckSettingsHttpOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpPtrOutput) BasicAuth() SyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttp) *SyntheticMonitoringCheckSettingsHttpBasicAuth {
		if v == nil {
			return nil
		}
		return v.BasicAuth
	}).(SyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpPtrOutput) BearerToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttp) *string {
		if v == nil {
			return nil
		}
		return v.BearerToken
	}).(pulumi.StringPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpPtrOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttp) *string {
		if v == nil {
			return nil
		}
		return v.Body
	}).(pulumi.StringPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpPtrOutput) CacheBustingQueryParamName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttp) *string {
		if v == nil {
			return nil
		}
		return v.CacheBustingQueryParamName
	}).(pulumi.StringPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpPtrOutput) FailIfBodyMatchesRegexps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttp) []string {
		if v == nil {
			return nil
		}
		return v.FailIfBodyMatchesRegexps
	}).(pulumi.StringArrayOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpPtrOutput) FailIfBodyNotMatchesRegexps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttp) []string {
		if v == nil {
			return nil
		}
		return v.FailIfBodyNotMatchesRegexps
	}).(pulumi.StringArrayOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpPtrOutput) FailIfHeaderMatchesRegexps() SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttp) []SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexp {
		if v == nil {
			return nil
		}
		return v.FailIfHeaderMatchesRegexps
	}).(SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpPtrOutput) FailIfHeaderNotMatchesRegexps() SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttp) []SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexp {
		if v == nil {
			return nil
		}
		return v.FailIfHeaderNotMatchesRegexps
	}).(SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpPtrOutput) FailIfNotSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttp) *bool {
		if v == nil {
			return nil
		}
		return v.FailIfNotSsl
	}).(pulumi.BoolPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpPtrOutput) FailIfSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttp) *bool {
		if v == nil {
			return nil
		}
		return v.FailIfSsl
	}).(pulumi.BoolPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpPtrOutput) Headers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttp) []string {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(pulumi.StringArrayOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpPtrOutput) IpVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttp) *string {
		if v == nil {
			return nil
		}
		return v.IpVersion
	}).(pulumi.StringPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpPtrOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttp) *string {
		if v == nil {
			return nil
		}
		return v.Method
	}).(pulumi.StringPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpPtrOutput) NoFollowRedirects() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttp) *bool {
		if v == nil {
			return nil
		}
		return v.NoFollowRedirects
	}).(pulumi.BoolPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpPtrOutput) ProxyUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttp) *string {
		if v == nil {
			return nil
		}
		return v.ProxyUrl
	}).(pulumi.StringPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpPtrOutput) TlsConfig() SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttp) *SyntheticMonitoringCheckSettingsHttpTlsConfig {
		if v == nil {
			return nil
		}
		return v.TlsConfig
	}).(SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpPtrOutput) ValidHttpVersions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttp) []string {
		if v == nil {
			return nil
		}
		return v.ValidHttpVersions
	}).(pulumi.StringArrayOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpPtrOutput) ValidStatusCodes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttp) []int {
		if v == nil {
			return nil
		}
		return v.ValidStatusCodes
	}).(pulumi.IntArrayOutput)
}

type SyntheticMonitoringCheckSettingsHttpBasicAuth struct {
	Password string `pulumi:"password"`
	Username string `pulumi:"username"`
}

// SyntheticMonitoringCheckSettingsHttpBasicAuthInput is an input type that accepts SyntheticMonitoringCheckSettingsHttpBasicAuthArgs and SyntheticMonitoringCheckSettingsHttpBasicAuthOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsHttpBasicAuthInput` via:
//
//	SyntheticMonitoringCheckSettingsHttpBasicAuthArgs{...}
type SyntheticMonitoringCheckSettingsHttpBasicAuthInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsHttpBasicAuthOutput() SyntheticMonitoringCheckSettingsHttpBasicAuthOutput
	ToSyntheticMonitoringCheckSettingsHttpBasicAuthOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsHttpBasicAuthOutput
}

type SyntheticMonitoringCheckSettingsHttpBasicAuthArgs struct {
	Password pulumi.StringInput `pulumi:"password"`
	Username pulumi.StringInput `pulumi:"username"`
}

func (SyntheticMonitoringCheckSettingsHttpBasicAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsHttpBasicAuth)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsHttpBasicAuthArgs) ToSyntheticMonitoringCheckSettingsHttpBasicAuthOutput() SyntheticMonitoringCheckSettingsHttpBasicAuthOutput {
	return i.ToSyntheticMonitoringCheckSettingsHttpBasicAuthOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsHttpBasicAuthArgs) ToSyntheticMonitoringCheckSettingsHttpBasicAuthOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpBasicAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsHttpBasicAuthOutput)
}

func (i SyntheticMonitoringCheckSettingsHttpBasicAuthArgs) ToSyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput() SyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsHttpBasicAuthArgs) ToSyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsHttpBasicAuthOutput).ToSyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutputWithContext(ctx)
}

// SyntheticMonitoringCheckSettingsHttpBasicAuthPtrInput is an input type that accepts SyntheticMonitoringCheckSettingsHttpBasicAuthArgs, SyntheticMonitoringCheckSettingsHttpBasicAuthPtr and SyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsHttpBasicAuthPtrInput` via:
//
//	        SyntheticMonitoringCheckSettingsHttpBasicAuthArgs{...}
//
//	or:
//
//	        nil
type SyntheticMonitoringCheckSettingsHttpBasicAuthPtrInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput() SyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput
	ToSyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput
}

type syntheticMonitoringCheckSettingsHttpBasicAuthPtrType SyntheticMonitoringCheckSettingsHttpBasicAuthArgs

func SyntheticMonitoringCheckSettingsHttpBasicAuthPtr(v *SyntheticMonitoringCheckSettingsHttpBasicAuthArgs) SyntheticMonitoringCheckSettingsHttpBasicAuthPtrInput {
	return (*syntheticMonitoringCheckSettingsHttpBasicAuthPtrType)(v)
}

func (*syntheticMonitoringCheckSettingsHttpBasicAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettingsHttpBasicAuth)(nil)).Elem()
}

func (i *syntheticMonitoringCheckSettingsHttpBasicAuthPtrType) ToSyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput() SyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutputWithContext(context.Background())
}

func (i *syntheticMonitoringCheckSettingsHttpBasicAuthPtrType) ToSyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput)
}

type SyntheticMonitoringCheckSettingsHttpBasicAuthOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsHttpBasicAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsHttpBasicAuth)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsHttpBasicAuthOutput) ToSyntheticMonitoringCheckSettingsHttpBasicAuthOutput() SyntheticMonitoringCheckSettingsHttpBasicAuthOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsHttpBasicAuthOutput) ToSyntheticMonitoringCheckSettingsHttpBasicAuthOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpBasicAuthOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsHttpBasicAuthOutput) ToSyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput() SyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput {
	return o.ToSyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutputWithContext(context.Background())
}

func (o SyntheticMonitoringCheckSettingsHttpBasicAuthOutput) ToSyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticMonitoringCheckSettingsHttpBasicAuth) *SyntheticMonitoringCheckSettingsHttpBasicAuth {
		return &v
	}).(SyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpBasicAuthOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttpBasicAuth) string { return v.Password }).(pulumi.StringOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpBasicAuthOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttpBasicAuth) string { return v.Username }).(pulumi.StringOutput)
}

type SyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettingsHttpBasicAuth)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput) ToSyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput() SyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput) ToSyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput) Elem() SyntheticMonitoringCheckSettingsHttpBasicAuthOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttpBasicAuth) SyntheticMonitoringCheckSettingsHttpBasicAuth {
		if v != nil {
			return *v
		}
		var ret SyntheticMonitoringCheckSettingsHttpBasicAuth
		return ret
	}).(SyntheticMonitoringCheckSettingsHttpBasicAuthOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttpBasicAuth) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttpBasicAuth) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexp struct {
	AllowMissing *bool  `pulumi:"allowMissing"`
	Header       string `pulumi:"header"`
	Regexp       string `pulumi:"regexp"`
}

// SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpInput is an input type that accepts SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArgs and SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpInput` via:
//
//	SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArgs{...}
type SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput() SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput
	ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput
}

type SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArgs struct {
	AllowMissing pulumi.BoolPtrInput `pulumi:"allowMissing"`
	Header       pulumi.StringInput  `pulumi:"header"`
	Regexp       pulumi.StringInput  `pulumi:"regexp"`
}

func (SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexp)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArgs) ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput() SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput {
	return i.ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArgs) ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput)
}

// SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayInput is an input type that accepts SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArray and SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayInput` via:
//
//	SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArray{ SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArgs{...} }
type SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput() SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput
	ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput
}

type SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArray []SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpInput

func (SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexp)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArray) ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput() SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput {
	return i.ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArray) ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput)
}

type SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexp)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput) ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput() SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput) ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput) AllowMissing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexp) *bool { return v.AllowMissing }).(pulumi.BoolPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput) Header() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexp) string { return v.Header }).(pulumi.StringOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput) Regexp() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexp) string { return v.Regexp }).(pulumi.StringOutput)
}

type SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexp)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput) ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput() SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput) ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput) Index(i pulumi.IntInput) SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexp {
		return vs[0].([]SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexp)[vs[1].(int)]
	}).(SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput)
}

type SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexp struct {
	AllowMissing *bool  `pulumi:"allowMissing"`
	Header       string `pulumi:"header"`
	Regexp       string `pulumi:"regexp"`
}

// SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpInput is an input type that accepts SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArgs and SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpInput` via:
//
//	SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArgs{...}
type SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput() SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput
	ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput
}

type SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArgs struct {
	AllowMissing pulumi.BoolPtrInput `pulumi:"allowMissing"`
	Header       pulumi.StringInput  `pulumi:"header"`
	Regexp       pulumi.StringInput  `pulumi:"regexp"`
}

func (SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexp)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArgs) ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput() SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput {
	return i.ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArgs) ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput)
}

// SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayInput is an input type that accepts SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArray and SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayInput` via:
//
//	SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArray{ SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArgs{...} }
type SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput() SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput
	ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput
}

type SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArray []SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpInput

func (SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexp)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArray) ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput() SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput {
	return i.ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArray) ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput)
}

type SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexp)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput) ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput() SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput) ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput) AllowMissing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexp) *bool { return v.AllowMissing }).(pulumi.BoolPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput) Header() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexp) string { return v.Header }).(pulumi.StringOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput) Regexp() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexp) string { return v.Regexp }).(pulumi.StringOutput)
}

type SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexp)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput) ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput() SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput) ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput) Index(i pulumi.IntInput) SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexp {
		return vs[0].([]SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexp)[vs[1].(int)]
	}).(SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput)
}

type SyntheticMonitoringCheckSettingsHttpTlsConfig struct {
	CaCert             *string `pulumi:"caCert"`
	ClientCert         *string `pulumi:"clientCert"`
	ClientKey          *string `pulumi:"clientKey"`
	InsecureSkipVerify *bool   `pulumi:"insecureSkipVerify"`
	ServerName         *string `pulumi:"serverName"`
}

// SyntheticMonitoringCheckSettingsHttpTlsConfigInput is an input type that accepts SyntheticMonitoringCheckSettingsHttpTlsConfigArgs and SyntheticMonitoringCheckSettingsHttpTlsConfigOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsHttpTlsConfigInput` via:
//
//	SyntheticMonitoringCheckSettingsHttpTlsConfigArgs{...}
type SyntheticMonitoringCheckSettingsHttpTlsConfigInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsHttpTlsConfigOutput() SyntheticMonitoringCheckSettingsHttpTlsConfigOutput
	ToSyntheticMonitoringCheckSettingsHttpTlsConfigOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsHttpTlsConfigOutput
}

type SyntheticMonitoringCheckSettingsHttpTlsConfigArgs struct {
	CaCert             pulumi.StringPtrInput `pulumi:"caCert"`
	ClientCert         pulumi.StringPtrInput `pulumi:"clientCert"`
	ClientKey          pulumi.StringPtrInput `pulumi:"clientKey"`
	InsecureSkipVerify pulumi.BoolPtrInput   `pulumi:"insecureSkipVerify"`
	ServerName         pulumi.StringPtrInput `pulumi:"serverName"`
}

func (SyntheticMonitoringCheckSettingsHttpTlsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsHttpTlsConfig)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsHttpTlsConfigArgs) ToSyntheticMonitoringCheckSettingsHttpTlsConfigOutput() SyntheticMonitoringCheckSettingsHttpTlsConfigOutput {
	return i.ToSyntheticMonitoringCheckSettingsHttpTlsConfigOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsHttpTlsConfigArgs) ToSyntheticMonitoringCheckSettingsHttpTlsConfigOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpTlsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsHttpTlsConfigOutput)
}

func (i SyntheticMonitoringCheckSettingsHttpTlsConfigArgs) ToSyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput() SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsHttpTlsConfigArgs) ToSyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsHttpTlsConfigOutput).ToSyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutputWithContext(ctx)
}

// SyntheticMonitoringCheckSettingsHttpTlsConfigPtrInput is an input type that accepts SyntheticMonitoringCheckSettingsHttpTlsConfigArgs, SyntheticMonitoringCheckSettingsHttpTlsConfigPtr and SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsHttpTlsConfigPtrInput` via:
//
//	        SyntheticMonitoringCheckSettingsHttpTlsConfigArgs{...}
//
//	or:
//
//	        nil
type SyntheticMonitoringCheckSettingsHttpTlsConfigPtrInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput() SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput
	ToSyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput
}

type syntheticMonitoringCheckSettingsHttpTlsConfigPtrType SyntheticMonitoringCheckSettingsHttpTlsConfigArgs

func SyntheticMonitoringCheckSettingsHttpTlsConfigPtr(v *SyntheticMonitoringCheckSettingsHttpTlsConfigArgs) SyntheticMonitoringCheckSettingsHttpTlsConfigPtrInput {
	return (*syntheticMonitoringCheckSettingsHttpTlsConfigPtrType)(v)
}

func (*syntheticMonitoringCheckSettingsHttpTlsConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettingsHttpTlsConfig)(nil)).Elem()
}

func (i *syntheticMonitoringCheckSettingsHttpTlsConfigPtrType) ToSyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput() SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutputWithContext(context.Background())
}

func (i *syntheticMonitoringCheckSettingsHttpTlsConfigPtrType) ToSyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput)
}

type SyntheticMonitoringCheckSettingsHttpTlsConfigOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsHttpTlsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsHttpTlsConfig)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsHttpTlsConfigOutput) ToSyntheticMonitoringCheckSettingsHttpTlsConfigOutput() SyntheticMonitoringCheckSettingsHttpTlsConfigOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsHttpTlsConfigOutput) ToSyntheticMonitoringCheckSettingsHttpTlsConfigOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpTlsConfigOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsHttpTlsConfigOutput) ToSyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput() SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput {
	return o.ToSyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutputWithContext(context.Background())
}

func (o SyntheticMonitoringCheckSettingsHttpTlsConfigOutput) ToSyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticMonitoringCheckSettingsHttpTlsConfig) *SyntheticMonitoringCheckSettingsHttpTlsConfig {
		return &v
	}).(SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpTlsConfigOutput) CaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttpTlsConfig) *string { return v.CaCert }).(pulumi.StringPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpTlsConfigOutput) ClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttpTlsConfig) *string { return v.ClientCert }).(pulumi.StringPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpTlsConfigOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttpTlsConfig) *string { return v.ClientKey }).(pulumi.StringPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpTlsConfigOutput) InsecureSkipVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttpTlsConfig) *bool { return v.InsecureSkipVerify }).(pulumi.BoolPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpTlsConfigOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttpTlsConfig) *string { return v.ServerName }).(pulumi.StringPtrOutput)
}

type SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettingsHttpTlsConfig)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput) ToSyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput() SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput) ToSyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput) Elem() SyntheticMonitoringCheckSettingsHttpTlsConfigOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttpTlsConfig) SyntheticMonitoringCheckSettingsHttpTlsConfig {
		if v != nil {
			return *v
		}
		var ret SyntheticMonitoringCheckSettingsHttpTlsConfig
		return ret
	}).(SyntheticMonitoringCheckSettingsHttpTlsConfigOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput) CaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttpTlsConfig) *string {
		if v == nil {
			return nil
		}
		return v.CaCert
	}).(pulumi.StringPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput) ClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttpTlsConfig) *string {
		if v == nil {
			return nil
		}
		return v.ClientCert
	}).(pulumi.StringPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttpTlsConfig) *string {
		if v == nil {
			return nil
		}
		return v.ClientKey
	}).(pulumi.StringPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput) InsecureSkipVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttpTlsConfig) *bool {
		if v == nil {
			return nil
		}
		return v.InsecureSkipVerify
	}).(pulumi.BoolPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttpTlsConfig) *string {
		if v == nil {
			return nil
		}
		return v.ServerName
	}).(pulumi.StringPtrOutput)
}

type SyntheticMonitoringCheckSettingsPing struct {
	DontFragment    *bool   `pulumi:"dontFragment"`
	IpVersion       *string `pulumi:"ipVersion"`
	PayloadSize     *int    `pulumi:"payloadSize"`
	SourceIpAddress *string `pulumi:"sourceIpAddress"`
}

// SyntheticMonitoringCheckSettingsPingInput is an input type that accepts SyntheticMonitoringCheckSettingsPingArgs and SyntheticMonitoringCheckSettingsPingOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsPingInput` via:
//
//	SyntheticMonitoringCheckSettingsPingArgs{...}
type SyntheticMonitoringCheckSettingsPingInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsPingOutput() SyntheticMonitoringCheckSettingsPingOutput
	ToSyntheticMonitoringCheckSettingsPingOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsPingOutput
}

type SyntheticMonitoringCheckSettingsPingArgs struct {
	DontFragment    pulumi.BoolPtrInput   `pulumi:"dontFragment"`
	IpVersion       pulumi.StringPtrInput `pulumi:"ipVersion"`
	PayloadSize     pulumi.IntPtrInput    `pulumi:"payloadSize"`
	SourceIpAddress pulumi.StringPtrInput `pulumi:"sourceIpAddress"`
}

func (SyntheticMonitoringCheckSettingsPingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsPing)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsPingArgs) ToSyntheticMonitoringCheckSettingsPingOutput() SyntheticMonitoringCheckSettingsPingOutput {
	return i.ToSyntheticMonitoringCheckSettingsPingOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsPingArgs) ToSyntheticMonitoringCheckSettingsPingOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsPingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsPingOutput)
}

func (i SyntheticMonitoringCheckSettingsPingArgs) ToSyntheticMonitoringCheckSettingsPingPtrOutput() SyntheticMonitoringCheckSettingsPingPtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsPingPtrOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsPingArgs) ToSyntheticMonitoringCheckSettingsPingPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsPingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsPingOutput).ToSyntheticMonitoringCheckSettingsPingPtrOutputWithContext(ctx)
}

// SyntheticMonitoringCheckSettingsPingPtrInput is an input type that accepts SyntheticMonitoringCheckSettingsPingArgs, SyntheticMonitoringCheckSettingsPingPtr and SyntheticMonitoringCheckSettingsPingPtrOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsPingPtrInput` via:
//
//	        SyntheticMonitoringCheckSettingsPingArgs{...}
//
//	or:
//
//	        nil
type SyntheticMonitoringCheckSettingsPingPtrInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsPingPtrOutput() SyntheticMonitoringCheckSettingsPingPtrOutput
	ToSyntheticMonitoringCheckSettingsPingPtrOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsPingPtrOutput
}

type syntheticMonitoringCheckSettingsPingPtrType SyntheticMonitoringCheckSettingsPingArgs

func SyntheticMonitoringCheckSettingsPingPtr(v *SyntheticMonitoringCheckSettingsPingArgs) SyntheticMonitoringCheckSettingsPingPtrInput {
	return (*syntheticMonitoringCheckSettingsPingPtrType)(v)
}

func (*syntheticMonitoringCheckSettingsPingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettingsPing)(nil)).Elem()
}

func (i *syntheticMonitoringCheckSettingsPingPtrType) ToSyntheticMonitoringCheckSettingsPingPtrOutput() SyntheticMonitoringCheckSettingsPingPtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsPingPtrOutputWithContext(context.Background())
}

func (i *syntheticMonitoringCheckSettingsPingPtrType) ToSyntheticMonitoringCheckSettingsPingPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsPingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsPingPtrOutput)
}

type SyntheticMonitoringCheckSettingsPingOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsPingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsPing)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsPingOutput) ToSyntheticMonitoringCheckSettingsPingOutput() SyntheticMonitoringCheckSettingsPingOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsPingOutput) ToSyntheticMonitoringCheckSettingsPingOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsPingOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsPingOutput) ToSyntheticMonitoringCheckSettingsPingPtrOutput() SyntheticMonitoringCheckSettingsPingPtrOutput {
	return o.ToSyntheticMonitoringCheckSettingsPingPtrOutputWithContext(context.Background())
}

func (o SyntheticMonitoringCheckSettingsPingOutput) ToSyntheticMonitoringCheckSettingsPingPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsPingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticMonitoringCheckSettingsPing) *SyntheticMonitoringCheckSettingsPing {
		return &v
	}).(SyntheticMonitoringCheckSettingsPingPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsPingOutput) DontFragment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsPing) *bool { return v.DontFragment }).(pulumi.BoolPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsPingOutput) IpVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsPing) *string { return v.IpVersion }).(pulumi.StringPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsPingOutput) PayloadSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsPing) *int { return v.PayloadSize }).(pulumi.IntPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsPingOutput) SourceIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsPing) *string { return v.SourceIpAddress }).(pulumi.StringPtrOutput)
}

type SyntheticMonitoringCheckSettingsPingPtrOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsPingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettingsPing)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsPingPtrOutput) ToSyntheticMonitoringCheckSettingsPingPtrOutput() SyntheticMonitoringCheckSettingsPingPtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsPingPtrOutput) ToSyntheticMonitoringCheckSettingsPingPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsPingPtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsPingPtrOutput) Elem() SyntheticMonitoringCheckSettingsPingOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsPing) SyntheticMonitoringCheckSettingsPing {
		if v != nil {
			return *v
		}
		var ret SyntheticMonitoringCheckSettingsPing
		return ret
	}).(SyntheticMonitoringCheckSettingsPingOutput)
}

func (o SyntheticMonitoringCheckSettingsPingPtrOutput) DontFragment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsPing) *bool {
		if v == nil {
			return nil
		}
		return v.DontFragment
	}).(pulumi.BoolPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsPingPtrOutput) IpVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsPing) *string {
		if v == nil {
			return nil
		}
		return v.IpVersion
	}).(pulumi.StringPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsPingPtrOutput) PayloadSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsPing) *int {
		if v == nil {
			return nil
		}
		return v.PayloadSize
	}).(pulumi.IntPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsPingPtrOutput) SourceIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsPing) *string {
		if v == nil {
			return nil
		}
		return v.SourceIpAddress
	}).(pulumi.StringPtrOutput)
}

type SyntheticMonitoringCheckSettingsTcp struct {
	IpVersion       *string                                            `pulumi:"ipVersion"`
	QueryResponses  []SyntheticMonitoringCheckSettingsTcpQueryResponse `pulumi:"queryResponses"`
	SourceIpAddress *string                                            `pulumi:"sourceIpAddress"`
	Tls             *bool                                              `pulumi:"tls"`
	TlsConfig       *SyntheticMonitoringCheckSettingsTcpTlsConfig      `pulumi:"tlsConfig"`
}

// SyntheticMonitoringCheckSettingsTcpInput is an input type that accepts SyntheticMonitoringCheckSettingsTcpArgs and SyntheticMonitoringCheckSettingsTcpOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsTcpInput` via:
//
//	SyntheticMonitoringCheckSettingsTcpArgs{...}
type SyntheticMonitoringCheckSettingsTcpInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsTcpOutput() SyntheticMonitoringCheckSettingsTcpOutput
	ToSyntheticMonitoringCheckSettingsTcpOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsTcpOutput
}

type SyntheticMonitoringCheckSettingsTcpArgs struct {
	IpVersion       pulumi.StringPtrInput                                      `pulumi:"ipVersion"`
	QueryResponses  SyntheticMonitoringCheckSettingsTcpQueryResponseArrayInput `pulumi:"queryResponses"`
	SourceIpAddress pulumi.StringPtrInput                                      `pulumi:"sourceIpAddress"`
	Tls             pulumi.BoolPtrInput                                        `pulumi:"tls"`
	TlsConfig       SyntheticMonitoringCheckSettingsTcpTlsConfigPtrInput       `pulumi:"tlsConfig"`
}

func (SyntheticMonitoringCheckSettingsTcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsTcp)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsTcpArgs) ToSyntheticMonitoringCheckSettingsTcpOutput() SyntheticMonitoringCheckSettingsTcpOutput {
	return i.ToSyntheticMonitoringCheckSettingsTcpOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsTcpArgs) ToSyntheticMonitoringCheckSettingsTcpOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsTcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsTcpOutput)
}

func (i SyntheticMonitoringCheckSettingsTcpArgs) ToSyntheticMonitoringCheckSettingsTcpPtrOutput() SyntheticMonitoringCheckSettingsTcpPtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsTcpPtrOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsTcpArgs) ToSyntheticMonitoringCheckSettingsTcpPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsTcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsTcpOutput).ToSyntheticMonitoringCheckSettingsTcpPtrOutputWithContext(ctx)
}

// SyntheticMonitoringCheckSettingsTcpPtrInput is an input type that accepts SyntheticMonitoringCheckSettingsTcpArgs, SyntheticMonitoringCheckSettingsTcpPtr and SyntheticMonitoringCheckSettingsTcpPtrOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsTcpPtrInput` via:
//
//	        SyntheticMonitoringCheckSettingsTcpArgs{...}
//
//	or:
//
//	        nil
type SyntheticMonitoringCheckSettingsTcpPtrInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsTcpPtrOutput() SyntheticMonitoringCheckSettingsTcpPtrOutput
	ToSyntheticMonitoringCheckSettingsTcpPtrOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsTcpPtrOutput
}

type syntheticMonitoringCheckSettingsTcpPtrType SyntheticMonitoringCheckSettingsTcpArgs

func SyntheticMonitoringCheckSettingsTcpPtr(v *SyntheticMonitoringCheckSettingsTcpArgs) SyntheticMonitoringCheckSettingsTcpPtrInput {
	return (*syntheticMonitoringCheckSettingsTcpPtrType)(v)
}

func (*syntheticMonitoringCheckSettingsTcpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettingsTcp)(nil)).Elem()
}

func (i *syntheticMonitoringCheckSettingsTcpPtrType) ToSyntheticMonitoringCheckSettingsTcpPtrOutput() SyntheticMonitoringCheckSettingsTcpPtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsTcpPtrOutputWithContext(context.Background())
}

func (i *syntheticMonitoringCheckSettingsTcpPtrType) ToSyntheticMonitoringCheckSettingsTcpPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsTcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsTcpPtrOutput)
}

type SyntheticMonitoringCheckSettingsTcpOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsTcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsTcp)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsTcpOutput) ToSyntheticMonitoringCheckSettingsTcpOutput() SyntheticMonitoringCheckSettingsTcpOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsTcpOutput) ToSyntheticMonitoringCheckSettingsTcpOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsTcpOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsTcpOutput) ToSyntheticMonitoringCheckSettingsTcpPtrOutput() SyntheticMonitoringCheckSettingsTcpPtrOutput {
	return o.ToSyntheticMonitoringCheckSettingsTcpPtrOutputWithContext(context.Background())
}

func (o SyntheticMonitoringCheckSettingsTcpOutput) ToSyntheticMonitoringCheckSettingsTcpPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsTcpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticMonitoringCheckSettingsTcp) *SyntheticMonitoringCheckSettingsTcp {
		return &v
	}).(SyntheticMonitoringCheckSettingsTcpPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsTcpOutput) IpVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsTcp) *string { return v.IpVersion }).(pulumi.StringPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsTcpOutput) QueryResponses() SyntheticMonitoringCheckSettingsTcpQueryResponseArrayOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsTcp) []SyntheticMonitoringCheckSettingsTcpQueryResponse {
		return v.QueryResponses
	}).(SyntheticMonitoringCheckSettingsTcpQueryResponseArrayOutput)
}

func (o SyntheticMonitoringCheckSettingsTcpOutput) SourceIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsTcp) *string { return v.SourceIpAddress }).(pulumi.StringPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsTcpOutput) Tls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsTcp) *bool { return v.Tls }).(pulumi.BoolPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsTcpOutput) TlsConfig() SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsTcp) *SyntheticMonitoringCheckSettingsTcpTlsConfig {
		return v.TlsConfig
	}).(SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput)
}

type SyntheticMonitoringCheckSettingsTcpPtrOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsTcpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettingsTcp)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsTcpPtrOutput) ToSyntheticMonitoringCheckSettingsTcpPtrOutput() SyntheticMonitoringCheckSettingsTcpPtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsTcpPtrOutput) ToSyntheticMonitoringCheckSettingsTcpPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsTcpPtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsTcpPtrOutput) Elem() SyntheticMonitoringCheckSettingsTcpOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsTcp) SyntheticMonitoringCheckSettingsTcp {
		if v != nil {
			return *v
		}
		var ret SyntheticMonitoringCheckSettingsTcp
		return ret
	}).(SyntheticMonitoringCheckSettingsTcpOutput)
}

func (o SyntheticMonitoringCheckSettingsTcpPtrOutput) IpVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsTcp) *string {
		if v == nil {
			return nil
		}
		return v.IpVersion
	}).(pulumi.StringPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsTcpPtrOutput) QueryResponses() SyntheticMonitoringCheckSettingsTcpQueryResponseArrayOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsTcp) []SyntheticMonitoringCheckSettingsTcpQueryResponse {
		if v == nil {
			return nil
		}
		return v.QueryResponses
	}).(SyntheticMonitoringCheckSettingsTcpQueryResponseArrayOutput)
}

func (o SyntheticMonitoringCheckSettingsTcpPtrOutput) SourceIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsTcp) *string {
		if v == nil {
			return nil
		}
		return v.SourceIpAddress
	}).(pulumi.StringPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsTcpPtrOutput) Tls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsTcp) *bool {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(pulumi.BoolPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsTcpPtrOutput) TlsConfig() SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsTcp) *SyntheticMonitoringCheckSettingsTcpTlsConfig {
		if v == nil {
			return nil
		}
		return v.TlsConfig
	}).(SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput)
}

type SyntheticMonitoringCheckSettingsTcpQueryResponse struct {
	Expect   string `pulumi:"expect"`
	Send     string `pulumi:"send"`
	StartTls *bool  `pulumi:"startTls"`
}

// SyntheticMonitoringCheckSettingsTcpQueryResponseInput is an input type that accepts SyntheticMonitoringCheckSettingsTcpQueryResponseArgs and SyntheticMonitoringCheckSettingsTcpQueryResponseOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsTcpQueryResponseInput` via:
//
//	SyntheticMonitoringCheckSettingsTcpQueryResponseArgs{...}
type SyntheticMonitoringCheckSettingsTcpQueryResponseInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsTcpQueryResponseOutput() SyntheticMonitoringCheckSettingsTcpQueryResponseOutput
	ToSyntheticMonitoringCheckSettingsTcpQueryResponseOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsTcpQueryResponseOutput
}

type SyntheticMonitoringCheckSettingsTcpQueryResponseArgs struct {
	Expect   pulumi.StringInput  `pulumi:"expect"`
	Send     pulumi.StringInput  `pulumi:"send"`
	StartTls pulumi.BoolPtrInput `pulumi:"startTls"`
}

func (SyntheticMonitoringCheckSettingsTcpQueryResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsTcpQueryResponse)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsTcpQueryResponseArgs) ToSyntheticMonitoringCheckSettingsTcpQueryResponseOutput() SyntheticMonitoringCheckSettingsTcpQueryResponseOutput {
	return i.ToSyntheticMonitoringCheckSettingsTcpQueryResponseOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsTcpQueryResponseArgs) ToSyntheticMonitoringCheckSettingsTcpQueryResponseOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsTcpQueryResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsTcpQueryResponseOutput)
}

// SyntheticMonitoringCheckSettingsTcpQueryResponseArrayInput is an input type that accepts SyntheticMonitoringCheckSettingsTcpQueryResponseArray and SyntheticMonitoringCheckSettingsTcpQueryResponseArrayOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsTcpQueryResponseArrayInput` via:
//
//	SyntheticMonitoringCheckSettingsTcpQueryResponseArray{ SyntheticMonitoringCheckSettingsTcpQueryResponseArgs{...} }
type SyntheticMonitoringCheckSettingsTcpQueryResponseArrayInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsTcpQueryResponseArrayOutput() SyntheticMonitoringCheckSettingsTcpQueryResponseArrayOutput
	ToSyntheticMonitoringCheckSettingsTcpQueryResponseArrayOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsTcpQueryResponseArrayOutput
}

type SyntheticMonitoringCheckSettingsTcpQueryResponseArray []SyntheticMonitoringCheckSettingsTcpQueryResponseInput

func (SyntheticMonitoringCheckSettingsTcpQueryResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyntheticMonitoringCheckSettingsTcpQueryResponse)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsTcpQueryResponseArray) ToSyntheticMonitoringCheckSettingsTcpQueryResponseArrayOutput() SyntheticMonitoringCheckSettingsTcpQueryResponseArrayOutput {
	return i.ToSyntheticMonitoringCheckSettingsTcpQueryResponseArrayOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsTcpQueryResponseArray) ToSyntheticMonitoringCheckSettingsTcpQueryResponseArrayOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsTcpQueryResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsTcpQueryResponseArrayOutput)
}

type SyntheticMonitoringCheckSettingsTcpQueryResponseOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsTcpQueryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsTcpQueryResponse)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsTcpQueryResponseOutput) ToSyntheticMonitoringCheckSettingsTcpQueryResponseOutput() SyntheticMonitoringCheckSettingsTcpQueryResponseOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsTcpQueryResponseOutput) ToSyntheticMonitoringCheckSettingsTcpQueryResponseOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsTcpQueryResponseOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsTcpQueryResponseOutput) Expect() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsTcpQueryResponse) string { return v.Expect }).(pulumi.StringOutput)
}

func (o SyntheticMonitoringCheckSettingsTcpQueryResponseOutput) Send() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsTcpQueryResponse) string { return v.Send }).(pulumi.StringOutput)
}

func (o SyntheticMonitoringCheckSettingsTcpQueryResponseOutput) StartTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsTcpQueryResponse) *bool { return v.StartTls }).(pulumi.BoolPtrOutput)
}

type SyntheticMonitoringCheckSettingsTcpQueryResponseArrayOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsTcpQueryResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyntheticMonitoringCheckSettingsTcpQueryResponse)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsTcpQueryResponseArrayOutput) ToSyntheticMonitoringCheckSettingsTcpQueryResponseArrayOutput() SyntheticMonitoringCheckSettingsTcpQueryResponseArrayOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsTcpQueryResponseArrayOutput) ToSyntheticMonitoringCheckSettingsTcpQueryResponseArrayOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsTcpQueryResponseArrayOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsTcpQueryResponseArrayOutput) Index(i pulumi.IntInput) SyntheticMonitoringCheckSettingsTcpQueryResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SyntheticMonitoringCheckSettingsTcpQueryResponse {
		return vs[0].([]SyntheticMonitoringCheckSettingsTcpQueryResponse)[vs[1].(int)]
	}).(SyntheticMonitoringCheckSettingsTcpQueryResponseOutput)
}

type SyntheticMonitoringCheckSettingsTcpTlsConfig struct {
	CaCert             *string `pulumi:"caCert"`
	ClientCert         *string `pulumi:"clientCert"`
	ClientKey          *string `pulumi:"clientKey"`
	InsecureSkipVerify *bool   `pulumi:"insecureSkipVerify"`
	ServerName         *string `pulumi:"serverName"`
}

// SyntheticMonitoringCheckSettingsTcpTlsConfigInput is an input type that accepts SyntheticMonitoringCheckSettingsTcpTlsConfigArgs and SyntheticMonitoringCheckSettingsTcpTlsConfigOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsTcpTlsConfigInput` via:
//
//	SyntheticMonitoringCheckSettingsTcpTlsConfigArgs{...}
type SyntheticMonitoringCheckSettingsTcpTlsConfigInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsTcpTlsConfigOutput() SyntheticMonitoringCheckSettingsTcpTlsConfigOutput
	ToSyntheticMonitoringCheckSettingsTcpTlsConfigOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsTcpTlsConfigOutput
}

type SyntheticMonitoringCheckSettingsTcpTlsConfigArgs struct {
	CaCert             pulumi.StringPtrInput `pulumi:"caCert"`
	ClientCert         pulumi.StringPtrInput `pulumi:"clientCert"`
	ClientKey          pulumi.StringPtrInput `pulumi:"clientKey"`
	InsecureSkipVerify pulumi.BoolPtrInput   `pulumi:"insecureSkipVerify"`
	ServerName         pulumi.StringPtrInput `pulumi:"serverName"`
}

func (SyntheticMonitoringCheckSettingsTcpTlsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsTcpTlsConfig)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsTcpTlsConfigArgs) ToSyntheticMonitoringCheckSettingsTcpTlsConfigOutput() SyntheticMonitoringCheckSettingsTcpTlsConfigOutput {
	return i.ToSyntheticMonitoringCheckSettingsTcpTlsConfigOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsTcpTlsConfigArgs) ToSyntheticMonitoringCheckSettingsTcpTlsConfigOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsTcpTlsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsTcpTlsConfigOutput)
}

func (i SyntheticMonitoringCheckSettingsTcpTlsConfigArgs) ToSyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput() SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsTcpTlsConfigArgs) ToSyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsTcpTlsConfigOutput).ToSyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutputWithContext(ctx)
}

// SyntheticMonitoringCheckSettingsTcpTlsConfigPtrInput is an input type that accepts SyntheticMonitoringCheckSettingsTcpTlsConfigArgs, SyntheticMonitoringCheckSettingsTcpTlsConfigPtr and SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsTcpTlsConfigPtrInput` via:
//
//	        SyntheticMonitoringCheckSettingsTcpTlsConfigArgs{...}
//
//	or:
//
//	        nil
type SyntheticMonitoringCheckSettingsTcpTlsConfigPtrInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput() SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput
	ToSyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput
}

type syntheticMonitoringCheckSettingsTcpTlsConfigPtrType SyntheticMonitoringCheckSettingsTcpTlsConfigArgs

func SyntheticMonitoringCheckSettingsTcpTlsConfigPtr(v *SyntheticMonitoringCheckSettingsTcpTlsConfigArgs) SyntheticMonitoringCheckSettingsTcpTlsConfigPtrInput {
	return (*syntheticMonitoringCheckSettingsTcpTlsConfigPtrType)(v)
}

func (*syntheticMonitoringCheckSettingsTcpTlsConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettingsTcpTlsConfig)(nil)).Elem()
}

func (i *syntheticMonitoringCheckSettingsTcpTlsConfigPtrType) ToSyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput() SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutputWithContext(context.Background())
}

func (i *syntheticMonitoringCheckSettingsTcpTlsConfigPtrType) ToSyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput)
}

type SyntheticMonitoringCheckSettingsTcpTlsConfigOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsTcpTlsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsTcpTlsConfig)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsTcpTlsConfigOutput) ToSyntheticMonitoringCheckSettingsTcpTlsConfigOutput() SyntheticMonitoringCheckSettingsTcpTlsConfigOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsTcpTlsConfigOutput) ToSyntheticMonitoringCheckSettingsTcpTlsConfigOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsTcpTlsConfigOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsTcpTlsConfigOutput) ToSyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput() SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput {
	return o.ToSyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutputWithContext(context.Background())
}

func (o SyntheticMonitoringCheckSettingsTcpTlsConfigOutput) ToSyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticMonitoringCheckSettingsTcpTlsConfig) *SyntheticMonitoringCheckSettingsTcpTlsConfig {
		return &v
	}).(SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsTcpTlsConfigOutput) CaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsTcpTlsConfig) *string { return v.CaCert }).(pulumi.StringPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsTcpTlsConfigOutput) ClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsTcpTlsConfig) *string { return v.ClientCert }).(pulumi.StringPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsTcpTlsConfigOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsTcpTlsConfig) *string { return v.ClientKey }).(pulumi.StringPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsTcpTlsConfigOutput) InsecureSkipVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsTcpTlsConfig) *bool { return v.InsecureSkipVerify }).(pulumi.BoolPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsTcpTlsConfigOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsTcpTlsConfig) *string { return v.ServerName }).(pulumi.StringPtrOutput)
}

type SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettingsTcpTlsConfig)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput) ToSyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput() SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput) ToSyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput) Elem() SyntheticMonitoringCheckSettingsTcpTlsConfigOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsTcpTlsConfig) SyntheticMonitoringCheckSettingsTcpTlsConfig {
		if v != nil {
			return *v
		}
		var ret SyntheticMonitoringCheckSettingsTcpTlsConfig
		return ret
	}).(SyntheticMonitoringCheckSettingsTcpTlsConfigOutput)
}

func (o SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput) CaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsTcpTlsConfig) *string {
		if v == nil {
			return nil
		}
		return v.CaCert
	}).(pulumi.StringPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput) ClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsTcpTlsConfig) *string {
		if v == nil {
			return nil
		}
		return v.ClientCert
	}).(pulumi.StringPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsTcpTlsConfig) *string {
		if v == nil {
			return nil
		}
		return v.ClientKey
	}).(pulumi.StringPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput) InsecureSkipVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsTcpTlsConfig) *bool {
		if v == nil {
			return nil
		}
		return v.InsecureSkipVerify
	}).(pulumi.BoolPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsTcpTlsConfig) *string {
		if v == nil {
			return nil
		}
		return v.ServerName
	}).(pulumi.StringPtrOutput)
}

type SyntheticMonitoringCheckSettingsTraceroute struct {
	MaxHops        *int  `pulumi:"maxHops"`
	MaxUnknownHops *int  `pulumi:"maxUnknownHops"`
	PtrLookup      *bool `pulumi:"ptrLookup"`
}

// SyntheticMonitoringCheckSettingsTracerouteInput is an input type that accepts SyntheticMonitoringCheckSettingsTracerouteArgs and SyntheticMonitoringCheckSettingsTracerouteOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsTracerouteInput` via:
//
//	SyntheticMonitoringCheckSettingsTracerouteArgs{...}
type SyntheticMonitoringCheckSettingsTracerouteInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsTracerouteOutput() SyntheticMonitoringCheckSettingsTracerouteOutput
	ToSyntheticMonitoringCheckSettingsTracerouteOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsTracerouteOutput
}

type SyntheticMonitoringCheckSettingsTracerouteArgs struct {
	MaxHops        pulumi.IntPtrInput  `pulumi:"maxHops"`
	MaxUnknownHops pulumi.IntPtrInput  `pulumi:"maxUnknownHops"`
	PtrLookup      pulumi.BoolPtrInput `pulumi:"ptrLookup"`
}

func (SyntheticMonitoringCheckSettingsTracerouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsTraceroute)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsTracerouteArgs) ToSyntheticMonitoringCheckSettingsTracerouteOutput() SyntheticMonitoringCheckSettingsTracerouteOutput {
	return i.ToSyntheticMonitoringCheckSettingsTracerouteOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsTracerouteArgs) ToSyntheticMonitoringCheckSettingsTracerouteOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsTracerouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsTracerouteOutput)
}

func (i SyntheticMonitoringCheckSettingsTracerouteArgs) ToSyntheticMonitoringCheckSettingsTraceroutePtrOutput() SyntheticMonitoringCheckSettingsTraceroutePtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsTraceroutePtrOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsTracerouteArgs) ToSyntheticMonitoringCheckSettingsTraceroutePtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsTraceroutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsTracerouteOutput).ToSyntheticMonitoringCheckSettingsTraceroutePtrOutputWithContext(ctx)
}

// SyntheticMonitoringCheckSettingsTraceroutePtrInput is an input type that accepts SyntheticMonitoringCheckSettingsTracerouteArgs, SyntheticMonitoringCheckSettingsTraceroutePtr and SyntheticMonitoringCheckSettingsTraceroutePtrOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsTraceroutePtrInput` via:
//
//	        SyntheticMonitoringCheckSettingsTracerouteArgs{...}
//
//	or:
//
//	        nil
type SyntheticMonitoringCheckSettingsTraceroutePtrInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsTraceroutePtrOutput() SyntheticMonitoringCheckSettingsTraceroutePtrOutput
	ToSyntheticMonitoringCheckSettingsTraceroutePtrOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsTraceroutePtrOutput
}

type syntheticMonitoringCheckSettingsTraceroutePtrType SyntheticMonitoringCheckSettingsTracerouteArgs

func SyntheticMonitoringCheckSettingsTraceroutePtr(v *SyntheticMonitoringCheckSettingsTracerouteArgs) SyntheticMonitoringCheckSettingsTraceroutePtrInput {
	return (*syntheticMonitoringCheckSettingsTraceroutePtrType)(v)
}

func (*syntheticMonitoringCheckSettingsTraceroutePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettingsTraceroute)(nil)).Elem()
}

func (i *syntheticMonitoringCheckSettingsTraceroutePtrType) ToSyntheticMonitoringCheckSettingsTraceroutePtrOutput() SyntheticMonitoringCheckSettingsTraceroutePtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsTraceroutePtrOutputWithContext(context.Background())
}

func (i *syntheticMonitoringCheckSettingsTraceroutePtrType) ToSyntheticMonitoringCheckSettingsTraceroutePtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsTraceroutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsTraceroutePtrOutput)
}

type SyntheticMonitoringCheckSettingsTracerouteOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsTracerouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsTraceroute)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsTracerouteOutput) ToSyntheticMonitoringCheckSettingsTracerouteOutput() SyntheticMonitoringCheckSettingsTracerouteOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsTracerouteOutput) ToSyntheticMonitoringCheckSettingsTracerouteOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsTracerouteOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsTracerouteOutput) ToSyntheticMonitoringCheckSettingsTraceroutePtrOutput() SyntheticMonitoringCheckSettingsTraceroutePtrOutput {
	return o.ToSyntheticMonitoringCheckSettingsTraceroutePtrOutputWithContext(context.Background())
}

func (o SyntheticMonitoringCheckSettingsTracerouteOutput) ToSyntheticMonitoringCheckSettingsTraceroutePtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsTraceroutePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticMonitoringCheckSettingsTraceroute) *SyntheticMonitoringCheckSettingsTraceroute {
		return &v
	}).(SyntheticMonitoringCheckSettingsTraceroutePtrOutput)
}

func (o SyntheticMonitoringCheckSettingsTracerouteOutput) MaxHops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsTraceroute) *int { return v.MaxHops }).(pulumi.IntPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsTracerouteOutput) MaxUnknownHops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsTraceroute) *int { return v.MaxUnknownHops }).(pulumi.IntPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsTracerouteOutput) PtrLookup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsTraceroute) *bool { return v.PtrLookup }).(pulumi.BoolPtrOutput)
}

type SyntheticMonitoringCheckSettingsTraceroutePtrOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsTraceroutePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettingsTraceroute)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsTraceroutePtrOutput) ToSyntheticMonitoringCheckSettingsTraceroutePtrOutput() SyntheticMonitoringCheckSettingsTraceroutePtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsTraceroutePtrOutput) ToSyntheticMonitoringCheckSettingsTraceroutePtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsTraceroutePtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsTraceroutePtrOutput) Elem() SyntheticMonitoringCheckSettingsTracerouteOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsTraceroute) SyntheticMonitoringCheckSettingsTraceroute {
		if v != nil {
			return *v
		}
		var ret SyntheticMonitoringCheckSettingsTraceroute
		return ret
	}).(SyntheticMonitoringCheckSettingsTracerouteOutput)
}

func (o SyntheticMonitoringCheckSettingsTraceroutePtrOutput) MaxHops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsTraceroute) *int {
		if v == nil {
			return nil
		}
		return v.MaxHops
	}).(pulumi.IntPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsTraceroutePtrOutput) MaxUnknownHops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsTraceroute) *int {
		if v == nil {
			return nil
		}
		return v.MaxUnknownHops
	}).(pulumi.IntPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsTraceroutePtrOutput) PtrLookup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsTraceroute) *bool {
		if v == nil {
			return nil
		}
		return v.PtrLookup
	}).(pulumi.BoolPtrOutput)
}

type GetDashboardsDashboard struct {
	FolderTitle string `pulumi:"folderTitle"`
	Title       string `pulumi:"title"`
	Uid         string `pulumi:"uid"`
}

// GetDashboardsDashboardInput is an input type that accepts GetDashboardsDashboardArgs and GetDashboardsDashboardOutput values.
// You can construct a concrete instance of `GetDashboardsDashboardInput` via:
//
//	GetDashboardsDashboardArgs{...}
type GetDashboardsDashboardInput interface {
	pulumi.Input

	ToGetDashboardsDashboardOutput() GetDashboardsDashboardOutput
	ToGetDashboardsDashboardOutputWithContext(context.Context) GetDashboardsDashboardOutput
}

type GetDashboardsDashboardArgs struct {
	FolderTitle pulumi.StringInput `pulumi:"folderTitle"`
	Title       pulumi.StringInput `pulumi:"title"`
	Uid         pulumi.StringInput `pulumi:"uid"`
}

func (GetDashboardsDashboardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDashboardsDashboard)(nil)).Elem()
}

func (i GetDashboardsDashboardArgs) ToGetDashboardsDashboardOutput() GetDashboardsDashboardOutput {
	return i.ToGetDashboardsDashboardOutputWithContext(context.Background())
}

func (i GetDashboardsDashboardArgs) ToGetDashboardsDashboardOutputWithContext(ctx context.Context) GetDashboardsDashboardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDashboardsDashboardOutput)
}

// GetDashboardsDashboardArrayInput is an input type that accepts GetDashboardsDashboardArray and GetDashboardsDashboardArrayOutput values.
// You can construct a concrete instance of `GetDashboardsDashboardArrayInput` via:
//
//	GetDashboardsDashboardArray{ GetDashboardsDashboardArgs{...} }
type GetDashboardsDashboardArrayInput interface {
	pulumi.Input

	ToGetDashboardsDashboardArrayOutput() GetDashboardsDashboardArrayOutput
	ToGetDashboardsDashboardArrayOutputWithContext(context.Context) GetDashboardsDashboardArrayOutput
}

type GetDashboardsDashboardArray []GetDashboardsDashboardInput

func (GetDashboardsDashboardArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDashboardsDashboard)(nil)).Elem()
}

func (i GetDashboardsDashboardArray) ToGetDashboardsDashboardArrayOutput() GetDashboardsDashboardArrayOutput {
	return i.ToGetDashboardsDashboardArrayOutputWithContext(context.Background())
}

func (i GetDashboardsDashboardArray) ToGetDashboardsDashboardArrayOutputWithContext(ctx context.Context) GetDashboardsDashboardArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDashboardsDashboardArrayOutput)
}

type GetDashboardsDashboardOutput struct{ *pulumi.OutputState }

func (GetDashboardsDashboardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDashboardsDashboard)(nil)).Elem()
}

func (o GetDashboardsDashboardOutput) ToGetDashboardsDashboardOutput() GetDashboardsDashboardOutput {
	return o
}

func (o GetDashboardsDashboardOutput) ToGetDashboardsDashboardOutputWithContext(ctx context.Context) GetDashboardsDashboardOutput {
	return o
}

func (o GetDashboardsDashboardOutput) FolderTitle() pulumi.StringOutput {
	return o.ApplyT(func(v GetDashboardsDashboard) string { return v.FolderTitle }).(pulumi.StringOutput)
}

func (o GetDashboardsDashboardOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v GetDashboardsDashboard) string { return v.Title }).(pulumi.StringOutput)
}

func (o GetDashboardsDashboardOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v GetDashboardsDashboard) string { return v.Uid }).(pulumi.StringOutput)
}

type GetDashboardsDashboardArrayOutput struct{ *pulumi.OutputState }

func (GetDashboardsDashboardArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDashboardsDashboard)(nil)).Elem()
}

func (o GetDashboardsDashboardArrayOutput) ToGetDashboardsDashboardArrayOutput() GetDashboardsDashboardArrayOutput {
	return o
}

func (o GetDashboardsDashboardArrayOutput) ToGetDashboardsDashboardArrayOutputWithContext(ctx context.Context) GetDashboardsDashboardArrayOutput {
	return o
}

func (o GetDashboardsDashboardArrayOutput) Index(i pulumi.IntInput) GetDashboardsDashboardOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDashboardsDashboard {
		return vs[0].([]GetDashboardsDashboard)[vs[1].(int)]
	}).(GetDashboardsDashboardOutput)
}

type GetFoldersFolder struct {
	// The ID of this resource.
	Id    int    `pulumi:"id"`
	Title string `pulumi:"title"`
	Uid   string `pulumi:"uid"`
	Url   string `pulumi:"url"`
}

// GetFoldersFolderInput is an input type that accepts GetFoldersFolderArgs and GetFoldersFolderOutput values.
// You can construct a concrete instance of `GetFoldersFolderInput` via:
//
//	GetFoldersFolderArgs{...}
type GetFoldersFolderInput interface {
	pulumi.Input

	ToGetFoldersFolderOutput() GetFoldersFolderOutput
	ToGetFoldersFolderOutputWithContext(context.Context) GetFoldersFolderOutput
}

type GetFoldersFolderArgs struct {
	// The ID of this resource.
	Id    pulumi.IntInput    `pulumi:"id"`
	Title pulumi.StringInput `pulumi:"title"`
	Uid   pulumi.StringInput `pulumi:"uid"`
	Url   pulumi.StringInput `pulumi:"url"`
}

func (GetFoldersFolderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFoldersFolder)(nil)).Elem()
}

func (i GetFoldersFolderArgs) ToGetFoldersFolderOutput() GetFoldersFolderOutput {
	return i.ToGetFoldersFolderOutputWithContext(context.Background())
}

func (i GetFoldersFolderArgs) ToGetFoldersFolderOutputWithContext(ctx context.Context) GetFoldersFolderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFoldersFolderOutput)
}

// GetFoldersFolderArrayInput is an input type that accepts GetFoldersFolderArray and GetFoldersFolderArrayOutput values.
// You can construct a concrete instance of `GetFoldersFolderArrayInput` via:
//
//	GetFoldersFolderArray{ GetFoldersFolderArgs{...} }
type GetFoldersFolderArrayInput interface {
	pulumi.Input

	ToGetFoldersFolderArrayOutput() GetFoldersFolderArrayOutput
	ToGetFoldersFolderArrayOutputWithContext(context.Context) GetFoldersFolderArrayOutput
}

type GetFoldersFolderArray []GetFoldersFolderInput

func (GetFoldersFolderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFoldersFolder)(nil)).Elem()
}

func (i GetFoldersFolderArray) ToGetFoldersFolderArrayOutput() GetFoldersFolderArrayOutput {
	return i.ToGetFoldersFolderArrayOutputWithContext(context.Background())
}

func (i GetFoldersFolderArray) ToGetFoldersFolderArrayOutputWithContext(ctx context.Context) GetFoldersFolderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFoldersFolderArrayOutput)
}

type GetFoldersFolderOutput struct{ *pulumi.OutputState }

func (GetFoldersFolderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFoldersFolder)(nil)).Elem()
}

func (o GetFoldersFolderOutput) ToGetFoldersFolderOutput() GetFoldersFolderOutput {
	return o
}

func (o GetFoldersFolderOutput) ToGetFoldersFolderOutputWithContext(ctx context.Context) GetFoldersFolderOutput {
	return o
}

// The ID of this resource.
func (o GetFoldersFolderOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetFoldersFolder) int { return v.Id }).(pulumi.IntOutput)
}

func (o GetFoldersFolderOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v GetFoldersFolder) string { return v.Title }).(pulumi.StringOutput)
}

func (o GetFoldersFolderOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v GetFoldersFolder) string { return v.Uid }).(pulumi.StringOutput)
}

func (o GetFoldersFolderOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v GetFoldersFolder) string { return v.Url }).(pulumi.StringOutput)
}

type GetFoldersFolderArrayOutput struct{ *pulumi.OutputState }

func (GetFoldersFolderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFoldersFolder)(nil)).Elem()
}

func (o GetFoldersFolderArrayOutput) ToGetFoldersFolderArrayOutput() GetFoldersFolderArrayOutput {
	return o
}

func (o GetFoldersFolderArrayOutput) ToGetFoldersFolderArrayOutputWithContext(ctx context.Context) GetFoldersFolderArrayOutput {
	return o
}

func (o GetFoldersFolderArrayOutput) Index(i pulumi.IntInput) GetFoldersFolderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFoldersFolder {
		return vs[0].([]GetFoldersFolder)[vs[1].(int)]
	}).(GetFoldersFolderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BuiltinRoleAssignmentRoleInput)(nil)).Elem(), BuiltinRoleAssignmentRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuiltinRoleAssignmentRoleArrayInput)(nil)).Elem(), BuiltinRoleAssignmentRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointAlertmanagerInput)(nil)).Elem(), ContactPointAlertmanagerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointAlertmanagerArrayInput)(nil)).Elem(), ContactPointAlertmanagerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointDingdingInput)(nil)).Elem(), ContactPointDingdingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointDingdingArrayInput)(nil)).Elem(), ContactPointDingdingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointDiscordInput)(nil)).Elem(), ContactPointDiscordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointDiscordArrayInput)(nil)).Elem(), ContactPointDiscordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointEmailInput)(nil)).Elem(), ContactPointEmailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointEmailArrayInput)(nil)).Elem(), ContactPointEmailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointGooglechatInput)(nil)).Elem(), ContactPointGooglechatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointGooglechatArrayInput)(nil)).Elem(), ContactPointGooglechatArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointKafkaInput)(nil)).Elem(), ContactPointKafkaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointKafkaArrayInput)(nil)).Elem(), ContactPointKafkaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointOpsgenyInput)(nil)).Elem(), ContactPointOpsgenyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointOpsgenyArrayInput)(nil)).Elem(), ContactPointOpsgenyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointPagerdutyInput)(nil)).Elem(), ContactPointPagerdutyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointPagerdutyArrayInput)(nil)).Elem(), ContactPointPagerdutyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointPushoverInput)(nil)).Elem(), ContactPointPushoverArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointPushoverArrayInput)(nil)).Elem(), ContactPointPushoverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointSensugoInput)(nil)).Elem(), ContactPointSensugoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointSensugoArrayInput)(nil)).Elem(), ContactPointSensugoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointSlackInput)(nil)).Elem(), ContactPointSlackArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointSlackArrayInput)(nil)).Elem(), ContactPointSlackArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointTeamInput)(nil)).Elem(), ContactPointTeamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointTeamArrayInput)(nil)).Elem(), ContactPointTeamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointTelegramInput)(nil)).Elem(), ContactPointTelegramArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointTelegramArrayInput)(nil)).Elem(), ContactPointTelegramArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointThreemaInput)(nil)).Elem(), ContactPointThreemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointThreemaArrayInput)(nil)).Elem(), ContactPointThreemaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointVictoropInput)(nil)).Elem(), ContactPointVictoropArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointVictoropArrayInput)(nil)).Elem(), ContactPointVictoropArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointWebhookInput)(nil)).Elem(), ContactPointWebhookArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointWebhookArrayInput)(nil)).Elem(), ContactPointWebhookArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointWecomInput)(nil)).Elem(), ContactPointWecomArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointWecomArrayInput)(nil)).Elem(), ContactPointWecomArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardPermissionPermissionInput)(nil)).Elem(), DashboardPermissionPermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardPermissionPermissionArrayInput)(nil)).Elem(), DashboardPermissionPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceJsonDataInput)(nil)).Elem(), DataSourceJsonDataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceJsonDataArrayInput)(nil)).Elem(), DataSourceJsonDataArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceJsonDataDerivedFieldInput)(nil)).Elem(), DataSourceJsonDataDerivedFieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceJsonDataDerivedFieldArrayInput)(nil)).Elem(), DataSourceJsonDataDerivedFieldArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourcePermissionPermissionInput)(nil)).Elem(), DataSourcePermissionPermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourcePermissionPermissionArrayInput)(nil)).Elem(), DataSourcePermissionPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceSecureJsonDataInput)(nil)).Elem(), DataSourceSecureJsonDataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceSecureJsonDataArrayInput)(nil)).Elem(), DataSourceSecureJsonDataArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FolderPermissionPermissionInput)(nil)).Elem(), FolderPermissionPermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FolderPermissionPermissionArrayInput)(nil)).Elem(), FolderPermissionPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MuteTimingIntervalInput)(nil)).Elem(), MuteTimingIntervalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MuteTimingIntervalArrayInput)(nil)).Elem(), MuteTimingIntervalArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MuteTimingIntervalTimeInput)(nil)).Elem(), MuteTimingIntervalTimeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MuteTimingIntervalTimeArrayInput)(nil)).Elem(), MuteTimingIntervalTimeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyPolicyInput)(nil)).Elem(), NotificationPolicyPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyPolicyArrayInput)(nil)).Elem(), NotificationPolicyPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyPolicyMatcherInput)(nil)).Elem(), NotificationPolicyPolicyMatcherArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyPolicyMatcherArrayInput)(nil)).Elem(), NotificationPolicyPolicyMatcherArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyPolicyPolicyInput)(nil)).Elem(), NotificationPolicyPolicyPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyPolicyPolicyArrayInput)(nil)).Elem(), NotificationPolicyPolicyPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyPolicyPolicyMatcherInput)(nil)).Elem(), NotificationPolicyPolicyPolicyMatcherArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyPolicyPolicyMatcherArrayInput)(nil)).Elem(), NotificationPolicyPolicyPolicyMatcherArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicyInput)(nil)).Elem(), NotificationPolicyPolicyPolicyPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicyArrayInput)(nil)).Elem(), NotificationPolicyPolicyPolicyPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicyMatcherInput)(nil)).Elem(), NotificationPolicyPolicyPolicyPolicyMatcherArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicyMatcherArrayInput)(nil)).Elem(), NotificationPolicyPolicyPolicyPolicyMatcherArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicyPolicyInput)(nil)).Elem(), NotificationPolicyPolicyPolicyPolicyPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicyPolicyArrayInput)(nil)).Elem(), NotificationPolicyPolicyPolicyPolicyPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicyPolicyMatcherInput)(nil)).Elem(), NotificationPolicyPolicyPolicyPolicyPolicyMatcherArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayInput)(nil)).Elem(), NotificationPolicyPolicyPolicyPolicyPolicyMatcherArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallIntegrationDefaultRouteInput)(nil)).Elem(), OncallIntegrationDefaultRouteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallIntegrationDefaultRoutePtrInput)(nil)).Elem(), OncallIntegrationDefaultRouteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallIntegrationDefaultRouteMsteamsInput)(nil)).Elem(), OncallIntegrationDefaultRouteMsteamsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallIntegrationDefaultRouteMsteamsPtrInput)(nil)).Elem(), OncallIntegrationDefaultRouteMsteamsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallIntegrationDefaultRouteSlackInput)(nil)).Elem(), OncallIntegrationDefaultRouteSlackArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallIntegrationDefaultRouteSlackPtrInput)(nil)).Elem(), OncallIntegrationDefaultRouteSlackArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallIntegrationDefaultRouteTelegramInput)(nil)).Elem(), OncallIntegrationDefaultRouteTelegramArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallIntegrationDefaultRouteTelegramPtrInput)(nil)).Elem(), OncallIntegrationDefaultRouteTelegramArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallIntegrationTemplatesInput)(nil)).Elem(), OncallIntegrationTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallIntegrationTemplatesPtrInput)(nil)).Elem(), OncallIntegrationTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallIntegrationTemplatesSlackInput)(nil)).Elem(), OncallIntegrationTemplatesSlackArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallIntegrationTemplatesSlackPtrInput)(nil)).Elem(), OncallIntegrationTemplatesSlackArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallRouteMsteamsInput)(nil)).Elem(), OncallRouteMsteamsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallRouteMsteamsPtrInput)(nil)).Elem(), OncallRouteMsteamsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallRouteSlackInput)(nil)).Elem(), OncallRouteSlackArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallRouteSlackPtrInput)(nil)).Elem(), OncallRouteSlackArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallRouteTelegramInput)(nil)).Elem(), OncallRouteTelegramArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallRouteTelegramPtrInput)(nil)).Elem(), OncallRouteTelegramArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallScheduleSlackInput)(nil)).Elem(), OncallScheduleSlackArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallScheduleSlackPtrInput)(nil)).Elem(), OncallScheduleSlackArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaylistItemInput)(nil)).Elem(), PlaylistItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaylistItemArrayInput)(nil)).Elem(), PlaylistItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReportScheduleInput)(nil)).Elem(), ReportScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReportSchedulePtrInput)(nil)).Elem(), ReportScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReportTimeRangeInput)(nil)).Elem(), ReportTimeRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReportTimeRangePtrInput)(nil)).Elem(), ReportTimeRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RolePermissionInput)(nil)).Elem(), RolePermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RolePermissionArrayInput)(nil)).Elem(), RolePermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleGroupRuleInput)(nil)).Elem(), RuleGroupRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleGroupRuleArrayInput)(nil)).Elem(), RuleGroupRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleGroupRuleDataInput)(nil)).Elem(), RuleGroupRuleDataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleGroupRuleDataArrayInput)(nil)).Elem(), RuleGroupRuleDataArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleGroupRuleDataRelativeTimeRangeInput)(nil)).Elem(), RuleGroupRuleDataRelativeTimeRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsPtrInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsDnsInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsDnsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsDnsPtrInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsDnsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsHttpInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsHttpPtrInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsHttpBasicAuthInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsHttpBasicAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsHttpBasicAuthPtrInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsHttpBasicAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsHttpTlsConfigInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsHttpTlsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsHttpTlsConfigPtrInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsHttpTlsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsPingInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsPingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsPingPtrInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsPingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsTcpInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsTcpPtrInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsTcpQueryResponseInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsTcpQueryResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsTcpQueryResponseArrayInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsTcpQueryResponseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsTcpTlsConfigInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsTcpTlsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsTcpTlsConfigPtrInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsTcpTlsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsTracerouteInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsTracerouteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsTraceroutePtrInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsTracerouteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDashboardsDashboardInput)(nil)).Elem(), GetDashboardsDashboardArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDashboardsDashboardArrayInput)(nil)).Elem(), GetDashboardsDashboardArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFoldersFolderInput)(nil)).Elem(), GetFoldersFolderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFoldersFolderArrayInput)(nil)).Elem(), GetFoldersFolderArray{})
	pulumi.RegisterOutputType(BuiltinRoleAssignmentRoleOutput{})
	pulumi.RegisterOutputType(BuiltinRoleAssignmentRoleArrayOutput{})
	pulumi.RegisterOutputType(ContactPointAlertmanagerOutput{})
	pulumi.RegisterOutputType(ContactPointAlertmanagerArrayOutput{})
	pulumi.RegisterOutputType(ContactPointDingdingOutput{})
	pulumi.RegisterOutputType(ContactPointDingdingArrayOutput{})
	pulumi.RegisterOutputType(ContactPointDiscordOutput{})
	pulumi.RegisterOutputType(ContactPointDiscordArrayOutput{})
	pulumi.RegisterOutputType(ContactPointEmailOutput{})
	pulumi.RegisterOutputType(ContactPointEmailArrayOutput{})
	pulumi.RegisterOutputType(ContactPointGooglechatOutput{})
	pulumi.RegisterOutputType(ContactPointGooglechatArrayOutput{})
	pulumi.RegisterOutputType(ContactPointKafkaOutput{})
	pulumi.RegisterOutputType(ContactPointKafkaArrayOutput{})
	pulumi.RegisterOutputType(ContactPointOpsgenyOutput{})
	pulumi.RegisterOutputType(ContactPointOpsgenyArrayOutput{})
	pulumi.RegisterOutputType(ContactPointPagerdutyOutput{})
	pulumi.RegisterOutputType(ContactPointPagerdutyArrayOutput{})
	pulumi.RegisterOutputType(ContactPointPushoverOutput{})
	pulumi.RegisterOutputType(ContactPointPushoverArrayOutput{})
	pulumi.RegisterOutputType(ContactPointSensugoOutput{})
	pulumi.RegisterOutputType(ContactPointSensugoArrayOutput{})
	pulumi.RegisterOutputType(ContactPointSlackOutput{})
	pulumi.RegisterOutputType(ContactPointSlackArrayOutput{})
	pulumi.RegisterOutputType(ContactPointTeamOutput{})
	pulumi.RegisterOutputType(ContactPointTeamArrayOutput{})
	pulumi.RegisterOutputType(ContactPointTelegramOutput{})
	pulumi.RegisterOutputType(ContactPointTelegramArrayOutput{})
	pulumi.RegisterOutputType(ContactPointThreemaOutput{})
	pulumi.RegisterOutputType(ContactPointThreemaArrayOutput{})
	pulumi.RegisterOutputType(ContactPointVictoropOutput{})
	pulumi.RegisterOutputType(ContactPointVictoropArrayOutput{})
	pulumi.RegisterOutputType(ContactPointWebhookOutput{})
	pulumi.RegisterOutputType(ContactPointWebhookArrayOutput{})
	pulumi.RegisterOutputType(ContactPointWecomOutput{})
	pulumi.RegisterOutputType(ContactPointWecomArrayOutput{})
	pulumi.RegisterOutputType(DashboardPermissionPermissionOutput{})
	pulumi.RegisterOutputType(DashboardPermissionPermissionArrayOutput{})
	pulumi.RegisterOutputType(DataSourceJsonDataOutput{})
	pulumi.RegisterOutputType(DataSourceJsonDataArrayOutput{})
	pulumi.RegisterOutputType(DataSourceJsonDataDerivedFieldOutput{})
	pulumi.RegisterOutputType(DataSourceJsonDataDerivedFieldArrayOutput{})
	pulumi.RegisterOutputType(DataSourcePermissionPermissionOutput{})
	pulumi.RegisterOutputType(DataSourcePermissionPermissionArrayOutput{})
	pulumi.RegisterOutputType(DataSourceSecureJsonDataOutput{})
	pulumi.RegisterOutputType(DataSourceSecureJsonDataArrayOutput{})
	pulumi.RegisterOutputType(FolderPermissionPermissionOutput{})
	pulumi.RegisterOutputType(FolderPermissionPermissionArrayOutput{})
	pulumi.RegisterOutputType(MuteTimingIntervalOutput{})
	pulumi.RegisterOutputType(MuteTimingIntervalArrayOutput{})
	pulumi.RegisterOutputType(MuteTimingIntervalTimeOutput{})
	pulumi.RegisterOutputType(MuteTimingIntervalTimeArrayOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyArrayOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyMatcherOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyMatcherArrayOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyPolicyOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyPolicyArrayOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyPolicyMatcherOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyPolicyMatcherArrayOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyPolicyPolicyOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyPolicyPolicyArrayOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyPolicyPolicyMatcherOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyPolicyPolicyMatcherArrayOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyPolicyPolicyPolicyOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyPolicyPolicyPolicyArrayOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput{})
	pulumi.RegisterOutputType(OncallIntegrationDefaultRouteOutput{})
	pulumi.RegisterOutputType(OncallIntegrationDefaultRoutePtrOutput{})
	pulumi.RegisterOutputType(OncallIntegrationDefaultRouteMsteamsOutput{})
	pulumi.RegisterOutputType(OncallIntegrationDefaultRouteMsteamsPtrOutput{})
	pulumi.RegisterOutputType(OncallIntegrationDefaultRouteSlackOutput{})
	pulumi.RegisterOutputType(OncallIntegrationDefaultRouteSlackPtrOutput{})
	pulumi.RegisterOutputType(OncallIntegrationDefaultRouteTelegramOutput{})
	pulumi.RegisterOutputType(OncallIntegrationDefaultRouteTelegramPtrOutput{})
	pulumi.RegisterOutputType(OncallIntegrationTemplatesOutput{})
	pulumi.RegisterOutputType(OncallIntegrationTemplatesPtrOutput{})
	pulumi.RegisterOutputType(OncallIntegrationTemplatesSlackOutput{})
	pulumi.RegisterOutputType(OncallIntegrationTemplatesSlackPtrOutput{})
	pulumi.RegisterOutputType(OncallRouteMsteamsOutput{})
	pulumi.RegisterOutputType(OncallRouteMsteamsPtrOutput{})
	pulumi.RegisterOutputType(OncallRouteSlackOutput{})
	pulumi.RegisterOutputType(OncallRouteSlackPtrOutput{})
	pulumi.RegisterOutputType(OncallRouteTelegramOutput{})
	pulumi.RegisterOutputType(OncallRouteTelegramPtrOutput{})
	pulumi.RegisterOutputType(OncallScheduleSlackOutput{})
	pulumi.RegisterOutputType(OncallScheduleSlackPtrOutput{})
	pulumi.RegisterOutputType(PlaylistItemOutput{})
	pulumi.RegisterOutputType(PlaylistItemArrayOutput{})
	pulumi.RegisterOutputType(ReportScheduleOutput{})
	pulumi.RegisterOutputType(ReportSchedulePtrOutput{})
	pulumi.RegisterOutputType(ReportTimeRangeOutput{})
	pulumi.RegisterOutputType(ReportTimeRangePtrOutput{})
	pulumi.RegisterOutputType(RolePermissionOutput{})
	pulumi.RegisterOutputType(RolePermissionArrayOutput{})
	pulumi.RegisterOutputType(RuleGroupRuleOutput{})
	pulumi.RegisterOutputType(RuleGroupRuleArrayOutput{})
	pulumi.RegisterOutputType(RuleGroupRuleDataOutput{})
	pulumi.RegisterOutputType(RuleGroupRuleDataArrayOutput{})
	pulumi.RegisterOutputType(RuleGroupRuleDataRelativeTimeRangeOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsPtrOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsDnsOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsDnsPtrOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsHttpOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsHttpPtrOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsHttpBasicAuthOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsHttpTlsConfigOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsPingOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsPingPtrOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsTcpOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsTcpPtrOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsTcpQueryResponseOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsTcpQueryResponseArrayOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsTcpTlsConfigOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsTracerouteOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsTraceroutePtrOutput{})
	pulumi.RegisterOutputType(GetDashboardsDashboardOutput{})
	pulumi.RegisterOutputType(GetDashboardsDashboardArrayOutput{})
	pulumi.RegisterOutputType(GetFoldersFolderOutput{})
	pulumi.RegisterOutputType(GetFoldersFolderArrayOutput{})
}
