// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// * [Official documentation](https://grafana.com/docs/grafana/latest/dashboards/manage-dashboards/)
// * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/folder/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := grafana.NewFolder(ctx, "testA", &grafana.FolderArgs{
//				Title: pulumi.String("test-folder-a"),
//				Uid:   pulumi.String("test-ds-folder-uid-a"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = grafana.NewFolder(ctx, "testB", &grafana.FolderArgs{
//				Title: pulumi.String("test-folder-b"),
//				Uid:   pulumi.String("test-ds-folder-uid-b"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = grafana.GetFolders(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetFolders(ctx *pulumi.Context, opts ...pulumi.InvokeOption) (*GetFoldersResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetFoldersResult
	err := ctx.Invoke("grafana:index/getFolders:getFolders", nil, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of values returned by getFolders.
type GetFoldersResult struct {
	// The Grafana instance's folders.
	Folders []GetFoldersFolder `pulumi:"folders"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
}

func GetFoldersOutput(ctx *pulumi.Context, opts ...pulumi.InvokeOption) GetFoldersResultOutput {
	return pulumi.ToOutput(0).ApplyT(func(int) (GetFoldersResult, error) {
		r, err := GetFolders(ctx, opts...)
		var s GetFoldersResult
		if r != nil {
			s = *r
		}
		return s, err
	}).(GetFoldersResultOutput)
}

// A collection of values returned by getFolders.
type GetFoldersResultOutput struct{ *pulumi.OutputState }

func (GetFoldersResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFoldersResult)(nil)).Elem()
}

func (o GetFoldersResultOutput) ToGetFoldersResultOutput() GetFoldersResultOutput {
	return o
}

func (o GetFoldersResultOutput) ToGetFoldersResultOutputWithContext(ctx context.Context) GetFoldersResultOutput {
	return o
}

func (o GetFoldersResultOutput) ToOutput(ctx context.Context) pulumix.Output[GetFoldersResult] {
	return pulumix.Output[GetFoldersResult]{
		OutputState: o.OutputState,
	}
}

// The Grafana instance's folders.
func (o GetFoldersResultOutput) Folders() GetFoldersFolderArrayOutput {
	return o.ApplyT(func(v GetFoldersResult) []GetFoldersFolder { return v.Folders }).(GetFoldersFolderArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetFoldersResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetFoldersResult) string { return v.Id }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetFoldersResultOutput{})
}
