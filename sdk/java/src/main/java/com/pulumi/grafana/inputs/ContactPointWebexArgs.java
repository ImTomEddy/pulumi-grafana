// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContactPointWebexArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContactPointWebexArgs Empty = new ContactPointWebexArgs();

    /**
     * The URL to send webhook requests to.
     * 
     */
    @Import(name="apiUrl")
    private @Nullable Output<String> apiUrl;

    /**
     * @return The URL to send webhook requests to.
     * 
     */
    public Optional<Output<String>> apiUrl() {
        return Optional.ofNullable(this.apiUrl);
    }

    /**
     * Whether to disable sending resolve messages. Defaults to `false`.
     * 
     */
    @Import(name="disableResolveMessage")
    private @Nullable Output<Boolean> disableResolveMessage;

    /**
     * @return Whether to disable sending resolve messages. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> disableResolveMessage() {
        return Optional.ofNullable(this.disableResolveMessage);
    }

    /**
     * The templated title of the message to send.
     * 
     */
    @Import(name="message")
    private @Nullable Output<String> message;

    /**
     * @return The templated title of the message to send.
     * 
     */
    public Optional<Output<String>> message() {
        return Optional.ofNullable(this.message);
    }

    /**
     * ID of the Webex Teams room where to send the messages.
     * 
     */
    @Import(name="roomId")
    private @Nullable Output<String> roomId;

    /**
     * @return ID of the Webex Teams room where to send the messages.
     * 
     */
    public Optional<Output<String>> roomId() {
        return Optional.ofNullable(this.roomId);
    }

    /**
     * Additional custom properties to attach to the notifier. Defaults to `map[]`.
     * 
     */
    @Import(name="settings")
    private @Nullable Output<Map<String,String>> settings;

    /**
     * @return Additional custom properties to attach to the notifier. Defaults to `map[]`.
     * 
     */
    public Optional<Output<Map<String,String>>> settings() {
        return Optional.ofNullable(this.settings);
    }

    /**
     * The bearer token used to authorize the client.
     * 
     */
    @Import(name="token")
    private @Nullable Output<String> token;

    /**
     * @return The bearer token used to authorize the client.
     * 
     */
    public Optional<Output<String>> token() {
        return Optional.ofNullable(this.token);
    }

    /**
     * The UID of the contact point.
     * 
     */
    @Import(name="uid")
    private @Nullable Output<String> uid;

    /**
     * @return The UID of the contact point.
     * 
     */
    public Optional<Output<String>> uid() {
        return Optional.ofNullable(this.uid);
    }

    private ContactPointWebexArgs() {}

    private ContactPointWebexArgs(ContactPointWebexArgs $) {
        this.apiUrl = $.apiUrl;
        this.disableResolveMessage = $.disableResolveMessage;
        this.message = $.message;
        this.roomId = $.roomId;
        this.settings = $.settings;
        this.token = $.token;
        this.uid = $.uid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContactPointWebexArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContactPointWebexArgs $;

        public Builder() {
            $ = new ContactPointWebexArgs();
        }

        public Builder(ContactPointWebexArgs defaults) {
            $ = new ContactPointWebexArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiUrl The URL to send webhook requests to.
         * 
         * @return builder
         * 
         */
        public Builder apiUrl(@Nullable Output<String> apiUrl) {
            $.apiUrl = apiUrl;
            return this;
        }

        /**
         * @param apiUrl The URL to send webhook requests to.
         * 
         * @return builder
         * 
         */
        public Builder apiUrl(String apiUrl) {
            return apiUrl(Output.of(apiUrl));
        }

        /**
         * @param disableResolveMessage Whether to disable sending resolve messages. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder disableResolveMessage(@Nullable Output<Boolean> disableResolveMessage) {
            $.disableResolveMessage = disableResolveMessage;
            return this;
        }

        /**
         * @param disableResolveMessage Whether to disable sending resolve messages. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder disableResolveMessage(Boolean disableResolveMessage) {
            return disableResolveMessage(Output.of(disableResolveMessage));
        }

        /**
         * @param message The templated title of the message to send.
         * 
         * @return builder
         * 
         */
        public Builder message(@Nullable Output<String> message) {
            $.message = message;
            return this;
        }

        /**
         * @param message The templated title of the message to send.
         * 
         * @return builder
         * 
         */
        public Builder message(String message) {
            return message(Output.of(message));
        }

        /**
         * @param roomId ID of the Webex Teams room where to send the messages.
         * 
         * @return builder
         * 
         */
        public Builder roomId(@Nullable Output<String> roomId) {
            $.roomId = roomId;
            return this;
        }

        /**
         * @param roomId ID of the Webex Teams room where to send the messages.
         * 
         * @return builder
         * 
         */
        public Builder roomId(String roomId) {
            return roomId(Output.of(roomId));
        }

        /**
         * @param settings Additional custom properties to attach to the notifier. Defaults to `map[]`.
         * 
         * @return builder
         * 
         */
        public Builder settings(@Nullable Output<Map<String,String>> settings) {
            $.settings = settings;
            return this;
        }

        /**
         * @param settings Additional custom properties to attach to the notifier. Defaults to `map[]`.
         * 
         * @return builder
         * 
         */
        public Builder settings(Map<String,String> settings) {
            return settings(Output.of(settings));
        }

        /**
         * @param token The bearer token used to authorize the client.
         * 
         * @return builder
         * 
         */
        public Builder token(@Nullable Output<String> token) {
            $.token = token;
            return this;
        }

        /**
         * @param token The bearer token used to authorize the client.
         * 
         * @return builder
         * 
         */
        public Builder token(String token) {
            return token(Output.of(token));
        }

        /**
         * @param uid The UID of the contact point.
         * 
         * @return builder
         * 
         */
        public Builder uid(@Nullable Output<String> uid) {
            $.uid = uid;
            return this;
        }

        /**
         * @param uid The UID of the contact point.
         * 
         * @return builder
         * 
         */
        public Builder uid(String uid) {
            return uid(Output.of(uid));
        }

        public ContactPointWebexArgs build() {
            return $;
        }
    }

}
