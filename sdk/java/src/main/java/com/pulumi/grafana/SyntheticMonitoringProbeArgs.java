// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SyntheticMonitoringProbeArgs extends com.pulumi.resources.ResourceArgs {

    public static final SyntheticMonitoringProbeArgs Empty = new SyntheticMonitoringProbeArgs();

    /**
     * Custom labels to be included with collected metrics and logs.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Custom labels to be included with collected metrics and logs.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Latitude coordinates.
     * 
     */
    @Import(name="latitude", required=true)
    private Output<Double> latitude;

    /**
     * @return Latitude coordinates.
     * 
     */
    public Output<Double> latitude() {
        return this.latitude;
    }

    /**
     * Longitude coordinates.
     * 
     */
    @Import(name="longitude", required=true)
    private Output<Double> longitude;

    /**
     * @return Longitude coordinates.
     * 
     */
    public Output<Double> longitude() {
        return this.longitude;
    }

    /**
     * Name of the probe.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the probe.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Public probes are run by Grafana Labs and can be used by all users. Only Grafana Labs managed public probes will be set to `true`. Defaults to `false`.
     * 
     */
    @Import(name="public")
    private @Nullable Output<Boolean> public_;

    /**
     * @return Public probes are run by Grafana Labs and can be used by all users. Only Grafana Labs managed public probes will be set to `true`. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> public_() {
        return Optional.ofNullable(this.public_);
    }

    /**
     * Region of the probe.
     * 
     */
    @Import(name="region", required=true)
    private Output<String> region;

    /**
     * @return Region of the probe.
     * 
     */
    public Output<String> region() {
        return this.region;
    }

    private SyntheticMonitoringProbeArgs() {}

    private SyntheticMonitoringProbeArgs(SyntheticMonitoringProbeArgs $) {
        this.labels = $.labels;
        this.latitude = $.latitude;
        this.longitude = $.longitude;
        this.name = $.name;
        this.public_ = $.public_;
        this.region = $.region;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SyntheticMonitoringProbeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SyntheticMonitoringProbeArgs $;

        public Builder() {
            $ = new SyntheticMonitoringProbeArgs();
        }

        public Builder(SyntheticMonitoringProbeArgs defaults) {
            $ = new SyntheticMonitoringProbeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param labels Custom labels to be included with collected metrics and logs.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Custom labels to be included with collected metrics and logs.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param latitude Latitude coordinates.
         * 
         * @return builder
         * 
         */
        public Builder latitude(Output<Double> latitude) {
            $.latitude = latitude;
            return this;
        }

        /**
         * @param latitude Latitude coordinates.
         * 
         * @return builder
         * 
         */
        public Builder latitude(Double latitude) {
            return latitude(Output.of(latitude));
        }

        /**
         * @param longitude Longitude coordinates.
         * 
         * @return builder
         * 
         */
        public Builder longitude(Output<Double> longitude) {
            $.longitude = longitude;
            return this;
        }

        /**
         * @param longitude Longitude coordinates.
         * 
         * @return builder
         * 
         */
        public Builder longitude(Double longitude) {
            return longitude(Output.of(longitude));
        }

        /**
         * @param name Name of the probe.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the probe.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param public_ Public probes are run by Grafana Labs and can be used by all users. Only Grafana Labs managed public probes will be set to `true`. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder public_(@Nullable Output<Boolean> public_) {
            $.public_ = public_;
            return this;
        }

        /**
         * @param public_ Public probes are run by Grafana Labs and can be used by all users. Only Grafana Labs managed public probes will be set to `true`. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder public_(Boolean public_) {
            return public_(Output.of(public_));
        }

        /**
         * @param region Region of the probe.
         * 
         * @return builder
         * 
         */
        public Builder region(Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Region of the probe.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        public SyntheticMonitoringProbeArgs build() {
            $.latitude = Objects.requireNonNull($.latitude, "expected parameter 'latitude' to be non-null");
            $.longitude = Objects.requireNonNull($.longitude, "expected parameter 'longitude' to be non-null");
            $.region = Objects.requireNonNull($.region, "expected parameter 'region' to be non-null");
            return $;
        }
    }

}
