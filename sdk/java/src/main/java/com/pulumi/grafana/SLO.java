// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.grafana.SLOArgs;
import com.pulumi.grafana.Utilities;
import com.pulumi.grafana.inputs.SLOState;
import com.pulumi.grafana.outputs.SLOAlerting;
import com.pulumi.grafana.outputs.SLOLabel;
import com.pulumi.grafana.outputs.SLOObjective;
import com.pulumi.grafana.outputs.SLOQuery;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Resource manages Grafana SLOs.
 * 
 * * [Official documentation](https://grafana.com/docs/grafana-cloud/slo/)
 * * [API documentation](https://grafana.com/docs/grafana-cloud/slo/api/)
 * 
 * ## Example Usage
 * 
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.grafana.SLO;
 * import com.pulumi.grafana.SLOArgs;
 * import com.pulumi.grafana.inputs.SLOAlertingArgs;
 * import com.pulumi.grafana.inputs.SLOLabelArgs;
 * import com.pulumi.grafana.inputs.SLOObjectiveArgs;
 * import com.pulumi.grafana.inputs.SLOQueryArgs;
 * import com.pulumi.grafana.inputs.SLOQueryFreeformArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var test = new SLO(&#34;test&#34;, SLOArgs.builder()        
 *             .alertings(SLOAlertingArgs.builder()
 *                 .fastburns(SLOAlertingFastburnArgs.builder()
 *                     .annotation(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
 *                     .label(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
 *                     .build())
 *                 .slowburns(SLOAlertingSlowburnArgs.builder()
 *                     .annotation(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
 *                     .label(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
 *                     .build())
 *                 .build())
 *             .description(&#34;Terraform Description&#34;)
 *             .labels(SLOLabelArgs.builder()
 *                 .key(&#34;custom&#34;)
 *                 .value(&#34;value&#34;)
 *                 .build())
 *             .objectives(SLOObjectiveArgs.builder()
 *                 .value(0.995)
 *                 .window(&#34;30d&#34;)
 *                 .build())
 *             .queries(SLOQueryArgs.builder()
 *                 .freeform(SLOQueryFreeformArgs.builder()
 *                     .query(&#34;sum(rate(apiserver_request_total{code!=\&#34;500\&#34;}[$__rate_interval])) / sum(rate(apiserver_request_total[$__rate_interval]))&#34;)
 *                     .build())
 *                 .type(&#34;freeform&#34;)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 */
@ResourceType(type="grafana:index/sLO:SLO")
public class SLO extends com.pulumi.resources.CustomResource {
    /**
     * Configures the alerting rules that will be generated for each
     * 			time window associated with the SLO. Grafana SLOs can generate
     * 			alerts when the short-term error budget burn is very high, the
     * 			long-term error budget burn rate is high, or when the remaining
     * 			error budget is below a certain threshold.
     * 
     */
    @Export(name="alertings", refs={List.class,SLOAlerting.class}, tree="[0,1]")
    private Output</* @Nullable */ List<SLOAlerting>> alertings;

    /**
     * @return Configures the alerting rules that will be generated for each
     * 			time window associated with the SLO. Grafana SLOs can generate
     * 			alerts when the short-term error budget burn is very high, the
     * 			long-term error budget burn rate is high, or when the remaining
     * 			error budget is below a certain threshold.
     * 
     */
    public Output<Optional<List<SLOAlerting>>> alertings() {
        return Codegen.optional(this.alertings);
    }
    /**
     * A reference to a dashboard that the plugin has installed in Grafana based on this SLO. This field is read-only, it is generated by the Grafana SLO Plugin.
     * 
     */
    @Export(name="dashboardUid", refs={String.class}, tree="[0]")
    private Output<String> dashboardUid;

    /**
     * @return A reference to a dashboard that the plugin has installed in Grafana based on this SLO. This field is read-only, it is generated by the Grafana SLO Plugin.
     * 
     */
    public Output<String> dashboardUid() {
        return this.dashboardUid;
    }
    /**
     * Description is a free-text field that can provide more context to an SLO.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output<String> description;

    /**
     * @return Description is a free-text field that can provide more context to an SLO.
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * Additional labels that will be attached to all metrics generated from the query. These labels are useful for grouping SLOs in dashboard views that you create by hand.
     * 
     */
    @Export(name="labels", refs={List.class,SLOLabel.class}, tree="[0,1]")
    private Output</* @Nullable */ List<SLOLabel>> labels;

    /**
     * @return Additional labels that will be attached to all metrics generated from the query. These labels are useful for grouping SLOs in dashboard views that you create by hand.
     * 
     */
    public Output<Optional<List<SLOLabel>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * Name should be a short description of your indicator. Consider names like &#34;API Availability&#34;
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name should be a short description of your indicator. Consider names like &#34;API Availability&#34;
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Over each rolling time window, the remaining error budget will be calculated, and separate alerts can be generated for each time window based on the SLO burn rate or remaining error budget.
     * 
     */
    @Export(name="objectives", refs={List.class,SLOObjective.class}, tree="[0,1]")
    private Output<List<SLOObjective>> objectives;

    /**
     * @return Over each rolling time window, the remaining error budget will be calculated, and separate alerts can be generated for each time window based on the SLO burn rate or remaining error budget.
     * 
     */
    public Output<List<SLOObjective>> objectives() {
        return this.objectives;
    }
    /**
     * Query describes the indicator that will be measured against the objective. Freeform Query types are currently supported.
     * 
     */
    @Export(name="queries", refs={List.class,SLOQuery.class}, tree="[0,1]")
    private Output<List<SLOQuery>> queries;

    /**
     * @return Query describes the indicator that will be measured against the objective. Freeform Query types are currently supported.
     * 
     */
    public Output<List<SLOQuery>> queries() {
        return this.queries;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public SLO(String name) {
        this(name, SLOArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public SLO(String name, SLOArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public SLO(String name, SLOArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("grafana:index/sLO:SLO", name, args == null ? SLOArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private SLO(String name, Output<String> id, @Nullable SLOState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("grafana:index/sLO:SLO", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static SLO get(String name, Output<String> id, @Nullable SLOState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new SLO(name, id, state, options);
    }
}
