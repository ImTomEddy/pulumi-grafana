// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.grafana.inputs.SLOQueryFreeformArgs;
import com.pulumi.grafana.inputs.SLOQueryRatioArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SLOQueryArgs extends com.pulumi.resources.ResourceArgs {

    public static final SLOQueryArgs Empty = new SLOQueryArgs();

    @Import(name="freeform")
    private @Nullable Output<SLOQueryFreeformArgs> freeform;

    public Optional<Output<SLOQueryFreeformArgs>> freeform() {
        return Optional.ofNullable(this.freeform);
    }

    @Import(name="ratio")
    private @Nullable Output<SLOQueryRatioArgs> ratio;

    public Optional<Output<SLOQueryRatioArgs>> ratio() {
        return Optional.ofNullable(this.ratio);
    }

    /**
     * Query type must be one of: &#34;freeform&#34;, &#34;query&#34;, &#34;ratio&#34;, or &#34;threshold&#34;
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Query type must be one of: &#34;freeform&#34;, &#34;query&#34;, &#34;ratio&#34;, or &#34;threshold&#34;
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private SLOQueryArgs() {}

    private SLOQueryArgs(SLOQueryArgs $) {
        this.freeform = $.freeform;
        this.ratio = $.ratio;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SLOQueryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SLOQueryArgs $;

        public Builder() {
            $ = new SLOQueryArgs();
        }

        public Builder(SLOQueryArgs defaults) {
            $ = new SLOQueryArgs(Objects.requireNonNull(defaults));
        }

        public Builder freeform(@Nullable Output<SLOQueryFreeformArgs> freeform) {
            $.freeform = freeform;
            return this;
        }

        public Builder freeform(SLOQueryFreeformArgs freeform) {
            return freeform(Output.of(freeform));
        }

        public Builder ratio(@Nullable Output<SLOQueryRatioArgs> ratio) {
            $.ratio = ratio;
            return this;
        }

        public Builder ratio(SLOQueryRatioArgs ratio) {
            return ratio(Output.of(ratio));
        }

        /**
         * @param type Query type must be one of: &#34;freeform&#34;, &#34;query&#34;, &#34;ratio&#34;, or &#34;threshold&#34;
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Query type must be one of: &#34;freeform&#34;, &#34;query&#34;, &#34;ratio&#34;, or &#34;threshold&#34;
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public SLOQueryArgs build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
