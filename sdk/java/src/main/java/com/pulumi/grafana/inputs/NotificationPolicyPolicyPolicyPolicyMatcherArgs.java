// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class NotificationPolicyPolicyPolicyPolicyMatcherArgs extends com.pulumi.resources.ResourceArgs {

    public static final NotificationPolicyPolicyPolicyPolicyMatcherArgs Empty = new NotificationPolicyPolicyPolicyPolicyMatcherArgs();

    /**
     * The name of the label to match against.
     * 
     */
    @Import(name="label", required=true)
    private Output<String> label;

    /**
     * @return The name of the label to match against.
     * 
     */
    public Output<String> label() {
        return this.label;
    }

    /**
     * The operator to apply when matching values of the given label. Allowed operators are `=` for equality, `!=` for negated equality, `=~` for regex equality, and `!~` for negated regex equality.
     * 
     */
    @Import(name="match", required=true)
    private Output<String> match;

    /**
     * @return The operator to apply when matching values of the given label. Allowed operators are `=` for equality, `!=` for negated equality, `=~` for regex equality, and `!~` for negated regex equality.
     * 
     */
    public Output<String> match() {
        return this.match;
    }

    /**
     * The label value to match against.
     * 
     */
    @Import(name="value", required=true)
    private Output<String> value;

    /**
     * @return The label value to match against.
     * 
     */
    public Output<String> value() {
        return this.value;
    }

    private NotificationPolicyPolicyPolicyPolicyMatcherArgs() {}

    private NotificationPolicyPolicyPolicyPolicyMatcherArgs(NotificationPolicyPolicyPolicyPolicyMatcherArgs $) {
        this.label = $.label;
        this.match = $.match;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NotificationPolicyPolicyPolicyPolicyMatcherArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NotificationPolicyPolicyPolicyPolicyMatcherArgs $;

        public Builder() {
            $ = new NotificationPolicyPolicyPolicyPolicyMatcherArgs();
        }

        public Builder(NotificationPolicyPolicyPolicyPolicyMatcherArgs defaults) {
            $ = new NotificationPolicyPolicyPolicyPolicyMatcherArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param label The name of the label to match against.
         * 
         * @return builder
         * 
         */
        public Builder label(Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label The name of the label to match against.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param match The operator to apply when matching values of the given label. Allowed operators are `=` for equality, `!=` for negated equality, `=~` for regex equality, and `!~` for negated regex equality.
         * 
         * @return builder
         * 
         */
        public Builder match(Output<String> match) {
            $.match = match;
            return this;
        }

        /**
         * @param match The operator to apply when matching values of the given label. Allowed operators are `=` for equality, `!=` for negated equality, `=~` for regex equality, and `!~` for negated regex equality.
         * 
         * @return builder
         * 
         */
        public Builder match(String match) {
            return match(Output.of(match));
        }

        /**
         * @param value The label value to match against.
         * 
         * @return builder
         * 
         */
        public Builder value(Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value The label value to match against.
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        public NotificationPolicyPolicyPolicyPolicyMatcherArgs build() {
            $.label = Objects.requireNonNull($.label, "expected parameter 'label' to be non-null");
            $.match = Objects.requireNonNull($.match, "expected parameter 'match' to be non-null");
            $.value = Objects.requireNonNull($.value, "expected parameter 'value' to be non-null");
            return $;
        }
    }

}
