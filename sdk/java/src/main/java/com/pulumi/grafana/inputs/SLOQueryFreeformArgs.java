// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SLOQueryFreeformArgs extends com.pulumi.resources.ResourceArgs {

    public static final SLOQueryFreeformArgs Empty = new SLOQueryFreeformArgs();

    /**
     * Query describes the indicator that will be measured against the objective. Freeform Query types are currently supported.
     * 
     */
    @Import(name="query")
    private @Nullable Output<String> query;

    /**
     * @return Query describes the indicator that will be measured against the objective. Freeform Query types are currently supported.
     * 
     */
    public Optional<Output<String>> query() {
        return Optional.ofNullable(this.query);
    }

    private SLOQueryFreeformArgs() {}

    private SLOQueryFreeformArgs(SLOQueryFreeformArgs $) {
        this.query = $.query;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SLOQueryFreeformArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SLOQueryFreeformArgs $;

        public Builder() {
            $ = new SLOQueryFreeformArgs();
        }

        public Builder(SLOQueryFreeformArgs defaults) {
            $ = new SLOQueryFreeformArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param query Query describes the indicator that will be measured against the objective. Freeform Query types are currently supported.
         * 
         * @return builder
         * 
         */
        public Builder query(@Nullable Output<String> query) {
            $.query = query;
            return this;
        }

        /**
         * @param query Query describes the indicator that will be measured against the objective. Freeform Query types are currently supported.
         * 
         * @return builder
         * 
         */
        public Builder query(String query) {
            return query(Output.of(query));
        }

        public SLOQueryFreeformArgs build() {
            return $;
        }
    }

}
