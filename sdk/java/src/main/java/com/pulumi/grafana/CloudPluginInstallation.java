// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.grafana.CloudPluginInstallationArgs;
import com.pulumi.grafana.Utilities;
import com.pulumi.grafana.inputs.CloudPluginInstallationState;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Manages Grafana Cloud Plugin Installations.
 * 
 * * [Plugin Catalog](https://grafana.com/grafana/plugins/)
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.grafana.CloudPluginInstallation;
 * import com.pulumi.grafana.CloudPluginInstallationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var test = new CloudPluginInstallation(&#34;test&#34;, CloudPluginInstallationArgs.builder()        
 *             .slug(&#34;some-plugin&#34;)
 *             .stackSlug(&#34;stackname&#34;)
 *             .version(&#34;1.2.3&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * ```sh
 *  $ pulumi import grafana:index/cloudPluginInstallation:CloudPluginInstallation plugin_name {{stack_slug}}_{{plugin_slug}}
 * ```
 * 
 */
@ResourceType(type="grafana:index/cloudPluginInstallation:CloudPluginInstallation")
public class CloudPluginInstallation extends com.pulumi.resources.CustomResource {
    /**
     * Slug of the plugin to be installed.
     * 
     */
    @Export(name="slug", refs={String.class}, tree="[0]")
    private Output<String> slug;

    /**
     * @return Slug of the plugin to be installed.
     * 
     */
    public Output<String> slug() {
        return this.slug;
    }
    /**
     * The stack id to which the plugin should be installed.
     * 
     */
    @Export(name="stackSlug", refs={String.class}, tree="[0]")
    private Output<String> stackSlug;

    /**
     * @return The stack id to which the plugin should be installed.
     * 
     */
    public Output<String> stackSlug() {
        return this.stackSlug;
    }
    /**
     * Version of the plugin to be installed.
     * 
     */
    @Export(name="version", refs={String.class}, tree="[0]")
    private Output<String> version;

    /**
     * @return Version of the plugin to be installed.
     * 
     */
    public Output<String> version() {
        return this.version;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public CloudPluginInstallation(String name) {
        this(name, CloudPluginInstallationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public CloudPluginInstallation(String name, CloudPluginInstallationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public CloudPluginInstallation(String name, CloudPluginInstallationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("grafana:index/cloudPluginInstallation:CloudPluginInstallation", name, args == null ? CloudPluginInstallationArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private CloudPluginInstallation(String name, Output<String> id, @Nullable CloudPluginInstallationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("grafana:index/cloudPluginInstallation:CloudPluginInstallation", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static CloudPluginInstallation get(String name, Output<String> id, @Nullable CloudPluginInstallationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new CloudPluginInstallation(name, id, state, options);
    }
}
