// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.grafana.SyntheticMonitoringCheckArgs;
import com.pulumi.grafana.Utilities;
import com.pulumi.grafana.inputs.SyntheticMonitoringCheckState;
import com.pulumi.grafana.outputs.SyntheticMonitoringCheckSettings;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Synthetic Monitoring checks are tests that run on selected probes at defined
 * intervals and report metrics and logs back to your Grafana Cloud account. The
 * target for checks can be a domain name, a server, or a website, depending on
 * what information you would like to gather about your endpoint. You can define
 * multiple checks for a single endpoint to check different capabilities.
 * 
 * * [Official documentation](https://grafana.com/docs/grafana-cloud/synthetic-monitoring/checks/)
 * 
 * ## Example Usage
 * ### DNS Basic
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.grafana.GrafanaFunctions;
 * import com.pulumi.grafana.inputs.GetSyntheticMonitoringProbesArgs;
 * import com.pulumi.grafana.SyntheticMonitoringCheck;
 * import com.pulumi.grafana.SyntheticMonitoringCheckArgs;
 * import com.pulumi.grafana.inputs.SyntheticMonitoringCheckSettingsArgs;
 * import com.pulumi.grafana.inputs.SyntheticMonitoringCheckSettingsDnsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var main = GrafanaFunctions.getSyntheticMonitoringProbes();
 * 
 *         var dns = new SyntheticMonitoringCheck(&#34;dns&#34;, SyntheticMonitoringCheckArgs.builder()        
 *             .job(&#34;DNS Defaults&#34;)
 *             .target(&#34;grafana.com&#34;)
 *             .enabled(false)
 *             .probes(main.applyValue(getSyntheticMonitoringProbesResult -&gt; getSyntheticMonitoringProbesResult.probes().Atlanta()))
 *             .labels(Map.of(&#34;foo&#34;, &#34;bar&#34;))
 *             .settings(SyntheticMonitoringCheckSettingsArgs.builder()
 *                 .dns()
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### DNS Complex
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.grafana.GrafanaFunctions;
 * import com.pulumi.grafana.inputs.GetSyntheticMonitoringProbesArgs;
 * import com.pulumi.grafana.SyntheticMonitoringCheck;
 * import com.pulumi.grafana.SyntheticMonitoringCheckArgs;
 * import com.pulumi.grafana.inputs.SyntheticMonitoringCheckSettingsArgs;
 * import com.pulumi.grafana.inputs.SyntheticMonitoringCheckSettingsDnsArgs;
 * import com.pulumi.grafana.inputs.SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsArgs;
 * import com.pulumi.grafana.inputs.SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var main = GrafanaFunctions.getSyntheticMonitoringProbes();
 * 
 *         var dns = new SyntheticMonitoringCheck(&#34;dns&#34;, SyntheticMonitoringCheckArgs.builder()        
 *             .job(&#34;DNS Updated&#34;)
 *             .target(&#34;grafana.net&#34;)
 *             .enabled(false)
 *             .probes(            
 *                 main.applyValue(getSyntheticMonitoringProbesResult -&gt; getSyntheticMonitoringProbesResult.probes().Frankfurt()),
 *                 main.applyValue(getSyntheticMonitoringProbesResult -&gt; getSyntheticMonitoringProbesResult.probes().London()))
 *             .labels(Map.of(&#34;foo&#34;, &#34;baz&#34;))
 *             .settings(SyntheticMonitoringCheckSettingsArgs.builder()
 *                 .dns(SyntheticMonitoringCheckSettingsDnsArgs.builder()
 *                     .ipVersion(&#34;Any&#34;)
 *                     .server(&#34;8.8.4.4&#34;)
 *                     .port(8600)
 *                     .recordType(&#34;CNAME&#34;)
 *                     .protocol(&#34;TCP&#34;)
 *                     .validRCodes(                    
 *                         &#34;NOERROR&#34;,
 *                         &#34;NOTAUTH&#34;)
 *                     .validateAnswerRrs(SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsArgs.builder()
 *                         .failIfMatchesRegexps(&#34;.+-bad-stuff*&#34;)
 *                         .failIfNotMatchesRegexps(&#34;.+-good-stuff*&#34;)
 *                         .build())
 *                     .validateAuthorityRrs(SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsArgs.builder()
 *                         .failIfMatchesRegexps(&#34;.+-bad-stuff*&#34;)
 *                         .failIfNotMatchesRegexps(&#34;.+-good-stuff*&#34;)
 *                         .build())
 *                     .validateAdditionalRrs(SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArgs.builder()
 *                         .failIfMatchesRegexps(&#34;.+-bad-stuff*&#34;)
 *                         .failIfNotMatchesRegexps(&#34;.+-good-stuff*&#34;)
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### HTTP Basic
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.grafana.GrafanaFunctions;
 * import com.pulumi.grafana.inputs.GetSyntheticMonitoringProbesArgs;
 * import com.pulumi.grafana.SyntheticMonitoringCheck;
 * import com.pulumi.grafana.SyntheticMonitoringCheckArgs;
 * import com.pulumi.grafana.inputs.SyntheticMonitoringCheckSettingsArgs;
 * import com.pulumi.grafana.inputs.SyntheticMonitoringCheckSettingsHttpArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var main = GrafanaFunctions.getSyntheticMonitoringProbes();
 * 
 *         var http = new SyntheticMonitoringCheck(&#34;http&#34;, SyntheticMonitoringCheckArgs.builder()        
 *             .job(&#34;HTTP Defaults&#34;)
 *             .target(&#34;https://grafana.com&#34;)
 *             .enabled(false)
 *             .probes(main.applyValue(getSyntheticMonitoringProbesResult -&gt; getSyntheticMonitoringProbesResult.probes().Atlanta()))
 *             .labels(Map.of(&#34;foo&#34;, &#34;bar&#34;))
 *             .settings(SyntheticMonitoringCheckSettingsArgs.builder()
 *                 .http()
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### HTTP Complex
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.grafana.GrafanaFunctions;
 * import com.pulumi.grafana.inputs.GetSyntheticMonitoringProbesArgs;
 * import com.pulumi.grafana.SyntheticMonitoringCheck;
 * import com.pulumi.grafana.SyntheticMonitoringCheckArgs;
 * import com.pulumi.grafana.inputs.SyntheticMonitoringCheckSettingsArgs;
 * import com.pulumi.grafana.inputs.SyntheticMonitoringCheckSettingsHttpArgs;
 * import com.pulumi.grafana.inputs.SyntheticMonitoringCheckSettingsHttpTlsConfigArgs;
 * import com.pulumi.grafana.inputs.SyntheticMonitoringCheckSettingsHttpBasicAuthArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var main = GrafanaFunctions.getSyntheticMonitoringProbes();
 * 
 *         var http = new SyntheticMonitoringCheck(&#34;http&#34;, SyntheticMonitoringCheckArgs.builder()        
 *             .job(&#34;HTTP Defaults&#34;)
 *             .target(&#34;https://grafana.org&#34;)
 *             .enabled(false)
 *             .probes(            
 *                 main.applyValue(getSyntheticMonitoringProbesResult -&gt; getSyntheticMonitoringProbesResult.probes().Bangalore()),
 *                 main.applyValue(getSyntheticMonitoringProbesResult -&gt; getSyntheticMonitoringProbesResult.probes().Mumbai()))
 *             .labels(Map.of(&#34;foo&#34;, &#34;bar&#34;))
 *             .settings(SyntheticMonitoringCheckSettingsArgs.builder()
 *                 .http(SyntheticMonitoringCheckSettingsHttpArgs.builder()
 *                     .ipVersion(&#34;V6&#34;)
 *                     .method(&#34;TRACE&#34;)
 *                     .body(&#34;and spirit&#34;)
 *                     .noFollowRedirects(true)
 *                     .bearerToken(&#34;asdfjkl;&#34;)
 *                     .proxyUrl(&#34;https://almost-there&#34;)
 *                     .failIfSsl(true)
 *                     .failIfNotSsl(true)
 *                     .cacheBustingQueryParamName(&#34;pineapple&#34;)
 *                     .tlsConfig(SyntheticMonitoringCheckSettingsHttpTlsConfigArgs.builder()
 *                         .serverName(&#34;grafana.org&#34;)
 *                         .clientCert(&#34;&#34;&#34;
 * -----BEGIN CERTIFICATE-----
 * MIIEljCCAn4CCQCKJPUQQxeO0zANBgkqhkiG9w0BAQsFADANMQswCQYDVQQGEwJT
 * RTAeFw0yMTA1MjkxOTIyNTdaFw0yNDAzMTgxOTIyNTdaMA0xCzAJBgNVBAYTAlNF
 * MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAnmbazDNUT0rSI4BpGZK+
 * 0AJ+9FDkIYWJUtRLJoxw8CF+AobMFploYA2L2Myt80cTA1w8FrewjC8qlqdnrPWr
 * h1ely2zsUljgi1/niH0ndjFzliL7UkinXQiAsTtYOrOQmzyd/o5PNdu7dz0m7stD
 * BN/Sz5TlXZnA1/eJbqV/kqMau6b1MaBx8SbRfUG9+cSmUobFJwuktDrPuwJhcEkl
 * iDmhEqu1GuZzmKvzPacLTVia1vSlmCTCu89NiHI8iGiiLtqNrapup7f8j5m3a3SL
 * a+vXhplFj2piNl7Nc0dfuVgtEliTI+qUL2/+4A7gzRWZpHy21/LxMMXmBhdJW9En
 * FWkev97VZLgb5TR3+qpSWmXcodjPy4dibvwsOMpdd+Q4AYulwvlDw5idRPVgGvk7
 * qq03+w9ppZ5Fugws9k2CD9F/75JX2mCbRpkuPe8XXZ7bqrMaQgQMLOrs68HuiiCk
 * FTklglq4DMKxnf/Y/T/MgIa9Q1o28YSevh6A7FnfPGARj2H2T4rToi+bC1Vf7qNB
 * Z18bDpz99tRUTbyiRUSBMWLCGhU6c4HAqUrfrkpperOKFBQ3i38a79838oFdXHBW
 * 6rx1t5cC3XwtEoUyeBKAygez8G1LDXbN3607MxVhAjhHKtPkYvuBfysSNU6JrR0z
 * UV1IURJANt2UMuKgSEkG/IMCAwEAATANBgkqhkiG9w0BAQsFAAOCAgEAcipMhp/w
 * yzfPy61faVAw9SPaMNRlnW9FCDC3N9CGOjo2knjXpObPzyzsJiUURTjrA9eFMpRA
 * e2Rgn2j+nvm2XdLAlC4Kh8jqv/wCL0X6BTQMdN5aOhXdSiXtpXOMvXYY/dQ4ebRZ
 * XeRCVWQD79JbV6/uyx0nCV3FVcU7L1P4UjxroefVr0soLPMirgxHmOxLnkoVgdcB
 * tqufP5kJx9CIeJXPx3QQsk1XfEtxtUvuw4ZaZkQnNUqvGl7V+AZpur5Eqfv3zBi8
 * QxxL7qGkARNssNWH2Ju+tqpM/UZRnjlFrDR4SXUgT0coTduBalUY6qHkciHmRpiP
 * tf3SgpDeiCSOV2iVFGdaR1mz3muWoAYWFstcWN3a3HjjVugIi23yLN8Gv8CNeoH4
 * prulinFCLrFgAh8SLAF8mOAZanT06LH8jOIFYrdUxH+ZeRBR0rLoFjUF+JB7UKD9
 * 5TA+B4EBzQ1tMbGFU1DX79MjAejq0IV0Nzq+GMfBvLHxEf4+Oz8nqhDXQcJ6TdtY
 * l3Lyw5zBvOL80SBK+Mr0UP7d9U3VXgbGHCYVJU6Ot1TwiGwahtWALRALA3TWeGkq
 * 7kyD1H+nm+9lfKhuyBRQnRGBVyze2lAp7oxwshJuhBwEXosXFxq1Cy6QhPN77r6N
 * vuhxvtppolNnyOgGxwG4zquqq2V5/+vKjKY=
 * -----END CERTIFICATE-----
 *                         &#34;&#34;&#34;)
 *                         .build())
 *                     .headers(&#34;Content-Type: multipart/form-data; boundary=something&#34;)
 *                     .basicAuth(SyntheticMonitoringCheckSettingsHttpBasicAuthArgs.builder()
 *                         .username(&#34;open&#34;)
 *                         .password(&#34;sesame&#34;)
 *                         .build())
 *                     .validStatusCodes(                    
 *                         200,
 *                         201)
 *                     .validHttpVersions(                    
 *                         &#34;HTTP/1.0&#34;,
 *                         &#34;HTTP/1.1&#34;,
 *                         &#34;HTTP/2&#34;)
 *                     .failIfBodyMatchesRegexps(&#34;*bad stuff*&#34;)
 *                     .failIfBodyNotMatchesRegexps(&#34;*good stuff*&#34;)
 *                     .failIfHeaderMatchesRegexps(SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArgs.builder()
 *                         .header(&#34;Content-Type&#34;)
 *                         .regexp(&#34;application/soap*&#34;)
 *                         .allowMissing(true)
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Ping Basic
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.grafana.GrafanaFunctions;
 * import com.pulumi.grafana.inputs.GetSyntheticMonitoringProbesArgs;
 * import com.pulumi.grafana.SyntheticMonitoringCheck;
 * import com.pulumi.grafana.SyntheticMonitoringCheckArgs;
 * import com.pulumi.grafana.inputs.SyntheticMonitoringCheckSettingsArgs;
 * import com.pulumi.grafana.inputs.SyntheticMonitoringCheckSettingsPingArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var main = GrafanaFunctions.getSyntheticMonitoringProbes();
 * 
 *         var ping = new SyntheticMonitoringCheck(&#34;ping&#34;, SyntheticMonitoringCheckArgs.builder()        
 *             .job(&#34;Ping Defaults&#34;)
 *             .target(&#34;grafana.com&#34;)
 *             .enabled(false)
 *             .probes(main.applyValue(getSyntheticMonitoringProbesResult -&gt; getSyntheticMonitoringProbesResult.probes().Atlanta()))
 *             .labels(Map.of(&#34;foo&#34;, &#34;bar&#34;))
 *             .settings(SyntheticMonitoringCheckSettingsArgs.builder()
 *                 .ping()
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Ping Complex
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.grafana.GrafanaFunctions;
 * import com.pulumi.grafana.inputs.GetSyntheticMonitoringProbesArgs;
 * import com.pulumi.grafana.SyntheticMonitoringCheck;
 * import com.pulumi.grafana.SyntheticMonitoringCheckArgs;
 * import com.pulumi.grafana.inputs.SyntheticMonitoringCheckSettingsArgs;
 * import com.pulumi.grafana.inputs.SyntheticMonitoringCheckSettingsPingArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var main = GrafanaFunctions.getSyntheticMonitoringProbes();
 * 
 *         var ping = new SyntheticMonitoringCheck(&#34;ping&#34;, SyntheticMonitoringCheckArgs.builder()        
 *             .job(&#34;Ping Updated&#34;)
 *             .target(&#34;grafana.net&#34;)
 *             .enabled(false)
 *             .probes(            
 *                 main.applyValue(getSyntheticMonitoringProbesResult -&gt; getSyntheticMonitoringProbesResult.probes().Frankfurt()),
 *                 main.applyValue(getSyntheticMonitoringProbesResult -&gt; getSyntheticMonitoringProbesResult.probes().London()))
 *             .labels(Map.of(&#34;foo&#34;, &#34;baz&#34;))
 *             .settings(SyntheticMonitoringCheckSettingsArgs.builder()
 *                 .ping(SyntheticMonitoringCheckSettingsPingArgs.builder()
 *                     .ipVersion(&#34;Any&#34;)
 *                     .payloadSize(20)
 *                     .dontFragment(true)
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### TCP Basic
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.grafana.GrafanaFunctions;
 * import com.pulumi.grafana.inputs.GetSyntheticMonitoringProbesArgs;
 * import com.pulumi.grafana.SyntheticMonitoringCheck;
 * import com.pulumi.grafana.SyntheticMonitoringCheckArgs;
 * import com.pulumi.grafana.inputs.SyntheticMonitoringCheckSettingsArgs;
 * import com.pulumi.grafana.inputs.SyntheticMonitoringCheckSettingsTcpArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var main = GrafanaFunctions.getSyntheticMonitoringProbes();
 * 
 *         var tcp = new SyntheticMonitoringCheck(&#34;tcp&#34;, SyntheticMonitoringCheckArgs.builder()        
 *             .job(&#34;TCP Defaults&#34;)
 *             .target(&#34;grafana.com:80&#34;)
 *             .enabled(false)
 *             .probes(main.applyValue(getSyntheticMonitoringProbesResult -&gt; getSyntheticMonitoringProbesResult.probes().Atlanta()))
 *             .labels(Map.of(&#34;foo&#34;, &#34;bar&#34;))
 *             .settings(SyntheticMonitoringCheckSettingsArgs.builder()
 *                 .tcp()
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### TCP Complex
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.grafana.GrafanaFunctions;
 * import com.pulumi.grafana.inputs.GetSyntheticMonitoringProbesArgs;
 * import com.pulumi.grafana.SyntheticMonitoringCheck;
 * import com.pulumi.grafana.SyntheticMonitoringCheckArgs;
 * import com.pulumi.grafana.inputs.SyntheticMonitoringCheckSettingsArgs;
 * import com.pulumi.grafana.inputs.SyntheticMonitoringCheckSettingsTcpArgs;
 * import com.pulumi.grafana.inputs.SyntheticMonitoringCheckSettingsTcpTlsConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var main = GrafanaFunctions.getSyntheticMonitoringProbes();
 * 
 *         var tcp = new SyntheticMonitoringCheck(&#34;tcp&#34;, SyntheticMonitoringCheckArgs.builder()        
 *             .job(&#34;TCP Defaults&#34;)
 *             .target(&#34;grafana.com:443&#34;)
 *             .enabled(false)
 *             .probes(            
 *                 main.applyValue(getSyntheticMonitoringProbesResult -&gt; getSyntheticMonitoringProbesResult.probes().Frankfurt()),
 *                 main.applyValue(getSyntheticMonitoringProbesResult -&gt; getSyntheticMonitoringProbesResult.probes().London()))
 *             .labels(Map.of(&#34;foo&#34;, &#34;baz&#34;))
 *             .settings(SyntheticMonitoringCheckSettingsArgs.builder()
 *                 .tcp(SyntheticMonitoringCheckSettingsTcpArgs.builder()
 *                     .ipVersion(&#34;V6&#34;)
 *                     .tls(true)
 *                     .queryResponses(                    
 *                         SyntheticMonitoringCheckSettingsTcpQueryResponseArgs.builder()
 *                             .send(&#34;howdy&#34;)
 *                             .expect(&#34;hi&#34;)
 *                             .build(),
 *                         SyntheticMonitoringCheckSettingsTcpQueryResponseArgs.builder()
 *                             .send(&#34;like this&#34;)
 *                             .expect(&#34;like that&#34;)
 *                             .startTls(true)
 *                             .build())
 *                     .tlsConfig(SyntheticMonitoringCheckSettingsTcpTlsConfigArgs.builder()
 *                         .serverName(&#34;grafana.com&#34;)
 *                         .caCert(&#34;&#34;&#34;
 * -----BEGIN CERTIFICATE-----
 * MIIEljCCAn4CCQCKJPUQQxeO0zANBgkqhkiG9w0BAQsFADANMQswCQYDVQQGEwJT
 * RTAeFw0yMTA1MjkxOTIyNTdaFw0yNDAzMTgxOTIyNTdaMA0xCzAJBgNVBAYTAlNF
 * MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAnmbazDNUT0rSI4BpGZK+
 * 0AJ+9FDkIYWJUtRLJoxw8CF+AobMFploYA2L2Myt80cTA1w8FrewjC8qlqdnrPWr
 * h1ely2zsUljgi1/niH0ndjFzliL7UkinXQiAsTtYOrOQmzyd/o5PNdu7dz0m7stD
 * BN/Sz5TlXZnA1/eJbqV/kqMau6b1MaBx8SbRfUG9+cSmUobFJwuktDrPuwJhcEkl
 * iDmhEqu1GuZzmKvzPacLTVia1vSlmCTCu89NiHI8iGiiLtqNrapup7f8j5m3a3SL
 * a+vXhplFj2piNl7Nc0dfuVgtEliTI+qUL2/+4A7gzRWZpHy21/LxMMXmBhdJW9En
 * FWkev97VZLgb5TR3+qpSWmXcodjPy4dibvwsOMpdd+Q4AYulwvlDw5idRPVgGvk7
 * qq03+w9ppZ5Fugws9k2CD9F/75JX2mCbRpkuPe8XXZ7bqrMaQgQMLOrs68HuiiCk
 * FTklglq4DMKxnf/Y/T/MgIa9Q1o28YSevh6A7FnfPGARj2H2T4rToi+bC1Vf7qNB
 * Z18bDpz99tRUTbyiRUSBMWLCGhU6c4HAqUrfrkpperOKFBQ3i38a79838oFdXHBW
 * 6rx1t5cC3XwtEoUyeBKAygez8G1LDXbN3607MxVhAjhHKtPkYvuBfysSNU6JrR0z
 * UV1IURJANt2UMuKgSEkG/IMCAwEAATANBgkqhkiG9w0BAQsFAAOCAgEAcipMhp/w
 * yzfPy61faVAw9SPaMNRlnW9FCDC3N9CGOjo2knjXpObPzyzsJiUURTjrA9eFMpRA
 * e2Rgn2j+nvm2XdLAlC4Kh8jqv/wCL0X6BTQMdN5aOhXdSiXtpXOMvXYY/dQ4ebRZ
 * XeRCVWQD79JbV6/uyx0nCV3FVcU7L1P4UjxroefVr0soLPMirgxHmOxLnkoVgdcB
 * tqufP5kJx9CIeJXPx3QQsk1XfEtxtUvuw4ZaZkQnNUqvGl7V+AZpur5Eqfv3zBi8
 * QxxL7qGkARNssNWH2Ju+tqpM/UZRnjlFrDR4SXUgT0coTduBalUY6qHkciHmRpiP
 * tf3SgpDeiCSOV2iVFGdaR1mz3muWoAYWFstcWN3a3HjjVugIi23yLN8Gv8CNeoH4
 * prulinFCLrFgAh8SLAF8mOAZanT06LH8jOIFYrdUxH+ZeRBR0rLoFjUF+JB7UKD9
 * 5TA+B4EBzQ1tMbGFU1DX79MjAejq0IV0Nzq+GMfBvLHxEf4+Oz8nqhDXQcJ6TdtY
 * l3Lyw5zBvOL80SBK+Mr0UP7d9U3VXgbGHCYVJU6Ot1TwiGwahtWALRALA3TWeGkq
 * 7kyD1H+nm+9lfKhuyBRQnRGBVyze2lAp7oxwshJuhBwEXosXFxq1Cy6QhPN77r6N
 * vuhxvtppolNnyOgGxwG4zquqq2V5/+vKjKY=
 * -----END CERTIFICATE-----
 *                         &#34;&#34;&#34;)
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Traceroute Basic
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.grafana.GrafanaFunctions;
 * import com.pulumi.grafana.inputs.GetSyntheticMonitoringProbesArgs;
 * import com.pulumi.grafana.SyntheticMonitoringCheck;
 * import com.pulumi.grafana.SyntheticMonitoringCheckArgs;
 * import com.pulumi.grafana.inputs.SyntheticMonitoringCheckSettingsArgs;
 * import com.pulumi.grafana.inputs.SyntheticMonitoringCheckSettingsTracerouteArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var main = GrafanaFunctions.getSyntheticMonitoringProbes();
 * 
 *         var traceroute = new SyntheticMonitoringCheck(&#34;traceroute&#34;, SyntheticMonitoringCheckArgs.builder()        
 *             .job(&#34;Traceroute defaults&#34;)
 *             .target(&#34;grafana.com&#34;)
 *             .enabled(false)
 *             .frequency(120000)
 *             .timeout(30000)
 *             .probes(main.applyValue(getSyntheticMonitoringProbesResult -&gt; getSyntheticMonitoringProbesResult.probes().Atlanta()))
 *             .labels(Map.of(&#34;foo&#34;, &#34;bar&#34;))
 *             .settings(SyntheticMonitoringCheckSettingsArgs.builder()
 *                 .traceroute()
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Traceroute Complex
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.grafana.GrafanaFunctions;
 * import com.pulumi.grafana.inputs.GetSyntheticMonitoringProbesArgs;
 * import com.pulumi.grafana.SyntheticMonitoringCheck;
 * import com.pulumi.grafana.SyntheticMonitoringCheckArgs;
 * import com.pulumi.grafana.inputs.SyntheticMonitoringCheckSettingsArgs;
 * import com.pulumi.grafana.inputs.SyntheticMonitoringCheckSettingsTracerouteArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var main = GrafanaFunctions.getSyntheticMonitoringProbes();
 * 
 *         var traceroute = new SyntheticMonitoringCheck(&#34;traceroute&#34;, SyntheticMonitoringCheckArgs.builder()        
 *             .job(&#34;Traceroute complex&#34;)
 *             .target(&#34;grafana.net&#34;)
 *             .enabled(false)
 *             .frequency(120000)
 *             .timeout(30000)
 *             .probes(            
 *                 main.applyValue(getSyntheticMonitoringProbesResult -&gt; getSyntheticMonitoringProbesResult.probes().Frankfurt()),
 *                 main.applyValue(getSyntheticMonitoringProbesResult -&gt; getSyntheticMonitoringProbesResult.probes().London()))
 *             .labels(Map.of(&#34;foo&#34;, &#34;baz&#34;))
 *             .settings(SyntheticMonitoringCheckSettingsArgs.builder()
 *                 .traceroute(SyntheticMonitoringCheckSettingsTracerouteArgs.builder()
 *                     .maxHops(25)
 *                     .maxUnknownHops(10)
 *                     .ptrLookup(false)
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * ```sh
 *  $ pulumi import grafana:index/syntheticMonitoringCheck:SyntheticMonitoringCheck check {{check-id}}
 * ```
 * 
 */
@ResourceType(type="grafana:index/syntheticMonitoringCheck:SyntheticMonitoringCheck")
public class SyntheticMonitoringCheck extends com.pulumi.resources.CustomResource {
    /**
     * Can be set to `none`, `low`, `medium`, or `high` to correspond to the check [alert levels](https://grafana.com/docs/grafana-cloud/synthetic-monitoring/synthetic-monitoring-alerting/). Defaults to `none`.
     * 
     */
    @Export(name="alertSensitivity", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> alertSensitivity;

    /**
     * @return Can be set to `none`, `low`, `medium`, or `high` to correspond to the check [alert levels](https://grafana.com/docs/grafana-cloud/synthetic-monitoring/synthetic-monitoring-alerting/). Defaults to `none`.
     * 
     */
    public Output<Optional<String>> alertSensitivity() {
        return Codegen.optional(this.alertSensitivity);
    }
    /**
     * Metrics are reduced by default. Set this to `false` if you&#39;d like to publish all metrics. We maintain a [full list of metrics](https://github.com/grafana/synthetic-monitoring-agent/tree/main/internal/scraper/testdata) collected for each. Defaults to `true`.
     * 
     */
    @Export(name="basicMetricsOnly", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> basicMetricsOnly;

    /**
     * @return Metrics are reduced by default. Set this to `false` if you&#39;d like to publish all metrics. We maintain a [full list of metrics](https://github.com/grafana/synthetic-monitoring-agent/tree/main/internal/scraper/testdata) collected for each. Defaults to `true`.
     * 
     */
    public Output<Optional<Boolean>> basicMetricsOnly() {
        return Codegen.optional(this.basicMetricsOnly);
    }
    /**
     * Whether to enable the check. Defaults to `true`.
     * 
     */
    @Export(name="enabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enabled;

    /**
     * @return Whether to enable the check. Defaults to `true`.
     * 
     */
    public Output<Optional<Boolean>> enabled() {
        return Codegen.optional(this.enabled);
    }
    /**
     * How often the check runs in milliseconds (the value is not truly a &#34;frequency&#34; but a &#34;period&#34;). The minimum acceptable value is 1 second (1000 ms), and the maximum is 120 seconds (120000 ms). Defaults to `60000`.
     * 
     */
    @Export(name="frequency", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> frequency;

    /**
     * @return How often the check runs in milliseconds (the value is not truly a &#34;frequency&#34; but a &#34;period&#34;). The minimum acceptable value is 1 second (1000 ms), and the maximum is 120 seconds (120000 ms). Defaults to `60000`.
     * 
     */
    public Output<Optional<Integer>> frequency() {
        return Codegen.optional(this.frequency);
    }
    /**
     * Name used for job label.
     * 
     */
    @Export(name="job", refs={String.class}, tree="[0]")
    private Output<String> job;

    /**
     * @return Name used for job label.
     * 
     */
    public Output<String> job() {
        return this.job;
    }
    /**
     * Custom labels to be included with collected metrics and logs. The maximum number of labels that can be specified per check is 5. These are applied, along with the probe-specific labels, to the outgoing metrics. The names and values of the labels cannot be empty, and the maximum length is 32 bytes.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return Custom labels to be included with collected metrics and logs. The maximum number of labels that can be specified per check is 5. These are applied, along with the probe-specific labels, to the outgoing metrics. The names and values of the labels cannot be empty, and the maximum length is 32 bytes.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * List of probe location IDs where this target will be checked from.
     * 
     */
    @Export(name="probes", refs={List.class,Integer.class}, tree="[0,1]")
    private Output<List<Integer>> probes;

    /**
     * @return List of probe location IDs where this target will be checked from.
     * 
     */
    public Output<List<Integer>> probes() {
        return this.probes;
    }
    /**
     * Check settings. Should contain exactly one nested block.
     * 
     */
    @Export(name="settings", refs={SyntheticMonitoringCheckSettings.class}, tree="[0]")
    private Output<SyntheticMonitoringCheckSettings> settings;

    /**
     * @return Check settings. Should contain exactly one nested block.
     * 
     */
    public Output<SyntheticMonitoringCheckSettings> settings() {
        return this.settings;
    }
    /**
     * Hostname to ping.
     * 
     */
    @Export(name="target", refs={String.class}, tree="[0]")
    private Output<String> target;

    /**
     * @return Hostname to ping.
     * 
     */
    public Output<String> target() {
        return this.target;
    }
    /**
     * The tenant ID of the check.
     * 
     */
    @Export(name="tenantId", refs={Integer.class}, tree="[0]")
    private Output<Integer> tenantId;

    /**
     * @return The tenant ID of the check.
     * 
     */
    public Output<Integer> tenantId() {
        return this.tenantId;
    }
    /**
     * Specifies the maximum running time for the check in milliseconds. The minimum acceptable value is 1 second (1000 ms), and the maximum 10 seconds (10000 ms). Defaults to `3000`.
     * 
     */
    @Export(name="timeout", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> timeout;

    /**
     * @return Specifies the maximum running time for the check in milliseconds. The minimum acceptable value is 1 second (1000 ms), and the maximum 10 seconds (10000 ms). Defaults to `3000`.
     * 
     */
    public Output<Optional<Integer>> timeout() {
        return Codegen.optional(this.timeout);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public SyntheticMonitoringCheck(String name) {
        this(name, SyntheticMonitoringCheckArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public SyntheticMonitoringCheck(String name, SyntheticMonitoringCheckArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public SyntheticMonitoringCheck(String name, SyntheticMonitoringCheckArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("grafana:index/syntheticMonitoringCheck:SyntheticMonitoringCheck", name, args == null ? SyntheticMonitoringCheckArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private SyntheticMonitoringCheck(String name, Output<String> id, @Nullable SyntheticMonitoringCheckState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("grafana:index/syntheticMonitoringCheck:SyntheticMonitoringCheck", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static SyntheticMonitoringCheck get(String name, Output<String> id, @Nullable SyntheticMonitoringCheckState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new SyntheticMonitoringCheck(name, id, state, options);
    }
}
