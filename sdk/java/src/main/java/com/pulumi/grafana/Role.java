// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.grafana.RoleArgs;
import com.pulumi.grafana.Utilities;
import com.pulumi.grafana.inputs.RoleState;
import com.pulumi.grafana.outputs.RolePermission;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * **Note:** This resource is available only with Grafana Enterprise 8.+.
 * 
 * * [Official documentation](https://grafana.com/docs/grafana/latest/administration/roles-and-permissions/access-control/)
 * * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/access_control/)
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.grafana.Role;
 * import com.pulumi.grafana.RoleArgs;
 * import com.pulumi.grafana.inputs.RolePermissionArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var superUser = new Role(&#34;superUser&#34;, RoleArgs.builder()        
 *             .description(&#34;My Super User description&#34;)
 *             .global(true)
 *             .permissions(            
 *                 RolePermissionArgs.builder()
 *                     .action(&#34;org.users:add&#34;)
 *                     .scope(&#34;users:*&#34;)
 *                     .build(),
 *                 RolePermissionArgs.builder()
 *                     .action(&#34;org.users:write&#34;)
 *                     .scope(&#34;users:*&#34;)
 *                     .build(),
 *                 RolePermissionArgs.builder()
 *                     .action(&#34;org.users:read&#34;)
 *                     .scope(&#34;users:*&#34;)
 *                     .build())
 *             .uid(&#34;superuseruid&#34;)
 *             .version(1)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * ```sh
 *  $ pulumi import grafana:index/role:Role role_name {{uid}}
 * ```
 * 
 */
@ResourceType(type="grafana:index/role:Role")
public class Role extends com.pulumi.resources.CustomResource {
    /**
     * Whether the role version should be incremented automatically on updates (and set to 1 on creation). This field or `version` should be set.
     * 
     */
    @Export(name="autoIncrementVersion", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> autoIncrementVersion;

    /**
     * @return Whether the role version should be incremented automatically on updates (and set to 1 on creation). This field or `version` should be set.
     * 
     */
    public Output<Optional<Boolean>> autoIncrementVersion() {
        return Codegen.optional(this.autoIncrementVersion);
    }
    /**
     * Description of the role.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Description of the role.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Display name of the role. Available with Grafana 8.5+.
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> displayName;

    /**
     * @return Display name of the role. Available with Grafana 8.5+.
     * 
     */
    public Output<Optional<String>> displayName() {
        return Codegen.optional(this.displayName);
    }
    /**
     * Boolean to state whether the role is available across all organizations or not. Defaults to `false`.
     * 
     */
    @Export(name="global", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> global;

    /**
     * @return Boolean to state whether the role is available across all organizations or not. Defaults to `false`.
     * 
     */
    public Output<Optional<Boolean>> global() {
        return Codegen.optional(this.global);
    }
    /**
     * Group of the role. Available with Grafana 8.5+.
     * 
     */
    @Export(name="group", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> group;

    /**
     * @return Group of the role. Available with Grafana 8.5+.
     * 
     */
    public Output<Optional<String>> group() {
        return Codegen.optional(this.group);
    }
    /**
     * Boolean to state whether the role should be visible in the Grafana UI or not. Available with Grafana 8.5+. Defaults to `false`.
     * 
     */
    @Export(name="hidden", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> hidden;

    /**
     * @return Boolean to state whether the role should be visible in the Grafana UI or not. Available with Grafana 8.5+. Defaults to `false`.
     * 
     */
    public Output<Optional<Boolean>> hidden() {
        return Codegen.optional(this.hidden);
    }
    /**
     * Name of the role
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the role
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The Organization ID. If not set, the Org ID defined in the provider block will be used.
     * 
     */
    @Export(name="orgId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> orgId;

    /**
     * @return The Organization ID. If not set, the Org ID defined in the provider block will be used.
     * 
     */
    public Output<Optional<String>> orgId() {
        return Codegen.optional(this.orgId);
    }
    /**
     * Specific set of actions granted by the role.
     * 
     */
    @Export(name="permissions", refs={List.class,RolePermission.class}, tree="[0,1]")
    private Output</* @Nullable */ List<RolePermission>> permissions;

    /**
     * @return Specific set of actions granted by the role.
     * 
     */
    public Output<Optional<List<RolePermission>>> permissions() {
        return Codegen.optional(this.permissions);
    }
    /**
     * Unique identifier of the role. Used for assignments.
     * 
     */
    @Export(name="uid", refs={String.class}, tree="[0]")
    private Output<String> uid;

    /**
     * @return Unique identifier of the role. Used for assignments.
     * 
     */
    public Output<String> uid() {
        return this.uid;
    }
    /**
     * Version of the role. A role is updated only on version increase. This field or `auto_increment_version` should be set.
     * 
     */
    @Export(name="version", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> version;

    /**
     * @return Version of the role. A role is updated only on version increase. This field or `auto_increment_version` should be set.
     * 
     */
    public Output<Optional<Integer>> version() {
        return Codegen.optional(this.version);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Role(String name) {
        this(name, RoleArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Role(String name, @Nullable RoleArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Role(String name, @Nullable RoleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("grafana:index/role:Role", name, args == null ? RoleArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Role(String name, Output<String> id, @Nullable RoleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("grafana:index/role:Role", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Role get(String name, Output<String> id, @Nullable RoleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Role(name, id, state, options);
    }
}
