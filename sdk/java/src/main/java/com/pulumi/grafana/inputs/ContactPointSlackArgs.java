// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContactPointSlackArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContactPointSlackArgs Empty = new ContactPointSlackArgs();

    /**
     * Whether to disable sending resolve messages. Defaults to `false`.
     * 
     */
    @Import(name="disableResolveMessage")
    private @Nullable Output<Boolean> disableResolveMessage;

    /**
     * @return Whether to disable sending resolve messages. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> disableResolveMessage() {
        return Optional.ofNullable(this.disableResolveMessage);
    }

    /**
     * Use this to override the Slack API endpoint URL to send requests to.
     * 
     */
    @Import(name="endpointUrl")
    private @Nullable Output<String> endpointUrl;

    /**
     * @return Use this to override the Slack API endpoint URL to send requests to.
     * 
     */
    public Optional<Output<String>> endpointUrl() {
        return Optional.ofNullable(this.endpointUrl);
    }

    /**
     * The name of a Slack workspace emoji to use as the bot icon.
     * 
     */
    @Import(name="iconEmoji")
    private @Nullable Output<String> iconEmoji;

    /**
     * @return The name of a Slack workspace emoji to use as the bot icon.
     * 
     */
    public Optional<Output<String>> iconEmoji() {
        return Optional.ofNullable(this.iconEmoji);
    }

    /**
     * A URL of an image to use as the bot icon.
     * 
     */
    @Import(name="iconUrl")
    private @Nullable Output<String> iconUrl;

    /**
     * @return A URL of an image to use as the bot icon.
     * 
     */
    public Optional<Output<String>> iconUrl() {
        return Optional.ofNullable(this.iconUrl);
    }

    /**
     * Describes how to ping the slack channel that messages are being sent to. Options are `here` for an @here ping, `channel` for @channel, or empty for no ping.
     * 
     */
    @Import(name="mentionChannel")
    private @Nullable Output<String> mentionChannel;

    /**
     * @return Describes how to ping the slack channel that messages are being sent to. Options are `here` for an @here ping, `channel` for @channel, or empty for no ping.
     * 
     */
    public Optional<Output<String>> mentionChannel() {
        return Optional.ofNullable(this.mentionChannel);
    }

    /**
     * Comma-separated list of groups to mention in the message.
     * 
     */
    @Import(name="mentionGroups")
    private @Nullable Output<String> mentionGroups;

    /**
     * @return Comma-separated list of groups to mention in the message.
     * 
     */
    public Optional<Output<String>> mentionGroups() {
        return Optional.ofNullable(this.mentionGroups);
    }

    /**
     * Comma-separated list of users to mention in the message.
     * 
     */
    @Import(name="mentionUsers")
    private @Nullable Output<String> mentionUsers;

    /**
     * @return Comma-separated list of users to mention in the message.
     * 
     */
    public Optional<Output<String>> mentionUsers() {
        return Optional.ofNullable(this.mentionUsers);
    }

    /**
     * Channel, private group, or IM channel (can be an encoded ID or a name) to send messages to.
     * 
     */
    @Import(name="recipient")
    private @Nullable Output<String> recipient;

    /**
     * @return Channel, private group, or IM channel (can be an encoded ID or a name) to send messages to.
     * 
     */
    public Optional<Output<String>> recipient() {
        return Optional.ofNullable(this.recipient);
    }

    /**
     * Additional custom properties to attach to the notifier. Defaults to `map[]`.
     * 
     */
    @Import(name="settings")
    private @Nullable Output<Map<String,String>> settings;

    /**
     * @return Additional custom properties to attach to the notifier. Defaults to `map[]`.
     * 
     */
    public Optional<Output<Map<String,String>>> settings() {
        return Optional.ofNullable(this.settings);
    }

    /**
     * Templated content of the message.
     * 
     */
    @Import(name="text")
    private @Nullable Output<String> text;

    /**
     * @return Templated content of the message.
     * 
     */
    public Optional<Output<String>> text() {
        return Optional.ofNullable(this.text);
    }

    /**
     * Templated title of the message.
     * 
     */
    @Import(name="title")
    private @Nullable Output<String> title;

    /**
     * @return Templated title of the message.
     * 
     */
    public Optional<Output<String>> title() {
        return Optional.ofNullable(this.title);
    }

    /**
     * A Slack API token,for sending messages directly without the webhook method.
     * 
     */
    @Import(name="token")
    private @Nullable Output<String> token;

    /**
     * @return A Slack API token,for sending messages directly without the webhook method.
     * 
     */
    public Optional<Output<String>> token() {
        return Optional.ofNullable(this.token);
    }

    /**
     * The UID of the contact point.
     * 
     */
    @Import(name="uid")
    private @Nullable Output<String> uid;

    /**
     * @return The UID of the contact point.
     * 
     */
    public Optional<Output<String>> uid() {
        return Optional.ofNullable(this.uid);
    }

    /**
     * A Slack webhook URL,for sending messages via the webhook method.
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return A Slack webhook URL,for sending messages via the webhook method.
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    /**
     * Username for the bot to use.
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return Username for the bot to use.
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private ContactPointSlackArgs() {}

    private ContactPointSlackArgs(ContactPointSlackArgs $) {
        this.disableResolveMessage = $.disableResolveMessage;
        this.endpointUrl = $.endpointUrl;
        this.iconEmoji = $.iconEmoji;
        this.iconUrl = $.iconUrl;
        this.mentionChannel = $.mentionChannel;
        this.mentionGroups = $.mentionGroups;
        this.mentionUsers = $.mentionUsers;
        this.recipient = $.recipient;
        this.settings = $.settings;
        this.text = $.text;
        this.title = $.title;
        this.token = $.token;
        this.uid = $.uid;
        this.url = $.url;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContactPointSlackArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContactPointSlackArgs $;

        public Builder() {
            $ = new ContactPointSlackArgs();
        }

        public Builder(ContactPointSlackArgs defaults) {
            $ = new ContactPointSlackArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param disableResolveMessage Whether to disable sending resolve messages. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder disableResolveMessage(@Nullable Output<Boolean> disableResolveMessage) {
            $.disableResolveMessage = disableResolveMessage;
            return this;
        }

        /**
         * @param disableResolveMessage Whether to disable sending resolve messages. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder disableResolveMessage(Boolean disableResolveMessage) {
            return disableResolveMessage(Output.of(disableResolveMessage));
        }

        /**
         * @param endpointUrl Use this to override the Slack API endpoint URL to send requests to.
         * 
         * @return builder
         * 
         */
        public Builder endpointUrl(@Nullable Output<String> endpointUrl) {
            $.endpointUrl = endpointUrl;
            return this;
        }

        /**
         * @param endpointUrl Use this to override the Slack API endpoint URL to send requests to.
         * 
         * @return builder
         * 
         */
        public Builder endpointUrl(String endpointUrl) {
            return endpointUrl(Output.of(endpointUrl));
        }

        /**
         * @param iconEmoji The name of a Slack workspace emoji to use as the bot icon.
         * 
         * @return builder
         * 
         */
        public Builder iconEmoji(@Nullable Output<String> iconEmoji) {
            $.iconEmoji = iconEmoji;
            return this;
        }

        /**
         * @param iconEmoji The name of a Slack workspace emoji to use as the bot icon.
         * 
         * @return builder
         * 
         */
        public Builder iconEmoji(String iconEmoji) {
            return iconEmoji(Output.of(iconEmoji));
        }

        /**
         * @param iconUrl A URL of an image to use as the bot icon.
         * 
         * @return builder
         * 
         */
        public Builder iconUrl(@Nullable Output<String> iconUrl) {
            $.iconUrl = iconUrl;
            return this;
        }

        /**
         * @param iconUrl A URL of an image to use as the bot icon.
         * 
         * @return builder
         * 
         */
        public Builder iconUrl(String iconUrl) {
            return iconUrl(Output.of(iconUrl));
        }

        /**
         * @param mentionChannel Describes how to ping the slack channel that messages are being sent to. Options are `here` for an @here ping, `channel` for @channel, or empty for no ping.
         * 
         * @return builder
         * 
         */
        public Builder mentionChannel(@Nullable Output<String> mentionChannel) {
            $.mentionChannel = mentionChannel;
            return this;
        }

        /**
         * @param mentionChannel Describes how to ping the slack channel that messages are being sent to. Options are `here` for an @here ping, `channel` for @channel, or empty for no ping.
         * 
         * @return builder
         * 
         */
        public Builder mentionChannel(String mentionChannel) {
            return mentionChannel(Output.of(mentionChannel));
        }

        /**
         * @param mentionGroups Comma-separated list of groups to mention in the message.
         * 
         * @return builder
         * 
         */
        public Builder mentionGroups(@Nullable Output<String> mentionGroups) {
            $.mentionGroups = mentionGroups;
            return this;
        }

        /**
         * @param mentionGroups Comma-separated list of groups to mention in the message.
         * 
         * @return builder
         * 
         */
        public Builder mentionGroups(String mentionGroups) {
            return mentionGroups(Output.of(mentionGroups));
        }

        /**
         * @param mentionUsers Comma-separated list of users to mention in the message.
         * 
         * @return builder
         * 
         */
        public Builder mentionUsers(@Nullable Output<String> mentionUsers) {
            $.mentionUsers = mentionUsers;
            return this;
        }

        /**
         * @param mentionUsers Comma-separated list of users to mention in the message.
         * 
         * @return builder
         * 
         */
        public Builder mentionUsers(String mentionUsers) {
            return mentionUsers(Output.of(mentionUsers));
        }

        /**
         * @param recipient Channel, private group, or IM channel (can be an encoded ID or a name) to send messages to.
         * 
         * @return builder
         * 
         */
        public Builder recipient(@Nullable Output<String> recipient) {
            $.recipient = recipient;
            return this;
        }

        /**
         * @param recipient Channel, private group, or IM channel (can be an encoded ID or a name) to send messages to.
         * 
         * @return builder
         * 
         */
        public Builder recipient(String recipient) {
            return recipient(Output.of(recipient));
        }

        /**
         * @param settings Additional custom properties to attach to the notifier. Defaults to `map[]`.
         * 
         * @return builder
         * 
         */
        public Builder settings(@Nullable Output<Map<String,String>> settings) {
            $.settings = settings;
            return this;
        }

        /**
         * @param settings Additional custom properties to attach to the notifier. Defaults to `map[]`.
         * 
         * @return builder
         * 
         */
        public Builder settings(Map<String,String> settings) {
            return settings(Output.of(settings));
        }

        /**
         * @param text Templated content of the message.
         * 
         * @return builder
         * 
         */
        public Builder text(@Nullable Output<String> text) {
            $.text = text;
            return this;
        }

        /**
         * @param text Templated content of the message.
         * 
         * @return builder
         * 
         */
        public Builder text(String text) {
            return text(Output.of(text));
        }

        /**
         * @param title Templated title of the message.
         * 
         * @return builder
         * 
         */
        public Builder title(@Nullable Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title Templated title of the message.
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        /**
         * @param token A Slack API token,for sending messages directly without the webhook method.
         * 
         * @return builder
         * 
         */
        public Builder token(@Nullable Output<String> token) {
            $.token = token;
            return this;
        }

        /**
         * @param token A Slack API token,for sending messages directly without the webhook method.
         * 
         * @return builder
         * 
         */
        public Builder token(String token) {
            return token(Output.of(token));
        }

        /**
         * @param uid The UID of the contact point.
         * 
         * @return builder
         * 
         */
        public Builder uid(@Nullable Output<String> uid) {
            $.uid = uid;
            return this;
        }

        /**
         * @param uid The UID of the contact point.
         * 
         * @return builder
         * 
         */
        public Builder uid(String uid) {
            return uid(Output.of(uid));
        }

        /**
         * @param url A Slack webhook URL,for sending messages via the webhook method.
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url A Slack webhook URL,for sending messages via the webhook method.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        /**
         * @param username Username for the bot to use.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username Username for the bot to use.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public ContactPointSlackArgs build() {
            return $;
        }
    }

}
