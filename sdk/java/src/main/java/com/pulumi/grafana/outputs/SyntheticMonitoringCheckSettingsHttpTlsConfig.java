// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SyntheticMonitoringCheckSettingsHttpTlsConfig {
    /**
     * @return CA certificate in PEM format.
     * 
     */
    private @Nullable String caCert;
    /**
     * @return Client certificate in PEM format.
     * 
     */
    private @Nullable String clientCert;
    /**
     * @return Client key in PEM format.
     * 
     */
    private @Nullable String clientKey;
    /**
     * @return Disable target certificate validation. Defaults to `false`.
     * 
     */
    private @Nullable Boolean insecureSkipVerify;
    /**
     * @return Used to verify the hostname for the targets.
     * 
     */
    private @Nullable String serverName;

    private SyntheticMonitoringCheckSettingsHttpTlsConfig() {}
    /**
     * @return CA certificate in PEM format.
     * 
     */
    public Optional<String> caCert() {
        return Optional.ofNullable(this.caCert);
    }
    /**
     * @return Client certificate in PEM format.
     * 
     */
    public Optional<String> clientCert() {
        return Optional.ofNullable(this.clientCert);
    }
    /**
     * @return Client key in PEM format.
     * 
     */
    public Optional<String> clientKey() {
        return Optional.ofNullable(this.clientKey);
    }
    /**
     * @return Disable target certificate validation. Defaults to `false`.
     * 
     */
    public Optional<Boolean> insecureSkipVerify() {
        return Optional.ofNullable(this.insecureSkipVerify);
    }
    /**
     * @return Used to verify the hostname for the targets.
     * 
     */
    public Optional<String> serverName() {
        return Optional.ofNullable(this.serverName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SyntheticMonitoringCheckSettingsHttpTlsConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String caCert;
        private @Nullable String clientCert;
        private @Nullable String clientKey;
        private @Nullable Boolean insecureSkipVerify;
        private @Nullable String serverName;
        public Builder() {}
        public Builder(SyntheticMonitoringCheckSettingsHttpTlsConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.caCert = defaults.caCert;
    	      this.clientCert = defaults.clientCert;
    	      this.clientKey = defaults.clientKey;
    	      this.insecureSkipVerify = defaults.insecureSkipVerify;
    	      this.serverName = defaults.serverName;
        }

        @CustomType.Setter
        public Builder caCert(@Nullable String caCert) {
            this.caCert = caCert;
            return this;
        }
        @CustomType.Setter
        public Builder clientCert(@Nullable String clientCert) {
            this.clientCert = clientCert;
            return this;
        }
        @CustomType.Setter
        public Builder clientKey(@Nullable String clientKey) {
            this.clientKey = clientKey;
            return this;
        }
        @CustomType.Setter
        public Builder insecureSkipVerify(@Nullable Boolean insecureSkipVerify) {
            this.insecureSkipVerify = insecureSkipVerify;
            return this;
        }
        @CustomType.Setter
        public Builder serverName(@Nullable String serverName) {
            this.serverName = serverName;
            return this;
        }
        public SyntheticMonitoringCheckSettingsHttpTlsConfig build() {
            final var o = new SyntheticMonitoringCheckSettingsHttpTlsConfig();
            o.caCert = caCert;
            o.clientCert = clientCert;
            o.clientKey = clientKey;
            o.insecureSkipVerify = insecureSkipVerify;
            o.serverName = serverName;
            return o;
        }
    }
}
