// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.grafana.inputs.RuleGroupRuleArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RuleGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final RuleGroupArgs Empty = new RuleGroupArgs();

    /**
     * The UID of the group that the folder belongs to.
     * 
     */
    @Import(name="folderUid", required=true)
    private Output<String> folderUid;

    /**
     * @return The UID of the group that the folder belongs to.
     * 
     */
    public Output<String> folderUid() {
        return this.folderUid;
    }

    /**
     * The interval, in seconds, at which all rules in the group are evaluated. If a group contains many rules, the rules are evaluated sequentially.
     * 
     */
    @Import(name="intervalSeconds", required=true)
    private Output<Integer> intervalSeconds;

    /**
     * @return The interval, in seconds, at which all rules in the group are evaluated. If a group contains many rules, the rules are evaluated sequentially.
     * 
     */
    public Output<Integer> intervalSeconds() {
        return this.intervalSeconds;
    }

    /**
     * The name of the rule group.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the rule group.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the org to which the group belongs.
     * 
     */
    @Import(name="orgId", required=true)
    private Output<Integer> orgId;

    /**
     * @return The ID of the org to which the group belongs.
     * 
     */
    public Output<Integer> orgId() {
        return this.orgId;
    }

    /**
     * The rules within the group.
     * 
     */
    @Import(name="rules", required=true)
    private Output<List<RuleGroupRuleArgs>> rules;

    /**
     * @return The rules within the group.
     * 
     */
    public Output<List<RuleGroupRuleArgs>> rules() {
        return this.rules;
    }

    private RuleGroupArgs() {}

    private RuleGroupArgs(RuleGroupArgs $) {
        this.folderUid = $.folderUid;
        this.intervalSeconds = $.intervalSeconds;
        this.name = $.name;
        this.orgId = $.orgId;
        this.rules = $.rules;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RuleGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RuleGroupArgs $;

        public Builder() {
            $ = new RuleGroupArgs();
        }

        public Builder(RuleGroupArgs defaults) {
            $ = new RuleGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param folderUid The UID of the group that the folder belongs to.
         * 
         * @return builder
         * 
         */
        public Builder folderUid(Output<String> folderUid) {
            $.folderUid = folderUid;
            return this;
        }

        /**
         * @param folderUid The UID of the group that the folder belongs to.
         * 
         * @return builder
         * 
         */
        public Builder folderUid(String folderUid) {
            return folderUid(Output.of(folderUid));
        }

        /**
         * @param intervalSeconds The interval, in seconds, at which all rules in the group are evaluated. If a group contains many rules, the rules are evaluated sequentially.
         * 
         * @return builder
         * 
         */
        public Builder intervalSeconds(Output<Integer> intervalSeconds) {
            $.intervalSeconds = intervalSeconds;
            return this;
        }

        /**
         * @param intervalSeconds The interval, in seconds, at which all rules in the group are evaluated. If a group contains many rules, the rules are evaluated sequentially.
         * 
         * @return builder
         * 
         */
        public Builder intervalSeconds(Integer intervalSeconds) {
            return intervalSeconds(Output.of(intervalSeconds));
        }

        /**
         * @param name The name of the rule group.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the rule group.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param orgId The ID of the org to which the group belongs.
         * 
         * @return builder
         * 
         */
        public Builder orgId(Output<Integer> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId The ID of the org to which the group belongs.
         * 
         * @return builder
         * 
         */
        public Builder orgId(Integer orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param rules The rules within the group.
         * 
         * @return builder
         * 
         */
        public Builder rules(Output<List<RuleGroupRuleArgs>> rules) {
            $.rules = rules;
            return this;
        }

        /**
         * @param rules The rules within the group.
         * 
         * @return builder
         * 
         */
        public Builder rules(List<RuleGroupRuleArgs> rules) {
            return rules(Output.of(rules));
        }

        /**
         * @param rules The rules within the group.
         * 
         * @return builder
         * 
         */
        public Builder rules(RuleGroupRuleArgs... rules) {
            return rules(List.of(rules));
        }

        public RuleGroupArgs build() {
            $.folderUid = Objects.requireNonNull($.folderUid, "expected parameter 'folderUid' to be non-null");
            $.intervalSeconds = Objects.requireNonNull($.intervalSeconds, "expected parameter 'intervalSeconds' to be non-null");
            $.orgId = Objects.requireNonNull($.orgId, "expected parameter 'orgId' to be non-null");
            $.rules = Objects.requireNonNull($.rules, "expected parameter 'rules' to be non-null");
            return $;
        }
    }

}
