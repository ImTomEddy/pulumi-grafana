// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ContactPointTelegram {
    /**
     * @return The chat ID to send messages to.
     * 
     */
    private String chatId;
    /**
     * @return When set users will receive a notification with no sound.
     * 
     */
    private @Nullable Boolean disableNotifications;
    /**
     * @return Whether to disable sending resolve messages. Defaults to `false`.
     * 
     */
    private @Nullable Boolean disableResolveMessage;
    /**
     * @return When set it disables link previews for links in the message.
     * 
     */
    private @Nullable Boolean disableWebPagePreview;
    /**
     * @return The templated content of the message.
     * 
     */
    private @Nullable String message;
    /**
     * @return Mode for parsing entities in the message text. Supported: None, Markdown, MarkdownV2, and HTML. HTML is the default.
     * 
     */
    private @Nullable String parseMode;
    /**
     * @return When set it protects the contents of the message from forwarding and saving.
     * 
     */
    private @Nullable Boolean protectContent;
    /**
     * @return Additional custom properties to attach to the notifier. Defaults to `map[]`.
     * 
     */
    private @Nullable Map<String,String> settings;
    /**
     * @return The Telegram bot token.
     * 
     */
    private String token;
    /**
     * @return The UID of the contact point.
     * 
     */
    private @Nullable String uid;

    private ContactPointTelegram() {}
    /**
     * @return The chat ID to send messages to.
     * 
     */
    public String chatId() {
        return this.chatId;
    }
    /**
     * @return When set users will receive a notification with no sound.
     * 
     */
    public Optional<Boolean> disableNotifications() {
        return Optional.ofNullable(this.disableNotifications);
    }
    /**
     * @return Whether to disable sending resolve messages. Defaults to `false`.
     * 
     */
    public Optional<Boolean> disableResolveMessage() {
        return Optional.ofNullable(this.disableResolveMessage);
    }
    /**
     * @return When set it disables link previews for links in the message.
     * 
     */
    public Optional<Boolean> disableWebPagePreview() {
        return Optional.ofNullable(this.disableWebPagePreview);
    }
    /**
     * @return The templated content of the message.
     * 
     */
    public Optional<String> message() {
        return Optional.ofNullable(this.message);
    }
    /**
     * @return Mode for parsing entities in the message text. Supported: None, Markdown, MarkdownV2, and HTML. HTML is the default.
     * 
     */
    public Optional<String> parseMode() {
        return Optional.ofNullable(this.parseMode);
    }
    /**
     * @return When set it protects the contents of the message from forwarding and saving.
     * 
     */
    public Optional<Boolean> protectContent() {
        return Optional.ofNullable(this.protectContent);
    }
    /**
     * @return Additional custom properties to attach to the notifier. Defaults to `map[]`.
     * 
     */
    public Map<String,String> settings() {
        return this.settings == null ? Map.of() : this.settings;
    }
    /**
     * @return The Telegram bot token.
     * 
     */
    public String token() {
        return this.token;
    }
    /**
     * @return The UID of the contact point.
     * 
     */
    public Optional<String> uid() {
        return Optional.ofNullable(this.uid);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ContactPointTelegram defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String chatId;
        private @Nullable Boolean disableNotifications;
        private @Nullable Boolean disableResolveMessage;
        private @Nullable Boolean disableWebPagePreview;
        private @Nullable String message;
        private @Nullable String parseMode;
        private @Nullable Boolean protectContent;
        private @Nullable Map<String,String> settings;
        private String token;
        private @Nullable String uid;
        public Builder() {}
        public Builder(ContactPointTelegram defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.chatId = defaults.chatId;
    	      this.disableNotifications = defaults.disableNotifications;
    	      this.disableResolveMessage = defaults.disableResolveMessage;
    	      this.disableWebPagePreview = defaults.disableWebPagePreview;
    	      this.message = defaults.message;
    	      this.parseMode = defaults.parseMode;
    	      this.protectContent = defaults.protectContent;
    	      this.settings = defaults.settings;
    	      this.token = defaults.token;
    	      this.uid = defaults.uid;
        }

        @CustomType.Setter
        public Builder chatId(String chatId) {
            this.chatId = Objects.requireNonNull(chatId);
            return this;
        }
        @CustomType.Setter
        public Builder disableNotifications(@Nullable Boolean disableNotifications) {
            this.disableNotifications = disableNotifications;
            return this;
        }
        @CustomType.Setter
        public Builder disableResolveMessage(@Nullable Boolean disableResolveMessage) {
            this.disableResolveMessage = disableResolveMessage;
            return this;
        }
        @CustomType.Setter
        public Builder disableWebPagePreview(@Nullable Boolean disableWebPagePreview) {
            this.disableWebPagePreview = disableWebPagePreview;
            return this;
        }
        @CustomType.Setter
        public Builder message(@Nullable String message) {
            this.message = message;
            return this;
        }
        @CustomType.Setter
        public Builder parseMode(@Nullable String parseMode) {
            this.parseMode = parseMode;
            return this;
        }
        @CustomType.Setter
        public Builder protectContent(@Nullable Boolean protectContent) {
            this.protectContent = protectContent;
            return this;
        }
        @CustomType.Setter
        public Builder settings(@Nullable Map<String,String> settings) {
            this.settings = settings;
            return this;
        }
        @CustomType.Setter
        public Builder token(String token) {
            this.token = Objects.requireNonNull(token);
            return this;
        }
        @CustomType.Setter
        public Builder uid(@Nullable String uid) {
            this.uid = uid;
            return this;
        }
        public ContactPointTelegram build() {
            final var o = new ContactPointTelegram();
            o.chatId = chatId;
            o.disableNotifications = disableNotifications;
            o.disableResolveMessage = disableResolveMessage;
            o.disableWebPagePreview = disableWebPagePreview;
            o.message = message;
            o.parseMode = parseMode;
            o.protectContent = protectContent;
            o.settings = settings;
            o.token = token;
            o.uid = uid;
            return o;
        }
    }
}
