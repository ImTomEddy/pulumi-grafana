// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.grafana.AnnotationArgs;
import com.pulumi.grafana.Utilities;
import com.pulumi.grafana.inputs.AnnotationState;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * * [Official documentation](https://grafana.com/docs/grafana/latest/dashboards/build-dashboards/annotate-visualizations/)
 * * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/annotations/)
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.grafana.Annotation;
 * import com.pulumi.grafana.AnnotationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var test = new Annotation(&#34;test&#34;, AnnotationArgs.builder()        
 *             .text(&#34;basic text&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 */
@ResourceType(type="grafana:index/annotation:Annotation")
public class Annotation extends com.pulumi.resources.CustomResource {
    /**
     * The ID of the dashboard on which to create the annotation. Deprecated: Use dashboard_uid instead.
     * 
     * @deprecated
     * Use dashboard_uid instead.
     * 
     */
    @Deprecated /* Use dashboard_uid instead. */
    @Export(name="dashboardId", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> dashboardId;

    /**
     * @return The ID of the dashboard on which to create the annotation. Deprecated: Use dashboard_uid instead.
     * 
     */
    public Output<Optional<Integer>> dashboardId() {
        return Codegen.optional(this.dashboardId);
    }
    /**
     * The ID of the dashboard on which to create the annotation.
     * 
     */
    @Export(name="dashboardUid", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> dashboardUid;

    /**
     * @return The ID of the dashboard on which to create the annotation.
     * 
     */
    public Output<Optional<String>> dashboardUid() {
        return Codegen.optional(this.dashboardUid);
    }
    /**
     * The Organization ID. If not set, the Org ID defined in the provider block will be used.
     * 
     */
    @Export(name="orgId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> orgId;

    /**
     * @return The Organization ID. If not set, the Org ID defined in the provider block will be used.
     * 
     */
    public Output<Optional<String>> orgId() {
        return Codegen.optional(this.orgId);
    }
    /**
     * The ID of the dashboard panel on which to create the annotation.
     * 
     */
    @Export(name="panelId", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> panelId;

    /**
     * @return The ID of the dashboard panel on which to create the annotation.
     * 
     */
    public Output<Optional<Integer>> panelId() {
        return Codegen.optional(this.panelId);
    }
    /**
     * The tags to associate with the annotation.
     * 
     */
    @Export(name="tags", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> tags;

    /**
     * @return The tags to associate with the annotation.
     * 
     */
    public Output<Optional<List<String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * The text to associate with the annotation.
     * 
     */
    @Export(name="text", refs={String.class}, tree="[0]")
    private Output<String> text;

    /**
     * @return The text to associate with the annotation.
     * 
     */
    public Output<String> text() {
        return this.text;
    }
    /**
     * The RFC 3339-formatted time string indicating the annotation&#39;s time.
     * 
     */
    @Export(name="time", refs={String.class}, tree="[0]")
    private Output<String> time;

    /**
     * @return The RFC 3339-formatted time string indicating the annotation&#39;s time.
     * 
     */
    public Output<String> time() {
        return this.time;
    }
    /**
     * The RFC 3339-formatted time string indicating the annotation&#39;s end time.
     * 
     */
    @Export(name="timeEnd", refs={String.class}, tree="[0]")
    private Output<String> timeEnd;

    /**
     * @return The RFC 3339-formatted time string indicating the annotation&#39;s end time.
     * 
     */
    public Output<String> timeEnd() {
        return this.timeEnd;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Annotation(String name) {
        this(name, AnnotationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Annotation(String name, AnnotationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Annotation(String name, AnnotationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("grafana:index/annotation:Annotation", name, args == null ? AnnotationArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Annotation(String name, Output<String> id, @Nullable AnnotationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("grafana:index/annotation:Annotation", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Annotation get(String name, Output<String> id, @Nullable AnnotationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Annotation(name, id, state, options);
    }
}
