// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class GetCloudStackPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetCloudStackPlainArgs Empty = new GetCloudStackPlainArgs();

    /**
     * Subdomain that the Grafana instance will be available at (i.e. setting slug to “\n\n” will make the instance
     * available at “https://\n\n.grafana.net&#34;.
     * 
     */
    @Import(name="slug", required=true)
    private String slug;

    /**
     * @return Subdomain that the Grafana instance will be available at (i.e. setting slug to “\n\n” will make the instance
     * available at “https://\n\n.grafana.net&#34;.
     * 
     */
    public String slug() {
        return this.slug;
    }

    private GetCloudStackPlainArgs() {}

    private GetCloudStackPlainArgs(GetCloudStackPlainArgs $) {
        this.slug = $.slug;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCloudStackPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCloudStackPlainArgs $;

        public Builder() {
            $ = new GetCloudStackPlainArgs();
        }

        public Builder(GetCloudStackPlainArgs defaults) {
            $ = new GetCloudStackPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param slug Subdomain that the Grafana instance will be available at (i.e. setting slug to “\n\n” will make the instance
         * available at “https://\n\n.grafana.net&#34;.
         * 
         * @return builder
         * 
         */
        public Builder slug(String slug) {
            $.slug = slug;
            return this;
        }

        public GetCloudStackPlainArgs build() {
            $.slug = Objects.requireNonNull($.slug, "expected parameter 'slug' to be non-null");
            return $;
        }
    }

}
