// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.grafana.Utilities;
import com.pulumi.grafana.inputs.GetCloudOrganizationArgs;
import com.pulumi.grafana.inputs.GetCloudOrganizationPlainArgs;
import com.pulumi.grafana.inputs.GetCloudStackArgs;
import com.pulumi.grafana.inputs.GetCloudStackPlainArgs;
import com.pulumi.grafana.inputs.GetDashboardArgs;
import com.pulumi.grafana.inputs.GetDashboardPlainArgs;
import com.pulumi.grafana.inputs.GetDashboardsArgs;
import com.pulumi.grafana.inputs.GetDashboardsPlainArgs;
import com.pulumi.grafana.inputs.GetDataSourceArgs;
import com.pulumi.grafana.inputs.GetDataSourcePlainArgs;
import com.pulumi.grafana.inputs.GetFolderArgs;
import com.pulumi.grafana.inputs.GetFolderPlainArgs;
import com.pulumi.grafana.inputs.GetLibraryPanelArgs;
import com.pulumi.grafana.inputs.GetLibraryPanelPlainArgs;
import com.pulumi.grafana.inputs.GetOnCallSlackChannelArgs;
import com.pulumi.grafana.inputs.GetOnCallSlackChannelPlainArgs;
import com.pulumi.grafana.inputs.GetOncallActionArgs;
import com.pulumi.grafana.inputs.GetOncallActionPlainArgs;
import com.pulumi.grafana.inputs.GetOncallEscalationChainArgs;
import com.pulumi.grafana.inputs.GetOncallEscalationChainPlainArgs;
import com.pulumi.grafana.inputs.GetOncallOutgoingWebhookArgs;
import com.pulumi.grafana.inputs.GetOncallOutgoingWebhookPlainArgs;
import com.pulumi.grafana.inputs.GetOncallScheduleArgs;
import com.pulumi.grafana.inputs.GetOncallSchedulePlainArgs;
import com.pulumi.grafana.inputs.GetOncallTeamArgs;
import com.pulumi.grafana.inputs.GetOncallTeamPlainArgs;
import com.pulumi.grafana.inputs.GetOncallUserArgs;
import com.pulumi.grafana.inputs.GetOncallUserGroupArgs;
import com.pulumi.grafana.inputs.GetOncallUserGroupPlainArgs;
import com.pulumi.grafana.inputs.GetOncallUserPlainArgs;
import com.pulumi.grafana.inputs.GetOrganizationArgs;
import com.pulumi.grafana.inputs.GetOrganizationPlainArgs;
import com.pulumi.grafana.inputs.GetSyntheticMonitoringProbeArgs;
import com.pulumi.grafana.inputs.GetSyntheticMonitoringProbePlainArgs;
import com.pulumi.grafana.inputs.GetSyntheticMonitoringProbesArgs;
import com.pulumi.grafana.inputs.GetSyntheticMonitoringProbesPlainArgs;
import com.pulumi.grafana.inputs.GetTeamArgs;
import com.pulumi.grafana.inputs.GetTeamPlainArgs;
import com.pulumi.grafana.inputs.GetUserArgs;
import com.pulumi.grafana.inputs.GetUserPlainArgs;
import com.pulumi.grafana.outputs.GetCloudIpsResult;
import com.pulumi.grafana.outputs.GetCloudOrganizationResult;
import com.pulumi.grafana.outputs.GetCloudStackResult;
import com.pulumi.grafana.outputs.GetDashboardResult;
import com.pulumi.grafana.outputs.GetDashboardsResult;
import com.pulumi.grafana.outputs.GetDataSourceResult;
import com.pulumi.grafana.outputs.GetFolderResult;
import com.pulumi.grafana.outputs.GetFoldersResult;
import com.pulumi.grafana.outputs.GetLibraryPanelResult;
import com.pulumi.grafana.outputs.GetOnCallSlackChannelResult;
import com.pulumi.grafana.outputs.GetOncallActionResult;
import com.pulumi.grafana.outputs.GetOncallEscalationChainResult;
import com.pulumi.grafana.outputs.GetOncallOutgoingWebhookResult;
import com.pulumi.grafana.outputs.GetOncallScheduleResult;
import com.pulumi.grafana.outputs.GetOncallTeamResult;
import com.pulumi.grafana.outputs.GetOncallUserGroupResult;
import com.pulumi.grafana.outputs.GetOncallUserResult;
import com.pulumi.grafana.outputs.GetOrganizationPreferencesResult;
import com.pulumi.grafana.outputs.GetOrganizationResult;
import com.pulumi.grafana.outputs.GetSlosResult;
import com.pulumi.grafana.outputs.GetSyntheticMonitoringProbeResult;
import com.pulumi.grafana.outputs.GetSyntheticMonitoringProbesResult;
import com.pulumi.grafana.outputs.GetTeamResult;
import com.pulumi.grafana.outputs.GetUserResult;
import com.pulumi.grafana.outputs.GetUsersResult;
import com.pulumi.resources.InvokeArgs;
import java.util.concurrent.CompletableFuture;

public final class GrafanaFunctions {
    /**
     * Data source for retrieving sets of cloud IPs. See https://grafana.com/docs/grafana-cloud/reference/allow-list/ for more info
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = GrafanaFunctions.getCloudIps();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetCloudIpsResult> getCloudIps() {
        return getCloudIps(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving sets of cloud IPs. See https://grafana.com/docs/grafana-cloud/reference/allow-list/ for more info
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = GrafanaFunctions.getCloudIps();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetCloudIpsResult> getCloudIpsPlain() {
        return getCloudIpsPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving sets of cloud IPs. See https://grafana.com/docs/grafana-cloud/reference/allow-list/ for more info
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = GrafanaFunctions.getCloudIps();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetCloudIpsResult> getCloudIps(InvokeArgs args) {
        return getCloudIps(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving sets of cloud IPs. See https://grafana.com/docs/grafana-cloud/reference/allow-list/ for more info
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = GrafanaFunctions.getCloudIps();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetCloudIpsResult> getCloudIpsPlain(InvokeArgs args) {
        return getCloudIpsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving sets of cloud IPs. See https://grafana.com/docs/grafana-cloud/reference/allow-list/ for more info
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = GrafanaFunctions.getCloudIps();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetCloudIpsResult> getCloudIps(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("grafana:index/getCloudIps:getCloudIps", TypeShape.of(GetCloudIpsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving sets of cloud IPs. See https://grafana.com/docs/grafana-cloud/reference/allow-list/ for more info
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = GrafanaFunctions.getCloudIps();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetCloudIpsResult> getCloudIpsPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("grafana:index/getCloudIps:getCloudIps", TypeShape.of(GetCloudIpsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetCloudOrganizationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = GrafanaFunctions.getCloudOrganization(GetCloudOrganizationArgs.builder()
     *             .name(&#34;my-org&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetCloudOrganizationResult> getCloudOrganization() {
        return getCloudOrganization(GetCloudOrganizationArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetCloudOrganizationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = GrafanaFunctions.getCloudOrganization(GetCloudOrganizationArgs.builder()
     *             .name(&#34;my-org&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetCloudOrganizationResult> getCloudOrganizationPlain() {
        return getCloudOrganizationPlain(GetCloudOrganizationPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetCloudOrganizationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = GrafanaFunctions.getCloudOrganization(GetCloudOrganizationArgs.builder()
     *             .name(&#34;my-org&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetCloudOrganizationResult> getCloudOrganization(GetCloudOrganizationArgs args) {
        return getCloudOrganization(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetCloudOrganizationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = GrafanaFunctions.getCloudOrganization(GetCloudOrganizationArgs.builder()
     *             .name(&#34;my-org&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetCloudOrganizationResult> getCloudOrganizationPlain(GetCloudOrganizationPlainArgs args) {
        return getCloudOrganizationPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetCloudOrganizationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = GrafanaFunctions.getCloudOrganization(GetCloudOrganizationArgs.builder()
     *             .name(&#34;my-org&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetCloudOrganizationResult> getCloudOrganization(GetCloudOrganizationArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("grafana:index/getCloudOrganization:getCloudOrganization", TypeShape.of(GetCloudOrganizationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetCloudOrganizationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = GrafanaFunctions.getCloudOrganization(GetCloudOrganizationArgs.builder()
     *             .name(&#34;my-org&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetCloudOrganizationResult> getCloudOrganizationPlain(GetCloudOrganizationPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("grafana:index/getCloudOrganization:getCloudOrganization", TypeShape.of(GetCloudOrganizationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for Grafana Stack
     * 
     */
    public static Output<GetCloudStackResult> getCloudStack(GetCloudStackArgs args) {
        return getCloudStack(args, InvokeOptions.Empty);
    }
    /**
     * Data source for Grafana Stack
     * 
     */
    public static CompletableFuture<GetCloudStackResult> getCloudStackPlain(GetCloudStackPlainArgs args) {
        return getCloudStackPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for Grafana Stack
     * 
     */
    public static Output<GetCloudStackResult> getCloudStack(GetCloudStackArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("grafana:index/getCloudStack:getCloudStack", TypeShape.of(GetCloudStackResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for Grafana Stack
     * 
     */
    public static CompletableFuture<GetCloudStackResult> getCloudStackPlain(GetCloudStackPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("grafana:index/getCloudStack:getCloudStack", TypeShape.of(GetCloudStackResult.class), args, Utilities.withVersion(options));
    }
    /**
     * * [Official documentation](https://grafana.com/docs/grafana/latest/dashboards/)
     * * [Folder/Dashboard Search HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/folder_dashboard_search/)
     * * [Dashboard HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/dashboard/)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.Dashboard;
     * import com.pulumi.grafana.DashboardArgs;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetDashboardArgs;
     * import static com.pulumi.codegen.internal.Serialization.*;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var test = new Dashboard(&#34;test&#34;, DashboardArgs.builder()        
     *             .configJson(serializeJson(
     *                 jsonObject(
     *                     jsonProperty(&#34;id&#34;, 12345),
     *                     jsonProperty(&#34;uid&#34;, &#34;test-ds-dashboard-uid&#34;),
     *                     jsonProperty(&#34;title&#34;, &#34;Production Overview&#34;),
     *                     jsonProperty(&#34;tags&#34;, jsonArray(&#34;templated&#34;)),
     *                     jsonProperty(&#34;timezone&#34;, &#34;browser&#34;),
     *                     jsonProperty(&#34;schemaVersion&#34;, 16),
     *                     jsonProperty(&#34;version&#34;, 0),
     *                     jsonProperty(&#34;refresh&#34;, &#34;25s&#34;)
     *                 )))
     *             .build());
     * 
     *         final var fromId = GrafanaFunctions.getDashboard(GetDashboardArgs.builder()
     *             .dashboardId(test.dashboardId())
     *             .build());
     * 
     *         final var fromUid = GrafanaFunctions.getDashboard(GetDashboardArgs.builder()
     *             .uid(&#34;test-ds-dashboard-uid&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetDashboardResult> getDashboard() {
        return getDashboard(GetDashboardArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * * [Official documentation](https://grafana.com/docs/grafana/latest/dashboards/)
     * * [Folder/Dashboard Search HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/folder_dashboard_search/)
     * * [Dashboard HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/dashboard/)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.Dashboard;
     * import com.pulumi.grafana.DashboardArgs;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetDashboardArgs;
     * import static com.pulumi.codegen.internal.Serialization.*;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var test = new Dashboard(&#34;test&#34;, DashboardArgs.builder()        
     *             .configJson(serializeJson(
     *                 jsonObject(
     *                     jsonProperty(&#34;id&#34;, 12345),
     *                     jsonProperty(&#34;uid&#34;, &#34;test-ds-dashboard-uid&#34;),
     *                     jsonProperty(&#34;title&#34;, &#34;Production Overview&#34;),
     *                     jsonProperty(&#34;tags&#34;, jsonArray(&#34;templated&#34;)),
     *                     jsonProperty(&#34;timezone&#34;, &#34;browser&#34;),
     *                     jsonProperty(&#34;schemaVersion&#34;, 16),
     *                     jsonProperty(&#34;version&#34;, 0),
     *                     jsonProperty(&#34;refresh&#34;, &#34;25s&#34;)
     *                 )))
     *             .build());
     * 
     *         final var fromId = GrafanaFunctions.getDashboard(GetDashboardArgs.builder()
     *             .dashboardId(test.dashboardId())
     *             .build());
     * 
     *         final var fromUid = GrafanaFunctions.getDashboard(GetDashboardArgs.builder()
     *             .uid(&#34;test-ds-dashboard-uid&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetDashboardResult> getDashboardPlain() {
        return getDashboardPlain(GetDashboardPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * * [Official documentation](https://grafana.com/docs/grafana/latest/dashboards/)
     * * [Folder/Dashboard Search HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/folder_dashboard_search/)
     * * [Dashboard HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/dashboard/)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.Dashboard;
     * import com.pulumi.grafana.DashboardArgs;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetDashboardArgs;
     * import static com.pulumi.codegen.internal.Serialization.*;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var test = new Dashboard(&#34;test&#34;, DashboardArgs.builder()        
     *             .configJson(serializeJson(
     *                 jsonObject(
     *                     jsonProperty(&#34;id&#34;, 12345),
     *                     jsonProperty(&#34;uid&#34;, &#34;test-ds-dashboard-uid&#34;),
     *                     jsonProperty(&#34;title&#34;, &#34;Production Overview&#34;),
     *                     jsonProperty(&#34;tags&#34;, jsonArray(&#34;templated&#34;)),
     *                     jsonProperty(&#34;timezone&#34;, &#34;browser&#34;),
     *                     jsonProperty(&#34;schemaVersion&#34;, 16),
     *                     jsonProperty(&#34;version&#34;, 0),
     *                     jsonProperty(&#34;refresh&#34;, &#34;25s&#34;)
     *                 )))
     *             .build());
     * 
     *         final var fromId = GrafanaFunctions.getDashboard(GetDashboardArgs.builder()
     *             .dashboardId(test.dashboardId())
     *             .build());
     * 
     *         final var fromUid = GrafanaFunctions.getDashboard(GetDashboardArgs.builder()
     *             .uid(&#34;test-ds-dashboard-uid&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetDashboardResult> getDashboard(GetDashboardArgs args) {
        return getDashboard(args, InvokeOptions.Empty);
    }
    /**
     * * [Official documentation](https://grafana.com/docs/grafana/latest/dashboards/)
     * * [Folder/Dashboard Search HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/folder_dashboard_search/)
     * * [Dashboard HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/dashboard/)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.Dashboard;
     * import com.pulumi.grafana.DashboardArgs;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetDashboardArgs;
     * import static com.pulumi.codegen.internal.Serialization.*;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var test = new Dashboard(&#34;test&#34;, DashboardArgs.builder()        
     *             .configJson(serializeJson(
     *                 jsonObject(
     *                     jsonProperty(&#34;id&#34;, 12345),
     *                     jsonProperty(&#34;uid&#34;, &#34;test-ds-dashboard-uid&#34;),
     *                     jsonProperty(&#34;title&#34;, &#34;Production Overview&#34;),
     *                     jsonProperty(&#34;tags&#34;, jsonArray(&#34;templated&#34;)),
     *                     jsonProperty(&#34;timezone&#34;, &#34;browser&#34;),
     *                     jsonProperty(&#34;schemaVersion&#34;, 16),
     *                     jsonProperty(&#34;version&#34;, 0),
     *                     jsonProperty(&#34;refresh&#34;, &#34;25s&#34;)
     *                 )))
     *             .build());
     * 
     *         final var fromId = GrafanaFunctions.getDashboard(GetDashboardArgs.builder()
     *             .dashboardId(test.dashboardId())
     *             .build());
     * 
     *         final var fromUid = GrafanaFunctions.getDashboard(GetDashboardArgs.builder()
     *             .uid(&#34;test-ds-dashboard-uid&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetDashboardResult> getDashboardPlain(GetDashboardPlainArgs args) {
        return getDashboardPlain(args, InvokeOptions.Empty);
    }
    /**
     * * [Official documentation](https://grafana.com/docs/grafana/latest/dashboards/)
     * * [Folder/Dashboard Search HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/folder_dashboard_search/)
     * * [Dashboard HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/dashboard/)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.Dashboard;
     * import com.pulumi.grafana.DashboardArgs;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetDashboardArgs;
     * import static com.pulumi.codegen.internal.Serialization.*;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var test = new Dashboard(&#34;test&#34;, DashboardArgs.builder()        
     *             .configJson(serializeJson(
     *                 jsonObject(
     *                     jsonProperty(&#34;id&#34;, 12345),
     *                     jsonProperty(&#34;uid&#34;, &#34;test-ds-dashboard-uid&#34;),
     *                     jsonProperty(&#34;title&#34;, &#34;Production Overview&#34;),
     *                     jsonProperty(&#34;tags&#34;, jsonArray(&#34;templated&#34;)),
     *                     jsonProperty(&#34;timezone&#34;, &#34;browser&#34;),
     *                     jsonProperty(&#34;schemaVersion&#34;, 16),
     *                     jsonProperty(&#34;version&#34;, 0),
     *                     jsonProperty(&#34;refresh&#34;, &#34;25s&#34;)
     *                 )))
     *             .build());
     * 
     *         final var fromId = GrafanaFunctions.getDashboard(GetDashboardArgs.builder()
     *             .dashboardId(test.dashboardId())
     *             .build());
     * 
     *         final var fromUid = GrafanaFunctions.getDashboard(GetDashboardArgs.builder()
     *             .uid(&#34;test-ds-dashboard-uid&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetDashboardResult> getDashboard(GetDashboardArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("grafana:index/getDashboard:getDashboard", TypeShape.of(GetDashboardResult.class), args, Utilities.withVersion(options));
    }
    /**
     * * [Official documentation](https://grafana.com/docs/grafana/latest/dashboards/)
     * * [Folder/Dashboard Search HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/folder_dashboard_search/)
     * * [Dashboard HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/dashboard/)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.Dashboard;
     * import com.pulumi.grafana.DashboardArgs;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetDashboardArgs;
     * import static com.pulumi.codegen.internal.Serialization.*;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var test = new Dashboard(&#34;test&#34;, DashboardArgs.builder()        
     *             .configJson(serializeJson(
     *                 jsonObject(
     *                     jsonProperty(&#34;id&#34;, 12345),
     *                     jsonProperty(&#34;uid&#34;, &#34;test-ds-dashboard-uid&#34;),
     *                     jsonProperty(&#34;title&#34;, &#34;Production Overview&#34;),
     *                     jsonProperty(&#34;tags&#34;, jsonArray(&#34;templated&#34;)),
     *                     jsonProperty(&#34;timezone&#34;, &#34;browser&#34;),
     *                     jsonProperty(&#34;schemaVersion&#34;, 16),
     *                     jsonProperty(&#34;version&#34;, 0),
     *                     jsonProperty(&#34;refresh&#34;, &#34;25s&#34;)
     *                 )))
     *             .build());
     * 
     *         final var fromId = GrafanaFunctions.getDashboard(GetDashboardArgs.builder()
     *             .dashboardId(test.dashboardId())
     *             .build());
     * 
     *         final var fromUid = GrafanaFunctions.getDashboard(GetDashboardArgs.builder()
     *             .uid(&#34;test-ds-dashboard-uid&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetDashboardResult> getDashboardPlain(GetDashboardPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("grafana:index/getDashboard:getDashboard", TypeShape.of(GetDashboardResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for retrieving all dashboards. Specify list of folder IDs to search in for dashboards.
     * 
     * * [Official documentation](https://grafana.com/docs/grafana/latest/dashboards/)
     * * [Folder/Dashboard Search HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/folder_dashboard_search/)
     * * [Dashboard HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/dashboard/)
     * 
     */
    public static Output<GetDashboardsResult> getDashboards() {
        return getDashboards(GetDashboardsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Datasource for retrieving all dashboards. Specify list of folder IDs to search in for dashboards.
     * 
     * * [Official documentation](https://grafana.com/docs/grafana/latest/dashboards/)
     * * [Folder/Dashboard Search HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/folder_dashboard_search/)
     * * [Dashboard HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/dashboard/)
     * 
     */
    public static CompletableFuture<GetDashboardsResult> getDashboardsPlain() {
        return getDashboardsPlain(GetDashboardsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Datasource for retrieving all dashboards. Specify list of folder IDs to search in for dashboards.
     * 
     * * [Official documentation](https://grafana.com/docs/grafana/latest/dashboards/)
     * * [Folder/Dashboard Search HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/folder_dashboard_search/)
     * * [Dashboard HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/dashboard/)
     * 
     */
    public static Output<GetDashboardsResult> getDashboards(GetDashboardsArgs args) {
        return getDashboards(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for retrieving all dashboards. Specify list of folder IDs to search in for dashboards.
     * 
     * * [Official documentation](https://grafana.com/docs/grafana/latest/dashboards/)
     * * [Folder/Dashboard Search HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/folder_dashboard_search/)
     * * [Dashboard HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/dashboard/)
     * 
     */
    public static CompletableFuture<GetDashboardsResult> getDashboardsPlain(GetDashboardsPlainArgs args) {
        return getDashboardsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for retrieving all dashboards. Specify list of folder IDs to search in for dashboards.
     * 
     * * [Official documentation](https://grafana.com/docs/grafana/latest/dashboards/)
     * * [Folder/Dashboard Search HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/folder_dashboard_search/)
     * * [Dashboard HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/dashboard/)
     * 
     */
    public static Output<GetDashboardsResult> getDashboards(GetDashboardsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("grafana:index/getDashboards:getDashboards", TypeShape.of(GetDashboardsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for retrieving all dashboards. Specify list of folder IDs to search in for dashboards.
     * 
     * * [Official documentation](https://grafana.com/docs/grafana/latest/dashboards/)
     * * [Folder/Dashboard Search HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/folder_dashboard_search/)
     * * [Dashboard HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/dashboard/)
     * 
     */
    public static CompletableFuture<GetDashboardsResult> getDashboardsPlain(GetDashboardsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("grafana:index/getDashboards:getDashboards", TypeShape.of(GetDashboardsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get details about a Grafana Datasource querying by either name, uid or ID
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.DataSource;
     * import com.pulumi.grafana.DataSourceArgs;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetDataSourceArgs;
     * import static com.pulumi.codegen.internal.Serialization.*;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var prometheus = new DataSource(&#34;prometheus&#34;, DataSourceArgs.builder()        
     *             .type(&#34;prometheus&#34;)
     *             .uid(&#34;prometheus-ds-test-uid&#34;)
     *             .url(&#34;https://my-instance.com&#34;)
     *             .basicAuthEnabled(true)
     *             .basicAuthUsername(&#34;username&#34;)
     *             .jsonDataEncoded(serializeJson(
     *                 jsonObject(
     *                     jsonProperty(&#34;httpMethod&#34;, &#34;POST&#34;),
     *                     jsonProperty(&#34;prometheusType&#34;, &#34;Mimir&#34;),
     *                     jsonProperty(&#34;prometheusVersion&#34;, &#34;2.4.0&#34;)
     *                 )))
     *             .secureJsonDataEncoded(serializeJson(
     *                 jsonObject(
     *                     jsonProperty(&#34;basicAuthPassword&#34;, &#34;password&#34;)
     *                 )))
     *             .build());
     * 
     *         final var fromName = GrafanaFunctions.getDataSource(GetDataSourceArgs.builder()
     *             .name(prometheus.name())
     *             .build());
     * 
     *         final var fromId = GrafanaFunctions.getDataSource(GetDataSourceArgs.builder()
     *             .id(prometheus.id())
     *             .build());
     * 
     *         final var fromUid = GrafanaFunctions.getDataSource(GetDataSourceArgs.builder()
     *             .uid(prometheus.uid())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetDataSourceResult> getDataSource() {
        return getDataSource(GetDataSourceArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Get details about a Grafana Datasource querying by either name, uid or ID
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.DataSource;
     * import com.pulumi.grafana.DataSourceArgs;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetDataSourceArgs;
     * import static com.pulumi.codegen.internal.Serialization.*;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var prometheus = new DataSource(&#34;prometheus&#34;, DataSourceArgs.builder()        
     *             .type(&#34;prometheus&#34;)
     *             .uid(&#34;prometheus-ds-test-uid&#34;)
     *             .url(&#34;https://my-instance.com&#34;)
     *             .basicAuthEnabled(true)
     *             .basicAuthUsername(&#34;username&#34;)
     *             .jsonDataEncoded(serializeJson(
     *                 jsonObject(
     *                     jsonProperty(&#34;httpMethod&#34;, &#34;POST&#34;),
     *                     jsonProperty(&#34;prometheusType&#34;, &#34;Mimir&#34;),
     *                     jsonProperty(&#34;prometheusVersion&#34;, &#34;2.4.0&#34;)
     *                 )))
     *             .secureJsonDataEncoded(serializeJson(
     *                 jsonObject(
     *                     jsonProperty(&#34;basicAuthPassword&#34;, &#34;password&#34;)
     *                 )))
     *             .build());
     * 
     *         final var fromName = GrafanaFunctions.getDataSource(GetDataSourceArgs.builder()
     *             .name(prometheus.name())
     *             .build());
     * 
     *         final var fromId = GrafanaFunctions.getDataSource(GetDataSourceArgs.builder()
     *             .id(prometheus.id())
     *             .build());
     * 
     *         final var fromUid = GrafanaFunctions.getDataSource(GetDataSourceArgs.builder()
     *             .uid(prometheus.uid())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetDataSourceResult> getDataSourcePlain() {
        return getDataSourcePlain(GetDataSourcePlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Get details about a Grafana Datasource querying by either name, uid or ID
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.DataSource;
     * import com.pulumi.grafana.DataSourceArgs;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetDataSourceArgs;
     * import static com.pulumi.codegen.internal.Serialization.*;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var prometheus = new DataSource(&#34;prometheus&#34;, DataSourceArgs.builder()        
     *             .type(&#34;prometheus&#34;)
     *             .uid(&#34;prometheus-ds-test-uid&#34;)
     *             .url(&#34;https://my-instance.com&#34;)
     *             .basicAuthEnabled(true)
     *             .basicAuthUsername(&#34;username&#34;)
     *             .jsonDataEncoded(serializeJson(
     *                 jsonObject(
     *                     jsonProperty(&#34;httpMethod&#34;, &#34;POST&#34;),
     *                     jsonProperty(&#34;prometheusType&#34;, &#34;Mimir&#34;),
     *                     jsonProperty(&#34;prometheusVersion&#34;, &#34;2.4.0&#34;)
     *                 )))
     *             .secureJsonDataEncoded(serializeJson(
     *                 jsonObject(
     *                     jsonProperty(&#34;basicAuthPassword&#34;, &#34;password&#34;)
     *                 )))
     *             .build());
     * 
     *         final var fromName = GrafanaFunctions.getDataSource(GetDataSourceArgs.builder()
     *             .name(prometheus.name())
     *             .build());
     * 
     *         final var fromId = GrafanaFunctions.getDataSource(GetDataSourceArgs.builder()
     *             .id(prometheus.id())
     *             .build());
     * 
     *         final var fromUid = GrafanaFunctions.getDataSource(GetDataSourceArgs.builder()
     *             .uid(prometheus.uid())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetDataSourceResult> getDataSource(GetDataSourceArgs args) {
        return getDataSource(args, InvokeOptions.Empty);
    }
    /**
     * Get details about a Grafana Datasource querying by either name, uid or ID
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.DataSource;
     * import com.pulumi.grafana.DataSourceArgs;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetDataSourceArgs;
     * import static com.pulumi.codegen.internal.Serialization.*;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var prometheus = new DataSource(&#34;prometheus&#34;, DataSourceArgs.builder()        
     *             .type(&#34;prometheus&#34;)
     *             .uid(&#34;prometheus-ds-test-uid&#34;)
     *             .url(&#34;https://my-instance.com&#34;)
     *             .basicAuthEnabled(true)
     *             .basicAuthUsername(&#34;username&#34;)
     *             .jsonDataEncoded(serializeJson(
     *                 jsonObject(
     *                     jsonProperty(&#34;httpMethod&#34;, &#34;POST&#34;),
     *                     jsonProperty(&#34;prometheusType&#34;, &#34;Mimir&#34;),
     *                     jsonProperty(&#34;prometheusVersion&#34;, &#34;2.4.0&#34;)
     *                 )))
     *             .secureJsonDataEncoded(serializeJson(
     *                 jsonObject(
     *                     jsonProperty(&#34;basicAuthPassword&#34;, &#34;password&#34;)
     *                 )))
     *             .build());
     * 
     *         final var fromName = GrafanaFunctions.getDataSource(GetDataSourceArgs.builder()
     *             .name(prometheus.name())
     *             .build());
     * 
     *         final var fromId = GrafanaFunctions.getDataSource(GetDataSourceArgs.builder()
     *             .id(prometheus.id())
     *             .build());
     * 
     *         final var fromUid = GrafanaFunctions.getDataSource(GetDataSourceArgs.builder()
     *             .uid(prometheus.uid())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetDataSourceResult> getDataSourcePlain(GetDataSourcePlainArgs args) {
        return getDataSourcePlain(args, InvokeOptions.Empty);
    }
    /**
     * Get details about a Grafana Datasource querying by either name, uid or ID
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.DataSource;
     * import com.pulumi.grafana.DataSourceArgs;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetDataSourceArgs;
     * import static com.pulumi.codegen.internal.Serialization.*;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var prometheus = new DataSource(&#34;prometheus&#34;, DataSourceArgs.builder()        
     *             .type(&#34;prometheus&#34;)
     *             .uid(&#34;prometheus-ds-test-uid&#34;)
     *             .url(&#34;https://my-instance.com&#34;)
     *             .basicAuthEnabled(true)
     *             .basicAuthUsername(&#34;username&#34;)
     *             .jsonDataEncoded(serializeJson(
     *                 jsonObject(
     *                     jsonProperty(&#34;httpMethod&#34;, &#34;POST&#34;),
     *                     jsonProperty(&#34;prometheusType&#34;, &#34;Mimir&#34;),
     *                     jsonProperty(&#34;prometheusVersion&#34;, &#34;2.4.0&#34;)
     *                 )))
     *             .secureJsonDataEncoded(serializeJson(
     *                 jsonObject(
     *                     jsonProperty(&#34;basicAuthPassword&#34;, &#34;password&#34;)
     *                 )))
     *             .build());
     * 
     *         final var fromName = GrafanaFunctions.getDataSource(GetDataSourceArgs.builder()
     *             .name(prometheus.name())
     *             .build());
     * 
     *         final var fromId = GrafanaFunctions.getDataSource(GetDataSourceArgs.builder()
     *             .id(prometheus.id())
     *             .build());
     * 
     *         final var fromUid = GrafanaFunctions.getDataSource(GetDataSourceArgs.builder()
     *             .uid(prometheus.uid())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetDataSourceResult> getDataSource(GetDataSourceArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("grafana:index/getDataSource:getDataSource", TypeShape.of(GetDataSourceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get details about a Grafana Datasource querying by either name, uid or ID
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.DataSource;
     * import com.pulumi.grafana.DataSourceArgs;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetDataSourceArgs;
     * import static com.pulumi.codegen.internal.Serialization.*;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var prometheus = new DataSource(&#34;prometheus&#34;, DataSourceArgs.builder()        
     *             .type(&#34;prometheus&#34;)
     *             .uid(&#34;prometheus-ds-test-uid&#34;)
     *             .url(&#34;https://my-instance.com&#34;)
     *             .basicAuthEnabled(true)
     *             .basicAuthUsername(&#34;username&#34;)
     *             .jsonDataEncoded(serializeJson(
     *                 jsonObject(
     *                     jsonProperty(&#34;httpMethod&#34;, &#34;POST&#34;),
     *                     jsonProperty(&#34;prometheusType&#34;, &#34;Mimir&#34;),
     *                     jsonProperty(&#34;prometheusVersion&#34;, &#34;2.4.0&#34;)
     *                 )))
     *             .secureJsonDataEncoded(serializeJson(
     *                 jsonObject(
     *                     jsonProperty(&#34;basicAuthPassword&#34;, &#34;password&#34;)
     *                 )))
     *             .build());
     * 
     *         final var fromName = GrafanaFunctions.getDataSource(GetDataSourceArgs.builder()
     *             .name(prometheus.name())
     *             .build());
     * 
     *         final var fromId = GrafanaFunctions.getDataSource(GetDataSourceArgs.builder()
     *             .id(prometheus.id())
     *             .build());
     * 
     *         final var fromUid = GrafanaFunctions.getDataSource(GetDataSourceArgs.builder()
     *             .uid(prometheus.uid())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetDataSourceResult> getDataSourcePlain(GetDataSourcePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("grafana:index/getDataSource:getDataSource", TypeShape.of(GetDataSourceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * * [Official documentation](https://grafana.com/docs/grafana/latest/dashboards/manage-dashboards/)
     * * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/folder/)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.Folder;
     * import com.pulumi.grafana.FolderArgs;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetFolderArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var test = new Folder(&#34;test&#34;, FolderArgs.builder()        
     *             .title(&#34;test-folder&#34;)
     *             .uid(&#34;test-ds-folder-uid&#34;)
     *             .build());
     * 
     *         final var fromTitle = GrafanaFunctions.getFolder(GetFolderArgs.builder()
     *             .title(test.title())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFolderResult> getFolder(GetFolderArgs args) {
        return getFolder(args, InvokeOptions.Empty);
    }
    /**
     * * [Official documentation](https://grafana.com/docs/grafana/latest/dashboards/manage-dashboards/)
     * * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/folder/)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.Folder;
     * import com.pulumi.grafana.FolderArgs;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetFolderArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var test = new Folder(&#34;test&#34;, FolderArgs.builder()        
     *             .title(&#34;test-folder&#34;)
     *             .uid(&#34;test-ds-folder-uid&#34;)
     *             .build());
     * 
     *         final var fromTitle = GrafanaFunctions.getFolder(GetFolderArgs.builder()
     *             .title(test.title())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFolderResult> getFolderPlain(GetFolderPlainArgs args) {
        return getFolderPlain(args, InvokeOptions.Empty);
    }
    /**
     * * [Official documentation](https://grafana.com/docs/grafana/latest/dashboards/manage-dashboards/)
     * * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/folder/)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.Folder;
     * import com.pulumi.grafana.FolderArgs;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetFolderArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var test = new Folder(&#34;test&#34;, FolderArgs.builder()        
     *             .title(&#34;test-folder&#34;)
     *             .uid(&#34;test-ds-folder-uid&#34;)
     *             .build());
     * 
     *         final var fromTitle = GrafanaFunctions.getFolder(GetFolderArgs.builder()
     *             .title(test.title())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFolderResult> getFolder(GetFolderArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("grafana:index/getFolder:getFolder", TypeShape.of(GetFolderResult.class), args, Utilities.withVersion(options));
    }
    /**
     * * [Official documentation](https://grafana.com/docs/grafana/latest/dashboards/manage-dashboards/)
     * * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/folder/)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.Folder;
     * import com.pulumi.grafana.FolderArgs;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetFolderArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var test = new Folder(&#34;test&#34;, FolderArgs.builder()        
     *             .title(&#34;test-folder&#34;)
     *             .uid(&#34;test-ds-folder-uid&#34;)
     *             .build());
     * 
     *         final var fromTitle = GrafanaFunctions.getFolder(GetFolderArgs.builder()
     *             .title(test.title())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFolderResult> getFolderPlain(GetFolderPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("grafana:index/getFolder:getFolder", TypeShape.of(GetFolderResult.class), args, Utilities.withVersion(options));
    }
    /**
     * * [Official documentation](https://grafana.com/docs/grafana/latest/dashboards/manage-dashboards/)
     * * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/folder/)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.Folder;
     * import com.pulumi.grafana.FolderArgs;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testA = new Folder(&#34;testA&#34;, FolderArgs.builder()        
     *             .title(&#34;test-folder-a&#34;)
     *             .uid(&#34;test-ds-folder-uid-a&#34;)
     *             .build());
     * 
     *         var testB = new Folder(&#34;testB&#34;, FolderArgs.builder()        
     *             .title(&#34;test-folder-b&#34;)
     *             .uid(&#34;test-ds-folder-uid-b&#34;)
     *             .build());
     * 
     *         final var test = GrafanaFunctions.getFolders();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFoldersResult> getFolders() {
        return getFolders(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * * [Official documentation](https://grafana.com/docs/grafana/latest/dashboards/manage-dashboards/)
     * * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/folder/)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.Folder;
     * import com.pulumi.grafana.FolderArgs;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testA = new Folder(&#34;testA&#34;, FolderArgs.builder()        
     *             .title(&#34;test-folder-a&#34;)
     *             .uid(&#34;test-ds-folder-uid-a&#34;)
     *             .build());
     * 
     *         var testB = new Folder(&#34;testB&#34;, FolderArgs.builder()        
     *             .title(&#34;test-folder-b&#34;)
     *             .uid(&#34;test-ds-folder-uid-b&#34;)
     *             .build());
     * 
     *         final var test = GrafanaFunctions.getFolders();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFoldersResult> getFoldersPlain() {
        return getFoldersPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * * [Official documentation](https://grafana.com/docs/grafana/latest/dashboards/manage-dashboards/)
     * * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/folder/)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.Folder;
     * import com.pulumi.grafana.FolderArgs;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testA = new Folder(&#34;testA&#34;, FolderArgs.builder()        
     *             .title(&#34;test-folder-a&#34;)
     *             .uid(&#34;test-ds-folder-uid-a&#34;)
     *             .build());
     * 
     *         var testB = new Folder(&#34;testB&#34;, FolderArgs.builder()        
     *             .title(&#34;test-folder-b&#34;)
     *             .uid(&#34;test-ds-folder-uid-b&#34;)
     *             .build());
     * 
     *         final var test = GrafanaFunctions.getFolders();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFoldersResult> getFolders(InvokeArgs args) {
        return getFolders(args, InvokeOptions.Empty);
    }
    /**
     * * [Official documentation](https://grafana.com/docs/grafana/latest/dashboards/manage-dashboards/)
     * * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/folder/)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.Folder;
     * import com.pulumi.grafana.FolderArgs;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testA = new Folder(&#34;testA&#34;, FolderArgs.builder()        
     *             .title(&#34;test-folder-a&#34;)
     *             .uid(&#34;test-ds-folder-uid-a&#34;)
     *             .build());
     * 
     *         var testB = new Folder(&#34;testB&#34;, FolderArgs.builder()        
     *             .title(&#34;test-folder-b&#34;)
     *             .uid(&#34;test-ds-folder-uid-b&#34;)
     *             .build());
     * 
     *         final var test = GrafanaFunctions.getFolders();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFoldersResult> getFoldersPlain(InvokeArgs args) {
        return getFoldersPlain(args, InvokeOptions.Empty);
    }
    /**
     * * [Official documentation](https://grafana.com/docs/grafana/latest/dashboards/manage-dashboards/)
     * * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/folder/)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.Folder;
     * import com.pulumi.grafana.FolderArgs;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testA = new Folder(&#34;testA&#34;, FolderArgs.builder()        
     *             .title(&#34;test-folder-a&#34;)
     *             .uid(&#34;test-ds-folder-uid-a&#34;)
     *             .build());
     * 
     *         var testB = new Folder(&#34;testB&#34;, FolderArgs.builder()        
     *             .title(&#34;test-folder-b&#34;)
     *             .uid(&#34;test-ds-folder-uid-b&#34;)
     *             .build());
     * 
     *         final var test = GrafanaFunctions.getFolders();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFoldersResult> getFolders(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("grafana:index/getFolders:getFolders", TypeShape.of(GetFoldersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * * [Official documentation](https://grafana.com/docs/grafana/latest/dashboards/manage-dashboards/)
     * * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/folder/)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.Folder;
     * import com.pulumi.grafana.FolderArgs;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testA = new Folder(&#34;testA&#34;, FolderArgs.builder()        
     *             .title(&#34;test-folder-a&#34;)
     *             .uid(&#34;test-ds-folder-uid-a&#34;)
     *             .build());
     * 
     *         var testB = new Folder(&#34;testB&#34;, FolderArgs.builder()        
     *             .title(&#34;test-folder-b&#34;)
     *             .uid(&#34;test-ds-folder-uid-b&#34;)
     *             .build());
     * 
     *         final var test = GrafanaFunctions.getFolders();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFoldersResult> getFoldersPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("grafana:index/getFolders:getFolders", TypeShape.of(GetFoldersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a single library panel by name or uid.
     * 
     */
    public static Output<GetLibraryPanelResult> getLibraryPanel() {
        return getLibraryPanel(GetLibraryPanelArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a single library panel by name or uid.
     * 
     */
    public static CompletableFuture<GetLibraryPanelResult> getLibraryPanelPlain() {
        return getLibraryPanelPlain(GetLibraryPanelPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a single library panel by name or uid.
     * 
     */
    public static Output<GetLibraryPanelResult> getLibraryPanel(GetLibraryPanelArgs args) {
        return getLibraryPanel(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a single library panel by name or uid.
     * 
     */
    public static CompletableFuture<GetLibraryPanelResult> getLibraryPanelPlain(GetLibraryPanelPlainArgs args) {
        return getLibraryPanelPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a single library panel by name or uid.
     * 
     */
    public static Output<GetLibraryPanelResult> getLibraryPanel(GetLibraryPanelArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("grafana:index/getLibraryPanel:getLibraryPanel", TypeShape.of(GetLibraryPanelResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a single library panel by name or uid.
     * 
     */
    public static CompletableFuture<GetLibraryPanelResult> getLibraryPanelPlain(GetLibraryPanelPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("grafana:index/getLibraryPanel:getLibraryPanel", TypeShape.of(GetLibraryPanelResult.class), args, Utilities.withVersion(options));
    }
    /**
     * * [HTTP API](https://grafana.com/docs/oncall/latest/oncall-api-reference/slack_channels/)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetOnCallSlackChannelArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleSlackChannel = GrafanaFunctions.getOnCallSlackChannel(GetOnCallSlackChannelArgs.builder()
     *             .name(&#34;example_slack_channel&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetOnCallSlackChannelResult> getOnCallSlackChannel(GetOnCallSlackChannelArgs args) {
        return getOnCallSlackChannel(args, InvokeOptions.Empty);
    }
    /**
     * * [HTTP API](https://grafana.com/docs/oncall/latest/oncall-api-reference/slack_channels/)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetOnCallSlackChannelArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleSlackChannel = GrafanaFunctions.getOnCallSlackChannel(GetOnCallSlackChannelArgs.builder()
     *             .name(&#34;example_slack_channel&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetOnCallSlackChannelResult> getOnCallSlackChannelPlain(GetOnCallSlackChannelPlainArgs args) {
        return getOnCallSlackChannelPlain(args, InvokeOptions.Empty);
    }
    /**
     * * [HTTP API](https://grafana.com/docs/oncall/latest/oncall-api-reference/slack_channels/)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetOnCallSlackChannelArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleSlackChannel = GrafanaFunctions.getOnCallSlackChannel(GetOnCallSlackChannelArgs.builder()
     *             .name(&#34;example_slack_channel&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetOnCallSlackChannelResult> getOnCallSlackChannel(GetOnCallSlackChannelArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("grafana:index/getOnCallSlackChannel:getOnCallSlackChannel", TypeShape.of(GetOnCallSlackChannelResult.class), args, Utilities.withVersion(options));
    }
    /**
     * * [HTTP API](https://grafana.com/docs/oncall/latest/oncall-api-reference/slack_channels/)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetOnCallSlackChannelArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleSlackChannel = GrafanaFunctions.getOnCallSlackChannel(GetOnCallSlackChannelArgs.builder()
     *             .name(&#34;example_slack_channel&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetOnCallSlackChannelResult> getOnCallSlackChannelPlain(GetOnCallSlackChannelPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("grafana:index/getOnCallSlackChannel:getOnCallSlackChannel", TypeShape.of(GetOnCallSlackChannelResult.class), args, Utilities.withVersion(options));
    }
    /**
     * **Note:** This data source is going to be deprecated, please use outgoing webhook data source instead.
     * * [HTTP API](https://grafana.com/docs/oncall/latest/oncall-api-reference/outgoing_webhooks/)
     * 
     * !&gt; Deprecated: Use the `grafana.OncallOutgoingWebhook` data source instead.
     * 
     */
    public static Output<GetOncallActionResult> getOncallAction(GetOncallActionArgs args) {
        return getOncallAction(args, InvokeOptions.Empty);
    }
    /**
     * **Note:** This data source is going to be deprecated, please use outgoing webhook data source instead.
     * * [HTTP API](https://grafana.com/docs/oncall/latest/oncall-api-reference/outgoing_webhooks/)
     * 
     * !&gt; Deprecated: Use the `grafana.OncallOutgoingWebhook` data source instead.
     * 
     */
    public static CompletableFuture<GetOncallActionResult> getOncallActionPlain(GetOncallActionPlainArgs args) {
        return getOncallActionPlain(args, InvokeOptions.Empty);
    }
    /**
     * **Note:** This data source is going to be deprecated, please use outgoing webhook data source instead.
     * * [HTTP API](https://grafana.com/docs/oncall/latest/oncall-api-reference/outgoing_webhooks/)
     * 
     * !&gt; Deprecated: Use the `grafana.OncallOutgoingWebhook` data source instead.
     * 
     */
    public static Output<GetOncallActionResult> getOncallAction(GetOncallActionArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("grafana:index/getOncallAction:getOncallAction", TypeShape.of(GetOncallActionResult.class), args, Utilities.withVersion(options));
    }
    /**
     * **Note:** This data source is going to be deprecated, please use outgoing webhook data source instead.
     * * [HTTP API](https://grafana.com/docs/oncall/latest/oncall-api-reference/outgoing_webhooks/)
     * 
     * !&gt; Deprecated: Use the `grafana.OncallOutgoingWebhook` data source instead.
     * 
     */
    public static CompletableFuture<GetOncallActionResult> getOncallActionPlain(GetOncallActionPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("grafana:index/getOncallAction:getOncallAction", TypeShape.of(GetOncallActionResult.class), args, Utilities.withVersion(options));
    }
    /**
     * * [HTTP API](https://grafana.com/docs/oncall/latest/oncall-api-reference/escalation_chains/)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetOncallEscalationChainArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = GrafanaFunctions.getOncallEscalationChain(GetOncallEscalationChainArgs.builder()
     *             .name(&#34;default&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetOncallEscalationChainResult> getOncallEscalationChain(GetOncallEscalationChainArgs args) {
        return getOncallEscalationChain(args, InvokeOptions.Empty);
    }
    /**
     * * [HTTP API](https://grafana.com/docs/oncall/latest/oncall-api-reference/escalation_chains/)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetOncallEscalationChainArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = GrafanaFunctions.getOncallEscalationChain(GetOncallEscalationChainArgs.builder()
     *             .name(&#34;default&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetOncallEscalationChainResult> getOncallEscalationChainPlain(GetOncallEscalationChainPlainArgs args) {
        return getOncallEscalationChainPlain(args, InvokeOptions.Empty);
    }
    /**
     * * [HTTP API](https://grafana.com/docs/oncall/latest/oncall-api-reference/escalation_chains/)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetOncallEscalationChainArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = GrafanaFunctions.getOncallEscalationChain(GetOncallEscalationChainArgs.builder()
     *             .name(&#34;default&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetOncallEscalationChainResult> getOncallEscalationChain(GetOncallEscalationChainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("grafana:index/getOncallEscalationChain:getOncallEscalationChain", TypeShape.of(GetOncallEscalationChainResult.class), args, Utilities.withVersion(options));
    }
    /**
     * * [HTTP API](https://grafana.com/docs/oncall/latest/oncall-api-reference/escalation_chains/)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetOncallEscalationChainArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = GrafanaFunctions.getOncallEscalationChain(GetOncallEscalationChainArgs.builder()
     *             .name(&#34;default&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetOncallEscalationChainResult> getOncallEscalationChainPlain(GetOncallEscalationChainPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("grafana:index/getOncallEscalationChain:getOncallEscalationChain", TypeShape.of(GetOncallEscalationChainResult.class), args, Utilities.withVersion(options));
    }
    /**
     * * [HTTP API](https://grafana.com/docs/oncall/latest/oncall-api-reference/outgoing_webhooks/)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetOncallOutgoingWebhookArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleOutgoingWebhook = GrafanaFunctions.getOncallOutgoingWebhook(GetOncallOutgoingWebhookArgs.builder()
     *             .name(&#34;example_outgoing_webhook&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetOncallOutgoingWebhookResult> getOncallOutgoingWebhook(GetOncallOutgoingWebhookArgs args) {
        return getOncallOutgoingWebhook(args, InvokeOptions.Empty);
    }
    /**
     * * [HTTP API](https://grafana.com/docs/oncall/latest/oncall-api-reference/outgoing_webhooks/)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetOncallOutgoingWebhookArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleOutgoingWebhook = GrafanaFunctions.getOncallOutgoingWebhook(GetOncallOutgoingWebhookArgs.builder()
     *             .name(&#34;example_outgoing_webhook&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetOncallOutgoingWebhookResult> getOncallOutgoingWebhookPlain(GetOncallOutgoingWebhookPlainArgs args) {
        return getOncallOutgoingWebhookPlain(args, InvokeOptions.Empty);
    }
    /**
     * * [HTTP API](https://grafana.com/docs/oncall/latest/oncall-api-reference/outgoing_webhooks/)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetOncallOutgoingWebhookArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleOutgoingWebhook = GrafanaFunctions.getOncallOutgoingWebhook(GetOncallOutgoingWebhookArgs.builder()
     *             .name(&#34;example_outgoing_webhook&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetOncallOutgoingWebhookResult> getOncallOutgoingWebhook(GetOncallOutgoingWebhookArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("grafana:index/getOncallOutgoingWebhook:getOncallOutgoingWebhook", TypeShape.of(GetOncallOutgoingWebhookResult.class), args, Utilities.withVersion(options));
    }
    /**
     * * [HTTP API](https://grafana.com/docs/oncall/latest/oncall-api-reference/outgoing_webhooks/)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetOncallOutgoingWebhookArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleOutgoingWebhook = GrafanaFunctions.getOncallOutgoingWebhook(GetOncallOutgoingWebhookArgs.builder()
     *             .name(&#34;example_outgoing_webhook&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetOncallOutgoingWebhookResult> getOncallOutgoingWebhookPlain(GetOncallOutgoingWebhookPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("grafana:index/getOncallOutgoingWebhook:getOncallOutgoingWebhook", TypeShape.of(GetOncallOutgoingWebhookResult.class), args, Utilities.withVersion(options));
    }
    /**
     * * [Official documentation](https://grafana.com/docs/oncall/latest/on-call-schedules/)
     * * [HTTP API](https://grafana.com/docs/oncall/latest/oncall-api-reference/schedules/)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetOncallScheduleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var schedule = GrafanaFunctions.getOncallSchedule(GetOncallScheduleArgs.builder()
     *             .name(&#34;example_schedule&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetOncallScheduleResult> getOncallSchedule(GetOncallScheduleArgs args) {
        return getOncallSchedule(args, InvokeOptions.Empty);
    }
    /**
     * * [Official documentation](https://grafana.com/docs/oncall/latest/on-call-schedules/)
     * * [HTTP API](https://grafana.com/docs/oncall/latest/oncall-api-reference/schedules/)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetOncallScheduleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var schedule = GrafanaFunctions.getOncallSchedule(GetOncallScheduleArgs.builder()
     *             .name(&#34;example_schedule&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetOncallScheduleResult> getOncallSchedulePlain(GetOncallSchedulePlainArgs args) {
        return getOncallSchedulePlain(args, InvokeOptions.Empty);
    }
    /**
     * * [Official documentation](https://grafana.com/docs/oncall/latest/on-call-schedules/)
     * * [HTTP API](https://grafana.com/docs/oncall/latest/oncall-api-reference/schedules/)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetOncallScheduleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var schedule = GrafanaFunctions.getOncallSchedule(GetOncallScheduleArgs.builder()
     *             .name(&#34;example_schedule&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetOncallScheduleResult> getOncallSchedule(GetOncallScheduleArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("grafana:index/getOncallSchedule:getOncallSchedule", TypeShape.of(GetOncallScheduleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * * [Official documentation](https://grafana.com/docs/oncall/latest/on-call-schedules/)
     * * [HTTP API](https://grafana.com/docs/oncall/latest/oncall-api-reference/schedules/)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetOncallScheduleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var schedule = GrafanaFunctions.getOncallSchedule(GetOncallScheduleArgs.builder()
     *             .name(&#34;example_schedule&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetOncallScheduleResult> getOncallSchedulePlain(GetOncallSchedulePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("grafana:index/getOncallSchedule:getOncallSchedule", TypeShape.of(GetOncallScheduleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetOncallTeamArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleTeam = GrafanaFunctions.getOncallTeam(GetOncallTeamArgs.builder()
     *             .name(&#34;example_team&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetOncallTeamResult> getOncallTeam(GetOncallTeamArgs args) {
        return getOncallTeam(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetOncallTeamArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleTeam = GrafanaFunctions.getOncallTeam(GetOncallTeamArgs.builder()
     *             .name(&#34;example_team&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetOncallTeamResult> getOncallTeamPlain(GetOncallTeamPlainArgs args) {
        return getOncallTeamPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetOncallTeamArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleTeam = GrafanaFunctions.getOncallTeam(GetOncallTeamArgs.builder()
     *             .name(&#34;example_team&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetOncallTeamResult> getOncallTeam(GetOncallTeamArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("grafana:index/getOncallTeam:getOncallTeam", TypeShape.of(GetOncallTeamResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetOncallTeamArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleTeam = GrafanaFunctions.getOncallTeam(GetOncallTeamArgs.builder()
     *             .name(&#34;example_team&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetOncallTeamResult> getOncallTeamPlain(GetOncallTeamPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("grafana:index/getOncallTeam:getOncallTeam", TypeShape.of(GetOncallTeamResult.class), args, Utilities.withVersion(options));
    }
    /**
     * * [HTTP API](https://grafana.com/docs/oncall/latest/oncall-api-reference/users/)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetOncallUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var alex = GrafanaFunctions.getOncallUser(GetOncallUserArgs.builder()
     *             .username(&#34;alex&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetOncallUserResult> getOncallUser(GetOncallUserArgs args) {
        return getOncallUser(args, InvokeOptions.Empty);
    }
    /**
     * * [HTTP API](https://grafana.com/docs/oncall/latest/oncall-api-reference/users/)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetOncallUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var alex = GrafanaFunctions.getOncallUser(GetOncallUserArgs.builder()
     *             .username(&#34;alex&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetOncallUserResult> getOncallUserPlain(GetOncallUserPlainArgs args) {
        return getOncallUserPlain(args, InvokeOptions.Empty);
    }
    /**
     * * [HTTP API](https://grafana.com/docs/oncall/latest/oncall-api-reference/users/)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetOncallUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var alex = GrafanaFunctions.getOncallUser(GetOncallUserArgs.builder()
     *             .username(&#34;alex&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetOncallUserResult> getOncallUser(GetOncallUserArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("grafana:index/getOncallUser:getOncallUser", TypeShape.of(GetOncallUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * * [HTTP API](https://grafana.com/docs/oncall/latest/oncall-api-reference/users/)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetOncallUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var alex = GrafanaFunctions.getOncallUser(GetOncallUserArgs.builder()
     *             .username(&#34;alex&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetOncallUserResult> getOncallUserPlain(GetOncallUserPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("grafana:index/getOncallUser:getOncallUser", TypeShape.of(GetOncallUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * * [HTTP API](https://grafana.com/docs/oncall/latest/oncall-api-reference/user_groups/)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetOncallUserGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleUserGroup = GrafanaFunctions.getOncallUserGroup(GetOncallUserGroupArgs.builder()
     *             .slackHandle(&#34;example_slack_handle&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetOncallUserGroupResult> getOncallUserGroup(GetOncallUserGroupArgs args) {
        return getOncallUserGroup(args, InvokeOptions.Empty);
    }
    /**
     * * [HTTP API](https://grafana.com/docs/oncall/latest/oncall-api-reference/user_groups/)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetOncallUserGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleUserGroup = GrafanaFunctions.getOncallUserGroup(GetOncallUserGroupArgs.builder()
     *             .slackHandle(&#34;example_slack_handle&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetOncallUserGroupResult> getOncallUserGroupPlain(GetOncallUserGroupPlainArgs args) {
        return getOncallUserGroupPlain(args, InvokeOptions.Empty);
    }
    /**
     * * [HTTP API](https://grafana.com/docs/oncall/latest/oncall-api-reference/user_groups/)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetOncallUserGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleUserGroup = GrafanaFunctions.getOncallUserGroup(GetOncallUserGroupArgs.builder()
     *             .slackHandle(&#34;example_slack_handle&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetOncallUserGroupResult> getOncallUserGroup(GetOncallUserGroupArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("grafana:index/getOncallUserGroup:getOncallUserGroup", TypeShape.of(GetOncallUserGroupResult.class), args, Utilities.withVersion(options));
    }
    /**
     * * [HTTP API](https://grafana.com/docs/oncall/latest/oncall-api-reference/user_groups/)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetOncallUserGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleUserGroup = GrafanaFunctions.getOncallUserGroup(GetOncallUserGroupArgs.builder()
     *             .slackHandle(&#34;example_slack_handle&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetOncallUserGroupResult> getOncallUserGroupPlain(GetOncallUserGroupPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("grafana:index/getOncallUserGroup:getOncallUserGroup", TypeShape.of(GetOncallUserGroupResult.class), args, Utilities.withVersion(options));
    }
    /**
     * * [Official documentation](https://grafana.com/docs/grafana/latest/administration/organization-management/)
     * * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/org/)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.Organization;
     * import com.pulumi.grafana.OrganizationArgs;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetOrganizationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var test = new Organization(&#34;test&#34;, OrganizationArgs.builder()        
     *             .adminUser(&#34;admin&#34;)
     *             .createUsers(true)
     *             .viewers(            
     *                 &#34;viewer-01@example.com&#34;,
     *                 &#34;viewer-02@example.com&#34;)
     *             .build());
     * 
     *         final var fromName = GrafanaFunctions.getOrganization(GetOrganizationArgs.builder()
     *             .name(test.name())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetOrganizationResult> getOrganization(GetOrganizationArgs args) {
        return getOrganization(args, InvokeOptions.Empty);
    }
    /**
     * * [Official documentation](https://grafana.com/docs/grafana/latest/administration/organization-management/)
     * * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/org/)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.Organization;
     * import com.pulumi.grafana.OrganizationArgs;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetOrganizationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var test = new Organization(&#34;test&#34;, OrganizationArgs.builder()        
     *             .adminUser(&#34;admin&#34;)
     *             .createUsers(true)
     *             .viewers(            
     *                 &#34;viewer-01@example.com&#34;,
     *                 &#34;viewer-02@example.com&#34;)
     *             .build());
     * 
     *         final var fromName = GrafanaFunctions.getOrganization(GetOrganizationArgs.builder()
     *             .name(test.name())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetOrganizationResult> getOrganizationPlain(GetOrganizationPlainArgs args) {
        return getOrganizationPlain(args, InvokeOptions.Empty);
    }
    /**
     * * [Official documentation](https://grafana.com/docs/grafana/latest/administration/organization-management/)
     * * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/org/)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.Organization;
     * import com.pulumi.grafana.OrganizationArgs;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetOrganizationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var test = new Organization(&#34;test&#34;, OrganizationArgs.builder()        
     *             .adminUser(&#34;admin&#34;)
     *             .createUsers(true)
     *             .viewers(            
     *                 &#34;viewer-01@example.com&#34;,
     *                 &#34;viewer-02@example.com&#34;)
     *             .build());
     * 
     *         final var fromName = GrafanaFunctions.getOrganization(GetOrganizationArgs.builder()
     *             .name(test.name())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetOrganizationResult> getOrganization(GetOrganizationArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("grafana:index/getOrganization:getOrganization", TypeShape.of(GetOrganizationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * * [Official documentation](https://grafana.com/docs/grafana/latest/administration/organization-management/)
     * * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/org/)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.Organization;
     * import com.pulumi.grafana.OrganizationArgs;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetOrganizationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var test = new Organization(&#34;test&#34;, OrganizationArgs.builder()        
     *             .adminUser(&#34;admin&#34;)
     *             .createUsers(true)
     *             .viewers(            
     *                 &#34;viewer-01@example.com&#34;,
     *                 &#34;viewer-02@example.com&#34;)
     *             .build());
     * 
     *         final var fromName = GrafanaFunctions.getOrganization(GetOrganizationArgs.builder()
     *             .name(test.name())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetOrganizationResult> getOrganizationPlain(GetOrganizationPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("grafana:index/getOrganization:getOrganization", TypeShape.of(GetOrganizationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * * [Official documentation](https://grafana.com/docs/grafana/latest/administration/organization-management/)
     * * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/preferences/#get-current-org-prefs)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = GrafanaFunctions.getOrganizationPreferences();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetOrganizationPreferencesResult> getOrganizationPreferences() {
        return getOrganizationPreferences(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * * [Official documentation](https://grafana.com/docs/grafana/latest/administration/organization-management/)
     * * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/preferences/#get-current-org-prefs)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = GrafanaFunctions.getOrganizationPreferences();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetOrganizationPreferencesResult> getOrganizationPreferencesPlain() {
        return getOrganizationPreferencesPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * * [Official documentation](https://grafana.com/docs/grafana/latest/administration/organization-management/)
     * * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/preferences/#get-current-org-prefs)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = GrafanaFunctions.getOrganizationPreferences();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetOrganizationPreferencesResult> getOrganizationPreferences(InvokeArgs args) {
        return getOrganizationPreferences(args, InvokeOptions.Empty);
    }
    /**
     * * [Official documentation](https://grafana.com/docs/grafana/latest/administration/organization-management/)
     * * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/preferences/#get-current-org-prefs)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = GrafanaFunctions.getOrganizationPreferences();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetOrganizationPreferencesResult> getOrganizationPreferencesPlain(InvokeArgs args) {
        return getOrganizationPreferencesPlain(args, InvokeOptions.Empty);
    }
    /**
     * * [Official documentation](https://grafana.com/docs/grafana/latest/administration/organization-management/)
     * * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/preferences/#get-current-org-prefs)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = GrafanaFunctions.getOrganizationPreferences();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetOrganizationPreferencesResult> getOrganizationPreferences(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("grafana:index/getOrganizationPreferences:getOrganizationPreferences", TypeShape.of(GetOrganizationPreferencesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * * [Official documentation](https://grafana.com/docs/grafana/latest/administration/organization-management/)
     * * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/preferences/#get-current-org-prefs)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = GrafanaFunctions.getOrganizationPreferences();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetOrganizationPreferencesResult> getOrganizationPreferencesPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("grafana:index/getOrganizationPreferences:getOrganizationPreferences", TypeShape.of(GetOrganizationPreferencesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for retrieving all SLOs.
     * 
     * * [Official documentation](https://grafana.com/docs/grafana-cloud/slo/)
     * * [API documentation](https://grafana.com/docs/grafana-cloud/slo/api/)
     * 
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.SLO;
     * import com.pulumi.grafana.SLOArgs;
     * import com.pulumi.grafana.inputs.SLOAlertingArgs;
     * import com.pulumi.grafana.inputs.SLOLabelArgs;
     * import com.pulumi.grafana.inputs.SLOObjectiveArgs;
     * import com.pulumi.grafana.inputs.SLOQueryArgs;
     * import com.pulumi.grafana.inputs.SLOQueryFreeformArgs;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var test = new SLO(&#34;test&#34;, SLOArgs.builder()        
     *             .alertings(SLOAlertingArgs.builder()
     *                 .fastburns(SLOAlertingFastburnArgs.builder()
     *                     .annotation(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
     *                     .label(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
     *                     .build())
     *                 .slowburns(SLOAlertingSlowburnArgs.builder()
     *                     .annotation(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
     *                     .label(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
     *                     .build())
     *                 .build())
     *             .description(&#34;Terraform Description&#34;)
     *             .labels(SLOLabelArgs.builder()
     *                 .key(&#34;custom&#34;)
     *                 .value(&#34;value&#34;)
     *                 .build())
     *             .objectives(SLOObjectiveArgs.builder()
     *                 .value(0.995)
     *                 .window(&#34;30d&#34;)
     *                 .build())
     *             .queries(SLOQueryArgs.builder()
     *                 .freeform(SLOQueryFreeformArgs.builder()
     *                     .query(&#34;sum(rate(apiserver_request_total{code!=\&#34;500\&#34;}[$__rate_interval])) / sum(rate(apiserver_request_total[$__rate_interval]))&#34;)
     *                     .build())
     *                 .type(&#34;freeform&#34;)
     *                 .build())
     *             .build());
     * 
     *         final var slos = GrafanaFunctions.getSlos();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetSlosResult> getSlos() {
        return getSlos(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Datasource for retrieving all SLOs.
     * 
     * * [Official documentation](https://grafana.com/docs/grafana-cloud/slo/)
     * * [API documentation](https://grafana.com/docs/grafana-cloud/slo/api/)
     * 
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.SLO;
     * import com.pulumi.grafana.SLOArgs;
     * import com.pulumi.grafana.inputs.SLOAlertingArgs;
     * import com.pulumi.grafana.inputs.SLOLabelArgs;
     * import com.pulumi.grafana.inputs.SLOObjectiveArgs;
     * import com.pulumi.grafana.inputs.SLOQueryArgs;
     * import com.pulumi.grafana.inputs.SLOQueryFreeformArgs;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var test = new SLO(&#34;test&#34;, SLOArgs.builder()        
     *             .alertings(SLOAlertingArgs.builder()
     *                 .fastburns(SLOAlertingFastburnArgs.builder()
     *                     .annotation(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
     *                     .label(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
     *                     .build())
     *                 .slowburns(SLOAlertingSlowburnArgs.builder()
     *                     .annotation(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
     *                     .label(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
     *                     .build())
     *                 .build())
     *             .description(&#34;Terraform Description&#34;)
     *             .labels(SLOLabelArgs.builder()
     *                 .key(&#34;custom&#34;)
     *                 .value(&#34;value&#34;)
     *                 .build())
     *             .objectives(SLOObjectiveArgs.builder()
     *                 .value(0.995)
     *                 .window(&#34;30d&#34;)
     *                 .build())
     *             .queries(SLOQueryArgs.builder()
     *                 .freeform(SLOQueryFreeformArgs.builder()
     *                     .query(&#34;sum(rate(apiserver_request_total{code!=\&#34;500\&#34;}[$__rate_interval])) / sum(rate(apiserver_request_total[$__rate_interval]))&#34;)
     *                     .build())
     *                 .type(&#34;freeform&#34;)
     *                 .build())
     *             .build());
     * 
     *         final var slos = GrafanaFunctions.getSlos();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetSlosResult> getSlosPlain() {
        return getSlosPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Datasource for retrieving all SLOs.
     * 
     * * [Official documentation](https://grafana.com/docs/grafana-cloud/slo/)
     * * [API documentation](https://grafana.com/docs/grafana-cloud/slo/api/)
     * 
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.SLO;
     * import com.pulumi.grafana.SLOArgs;
     * import com.pulumi.grafana.inputs.SLOAlertingArgs;
     * import com.pulumi.grafana.inputs.SLOLabelArgs;
     * import com.pulumi.grafana.inputs.SLOObjectiveArgs;
     * import com.pulumi.grafana.inputs.SLOQueryArgs;
     * import com.pulumi.grafana.inputs.SLOQueryFreeformArgs;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var test = new SLO(&#34;test&#34;, SLOArgs.builder()        
     *             .alertings(SLOAlertingArgs.builder()
     *                 .fastburns(SLOAlertingFastburnArgs.builder()
     *                     .annotation(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
     *                     .label(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
     *                     .build())
     *                 .slowburns(SLOAlertingSlowburnArgs.builder()
     *                     .annotation(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
     *                     .label(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
     *                     .build())
     *                 .build())
     *             .description(&#34;Terraform Description&#34;)
     *             .labels(SLOLabelArgs.builder()
     *                 .key(&#34;custom&#34;)
     *                 .value(&#34;value&#34;)
     *                 .build())
     *             .objectives(SLOObjectiveArgs.builder()
     *                 .value(0.995)
     *                 .window(&#34;30d&#34;)
     *                 .build())
     *             .queries(SLOQueryArgs.builder()
     *                 .freeform(SLOQueryFreeformArgs.builder()
     *                     .query(&#34;sum(rate(apiserver_request_total{code!=\&#34;500\&#34;}[$__rate_interval])) / sum(rate(apiserver_request_total[$__rate_interval]))&#34;)
     *                     .build())
     *                 .type(&#34;freeform&#34;)
     *                 .build())
     *             .build());
     * 
     *         final var slos = GrafanaFunctions.getSlos();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetSlosResult> getSlos(InvokeArgs args) {
        return getSlos(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for retrieving all SLOs.
     * 
     * * [Official documentation](https://grafana.com/docs/grafana-cloud/slo/)
     * * [API documentation](https://grafana.com/docs/grafana-cloud/slo/api/)
     * 
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.SLO;
     * import com.pulumi.grafana.SLOArgs;
     * import com.pulumi.grafana.inputs.SLOAlertingArgs;
     * import com.pulumi.grafana.inputs.SLOLabelArgs;
     * import com.pulumi.grafana.inputs.SLOObjectiveArgs;
     * import com.pulumi.grafana.inputs.SLOQueryArgs;
     * import com.pulumi.grafana.inputs.SLOQueryFreeformArgs;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var test = new SLO(&#34;test&#34;, SLOArgs.builder()        
     *             .alertings(SLOAlertingArgs.builder()
     *                 .fastburns(SLOAlertingFastburnArgs.builder()
     *                     .annotation(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
     *                     .label(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
     *                     .build())
     *                 .slowburns(SLOAlertingSlowburnArgs.builder()
     *                     .annotation(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
     *                     .label(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
     *                     .build())
     *                 .build())
     *             .description(&#34;Terraform Description&#34;)
     *             .labels(SLOLabelArgs.builder()
     *                 .key(&#34;custom&#34;)
     *                 .value(&#34;value&#34;)
     *                 .build())
     *             .objectives(SLOObjectiveArgs.builder()
     *                 .value(0.995)
     *                 .window(&#34;30d&#34;)
     *                 .build())
     *             .queries(SLOQueryArgs.builder()
     *                 .freeform(SLOQueryFreeformArgs.builder()
     *                     .query(&#34;sum(rate(apiserver_request_total{code!=\&#34;500\&#34;}[$__rate_interval])) / sum(rate(apiserver_request_total[$__rate_interval]))&#34;)
     *                     .build())
     *                 .type(&#34;freeform&#34;)
     *                 .build())
     *             .build());
     * 
     *         final var slos = GrafanaFunctions.getSlos();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetSlosResult> getSlosPlain(InvokeArgs args) {
        return getSlosPlain(args, InvokeOptions.Empty);
    }
    /**
     * Datasource for retrieving all SLOs.
     * 
     * * [Official documentation](https://grafana.com/docs/grafana-cloud/slo/)
     * * [API documentation](https://grafana.com/docs/grafana-cloud/slo/api/)
     * 
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.SLO;
     * import com.pulumi.grafana.SLOArgs;
     * import com.pulumi.grafana.inputs.SLOAlertingArgs;
     * import com.pulumi.grafana.inputs.SLOLabelArgs;
     * import com.pulumi.grafana.inputs.SLOObjectiveArgs;
     * import com.pulumi.grafana.inputs.SLOQueryArgs;
     * import com.pulumi.grafana.inputs.SLOQueryFreeformArgs;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var test = new SLO(&#34;test&#34;, SLOArgs.builder()        
     *             .alertings(SLOAlertingArgs.builder()
     *                 .fastburns(SLOAlertingFastburnArgs.builder()
     *                     .annotation(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
     *                     .label(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
     *                     .build())
     *                 .slowburns(SLOAlertingSlowburnArgs.builder()
     *                     .annotation(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
     *                     .label(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
     *                     .build())
     *                 .build())
     *             .description(&#34;Terraform Description&#34;)
     *             .labels(SLOLabelArgs.builder()
     *                 .key(&#34;custom&#34;)
     *                 .value(&#34;value&#34;)
     *                 .build())
     *             .objectives(SLOObjectiveArgs.builder()
     *                 .value(0.995)
     *                 .window(&#34;30d&#34;)
     *                 .build())
     *             .queries(SLOQueryArgs.builder()
     *                 .freeform(SLOQueryFreeformArgs.builder()
     *                     .query(&#34;sum(rate(apiserver_request_total{code!=\&#34;500\&#34;}[$__rate_interval])) / sum(rate(apiserver_request_total[$__rate_interval]))&#34;)
     *                     .build())
     *                 .type(&#34;freeform&#34;)
     *                 .build())
     *             .build());
     * 
     *         final var slos = GrafanaFunctions.getSlos();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetSlosResult> getSlos(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("grafana:index/getSlos:getSlos", TypeShape.of(GetSlosResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Datasource for retrieving all SLOs.
     * 
     * * [Official documentation](https://grafana.com/docs/grafana-cloud/slo/)
     * * [API documentation](https://grafana.com/docs/grafana-cloud/slo/api/)
     * 
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.SLO;
     * import com.pulumi.grafana.SLOArgs;
     * import com.pulumi.grafana.inputs.SLOAlertingArgs;
     * import com.pulumi.grafana.inputs.SLOLabelArgs;
     * import com.pulumi.grafana.inputs.SLOObjectiveArgs;
     * import com.pulumi.grafana.inputs.SLOQueryArgs;
     * import com.pulumi.grafana.inputs.SLOQueryFreeformArgs;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var test = new SLO(&#34;test&#34;, SLOArgs.builder()        
     *             .alertings(SLOAlertingArgs.builder()
     *                 .fastburns(SLOAlertingFastburnArgs.builder()
     *                     .annotation(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
     *                     .label(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
     *                     .build())
     *                 .slowburns(SLOAlertingSlowburnArgs.builder()
     *                     .annotation(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
     *                     .label(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
     *                     .build())
     *                 .build())
     *             .description(&#34;Terraform Description&#34;)
     *             .labels(SLOLabelArgs.builder()
     *                 .key(&#34;custom&#34;)
     *                 .value(&#34;value&#34;)
     *                 .build())
     *             .objectives(SLOObjectiveArgs.builder()
     *                 .value(0.995)
     *                 .window(&#34;30d&#34;)
     *                 .build())
     *             .queries(SLOQueryArgs.builder()
     *                 .freeform(SLOQueryFreeformArgs.builder()
     *                     .query(&#34;sum(rate(apiserver_request_total{code!=\&#34;500\&#34;}[$__rate_interval])) / sum(rate(apiserver_request_total[$__rate_interval]))&#34;)
     *                     .build())
     *                 .type(&#34;freeform&#34;)
     *                 .build())
     *             .build());
     * 
     *         final var slos = GrafanaFunctions.getSlos();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetSlosResult> getSlosPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("grafana:index/getSlos:getSlos", TypeShape.of(GetSlosResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a single probe by name.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetSyntheticMonitoringProbeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var atlanta = GrafanaFunctions.getSyntheticMonitoringProbe(GetSyntheticMonitoringProbeArgs.builder()
     *             .name(&#34;Atlanta&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetSyntheticMonitoringProbeResult> getSyntheticMonitoringProbe(GetSyntheticMonitoringProbeArgs args) {
        return getSyntheticMonitoringProbe(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a single probe by name.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetSyntheticMonitoringProbeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var atlanta = GrafanaFunctions.getSyntheticMonitoringProbe(GetSyntheticMonitoringProbeArgs.builder()
     *             .name(&#34;Atlanta&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetSyntheticMonitoringProbeResult> getSyntheticMonitoringProbePlain(GetSyntheticMonitoringProbePlainArgs args) {
        return getSyntheticMonitoringProbePlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving a single probe by name.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetSyntheticMonitoringProbeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var atlanta = GrafanaFunctions.getSyntheticMonitoringProbe(GetSyntheticMonitoringProbeArgs.builder()
     *             .name(&#34;Atlanta&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetSyntheticMonitoringProbeResult> getSyntheticMonitoringProbe(GetSyntheticMonitoringProbeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("grafana:index/getSyntheticMonitoringProbe:getSyntheticMonitoringProbe", TypeShape.of(GetSyntheticMonitoringProbeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving a single probe by name.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetSyntheticMonitoringProbeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var atlanta = GrafanaFunctions.getSyntheticMonitoringProbe(GetSyntheticMonitoringProbeArgs.builder()
     *             .name(&#34;Atlanta&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetSyntheticMonitoringProbeResult> getSyntheticMonitoringProbePlain(GetSyntheticMonitoringProbePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("grafana:index/getSyntheticMonitoringProbe:getSyntheticMonitoringProbe", TypeShape.of(GetSyntheticMonitoringProbeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving all probes.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetSyntheticMonitoringProbesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var main = GrafanaFunctions.getSyntheticMonitoringProbes();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetSyntheticMonitoringProbesResult> getSyntheticMonitoringProbes() {
        return getSyntheticMonitoringProbes(GetSyntheticMonitoringProbesArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving all probes.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetSyntheticMonitoringProbesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var main = GrafanaFunctions.getSyntheticMonitoringProbes();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetSyntheticMonitoringProbesResult> getSyntheticMonitoringProbesPlain() {
        return getSyntheticMonitoringProbesPlain(GetSyntheticMonitoringProbesPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving all probes.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetSyntheticMonitoringProbesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var main = GrafanaFunctions.getSyntheticMonitoringProbes();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetSyntheticMonitoringProbesResult> getSyntheticMonitoringProbes(GetSyntheticMonitoringProbesArgs args) {
        return getSyntheticMonitoringProbes(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving all probes.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetSyntheticMonitoringProbesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var main = GrafanaFunctions.getSyntheticMonitoringProbes();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetSyntheticMonitoringProbesResult> getSyntheticMonitoringProbesPlain(GetSyntheticMonitoringProbesPlainArgs args) {
        return getSyntheticMonitoringProbesPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data source for retrieving all probes.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetSyntheticMonitoringProbesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var main = GrafanaFunctions.getSyntheticMonitoringProbes();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetSyntheticMonitoringProbesResult> getSyntheticMonitoringProbes(GetSyntheticMonitoringProbesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("grafana:index/getSyntheticMonitoringProbes:getSyntheticMonitoringProbes", TypeShape.of(GetSyntheticMonitoringProbesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data source for retrieving all probes.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetSyntheticMonitoringProbesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var main = GrafanaFunctions.getSyntheticMonitoringProbes();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetSyntheticMonitoringProbesResult> getSyntheticMonitoringProbesPlain(GetSyntheticMonitoringProbesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("grafana:index/getSyntheticMonitoringProbes:getSyntheticMonitoringProbes", TypeShape.of(GetSyntheticMonitoringProbesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * * [Official documentation](https://grafana.com/docs/grafana/latest/administration/team-management/)
     * * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/team/)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.Team;
     * import com.pulumi.grafana.TeamArgs;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetTeamArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var test = new Team(&#34;test&#34;, TeamArgs.builder()        
     *             .email(&#34;test-team-email@test.com&#34;)
     *             .build());
     * 
     *         final var fromName = GrafanaFunctions.getTeam(GetTeamArgs.builder()
     *             .name(test.name())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetTeamResult> getTeam(GetTeamArgs args) {
        return getTeam(args, InvokeOptions.Empty);
    }
    /**
     * * [Official documentation](https://grafana.com/docs/grafana/latest/administration/team-management/)
     * * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/team/)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.Team;
     * import com.pulumi.grafana.TeamArgs;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetTeamArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var test = new Team(&#34;test&#34;, TeamArgs.builder()        
     *             .email(&#34;test-team-email@test.com&#34;)
     *             .build());
     * 
     *         final var fromName = GrafanaFunctions.getTeam(GetTeamArgs.builder()
     *             .name(test.name())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetTeamResult> getTeamPlain(GetTeamPlainArgs args) {
        return getTeamPlain(args, InvokeOptions.Empty);
    }
    /**
     * * [Official documentation](https://grafana.com/docs/grafana/latest/administration/team-management/)
     * * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/team/)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.Team;
     * import com.pulumi.grafana.TeamArgs;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetTeamArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var test = new Team(&#34;test&#34;, TeamArgs.builder()        
     *             .email(&#34;test-team-email@test.com&#34;)
     *             .build());
     * 
     *         final var fromName = GrafanaFunctions.getTeam(GetTeamArgs.builder()
     *             .name(test.name())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetTeamResult> getTeam(GetTeamArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("grafana:index/getTeam:getTeam", TypeShape.of(GetTeamResult.class), args, Utilities.withVersion(options));
    }
    /**
     * * [Official documentation](https://grafana.com/docs/grafana/latest/administration/team-management/)
     * * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/team/)
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.Team;
     * import com.pulumi.grafana.TeamArgs;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetTeamArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var test = new Team(&#34;test&#34;, TeamArgs.builder()        
     *             .email(&#34;test-team-email@test.com&#34;)
     *             .build());
     * 
     *         final var fromName = GrafanaFunctions.getTeam(GetTeamArgs.builder()
     *             .name(test.name())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetTeamResult> getTeamPlain(GetTeamPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("grafana:index/getTeam:getTeam", TypeShape.of(GetTeamResult.class), args, Utilities.withVersion(options));
    }
    /**
     * * [Official documentation](https://grafana.com/docs/grafana/latest/administration/user-management/server-user-management/)
     * * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/user/)
     * 
     * This data source uses Grafana&#39;s admin APIs for reading users which
     * does not currently work with API Tokens. You must use basic auth.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.User;
     * import com.pulumi.grafana.UserArgs;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var test = new User(&#34;test&#34;, UserArgs.builder()        
     *             .email(&#34;test.datasource@example.com&#34;)
     *             .login(&#34;test-datasource&#34;)
     *             .password(&#34;my-password&#34;)
     *             .isAdmin(true)
     *             .build());
     * 
     *         final var fromId = GrafanaFunctions.getUser(GetUserArgs.builder()
     *             .userId(test.userId())
     *             .build());
     * 
     *         final var fromEmail = GrafanaFunctions.getUser(GetUserArgs.builder()
     *             .email(test.email())
     *             .build());
     * 
     *         final var fromLogin = GrafanaFunctions.getUser(GetUserArgs.builder()
     *             .login(test.login())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetUserResult> getUser() {
        return getUser(GetUserArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * * [Official documentation](https://grafana.com/docs/grafana/latest/administration/user-management/server-user-management/)
     * * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/user/)
     * 
     * This data source uses Grafana&#39;s admin APIs for reading users which
     * does not currently work with API Tokens. You must use basic auth.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.User;
     * import com.pulumi.grafana.UserArgs;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var test = new User(&#34;test&#34;, UserArgs.builder()        
     *             .email(&#34;test.datasource@example.com&#34;)
     *             .login(&#34;test-datasource&#34;)
     *             .password(&#34;my-password&#34;)
     *             .isAdmin(true)
     *             .build());
     * 
     *         final var fromId = GrafanaFunctions.getUser(GetUserArgs.builder()
     *             .userId(test.userId())
     *             .build());
     * 
     *         final var fromEmail = GrafanaFunctions.getUser(GetUserArgs.builder()
     *             .email(test.email())
     *             .build());
     * 
     *         final var fromLogin = GrafanaFunctions.getUser(GetUserArgs.builder()
     *             .login(test.login())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetUserResult> getUserPlain() {
        return getUserPlain(GetUserPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * * [Official documentation](https://grafana.com/docs/grafana/latest/administration/user-management/server-user-management/)
     * * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/user/)
     * 
     * This data source uses Grafana&#39;s admin APIs for reading users which
     * does not currently work with API Tokens. You must use basic auth.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.User;
     * import com.pulumi.grafana.UserArgs;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var test = new User(&#34;test&#34;, UserArgs.builder()        
     *             .email(&#34;test.datasource@example.com&#34;)
     *             .login(&#34;test-datasource&#34;)
     *             .password(&#34;my-password&#34;)
     *             .isAdmin(true)
     *             .build());
     * 
     *         final var fromId = GrafanaFunctions.getUser(GetUserArgs.builder()
     *             .userId(test.userId())
     *             .build());
     * 
     *         final var fromEmail = GrafanaFunctions.getUser(GetUserArgs.builder()
     *             .email(test.email())
     *             .build());
     * 
     *         final var fromLogin = GrafanaFunctions.getUser(GetUserArgs.builder()
     *             .login(test.login())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetUserResult> getUser(GetUserArgs args) {
        return getUser(args, InvokeOptions.Empty);
    }
    /**
     * * [Official documentation](https://grafana.com/docs/grafana/latest/administration/user-management/server-user-management/)
     * * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/user/)
     * 
     * This data source uses Grafana&#39;s admin APIs for reading users which
     * does not currently work with API Tokens. You must use basic auth.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.User;
     * import com.pulumi.grafana.UserArgs;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var test = new User(&#34;test&#34;, UserArgs.builder()        
     *             .email(&#34;test.datasource@example.com&#34;)
     *             .login(&#34;test-datasource&#34;)
     *             .password(&#34;my-password&#34;)
     *             .isAdmin(true)
     *             .build());
     * 
     *         final var fromId = GrafanaFunctions.getUser(GetUserArgs.builder()
     *             .userId(test.userId())
     *             .build());
     * 
     *         final var fromEmail = GrafanaFunctions.getUser(GetUserArgs.builder()
     *             .email(test.email())
     *             .build());
     * 
     *         final var fromLogin = GrafanaFunctions.getUser(GetUserArgs.builder()
     *             .login(test.login())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetUserResult> getUserPlain(GetUserPlainArgs args) {
        return getUserPlain(args, InvokeOptions.Empty);
    }
    /**
     * * [Official documentation](https://grafana.com/docs/grafana/latest/administration/user-management/server-user-management/)
     * * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/user/)
     * 
     * This data source uses Grafana&#39;s admin APIs for reading users which
     * does not currently work with API Tokens. You must use basic auth.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.User;
     * import com.pulumi.grafana.UserArgs;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var test = new User(&#34;test&#34;, UserArgs.builder()        
     *             .email(&#34;test.datasource@example.com&#34;)
     *             .login(&#34;test-datasource&#34;)
     *             .password(&#34;my-password&#34;)
     *             .isAdmin(true)
     *             .build());
     * 
     *         final var fromId = GrafanaFunctions.getUser(GetUserArgs.builder()
     *             .userId(test.userId())
     *             .build());
     * 
     *         final var fromEmail = GrafanaFunctions.getUser(GetUserArgs.builder()
     *             .email(test.email())
     *             .build());
     * 
     *         final var fromLogin = GrafanaFunctions.getUser(GetUserArgs.builder()
     *             .login(test.login())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetUserResult> getUser(GetUserArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("grafana:index/getUser:getUser", TypeShape.of(GetUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * * [Official documentation](https://grafana.com/docs/grafana/latest/administration/user-management/server-user-management/)
     * * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/user/)
     * 
     * This data source uses Grafana&#39;s admin APIs for reading users which
     * does not currently work with API Tokens. You must use basic auth.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.User;
     * import com.pulumi.grafana.UserArgs;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import com.pulumi.grafana.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var test = new User(&#34;test&#34;, UserArgs.builder()        
     *             .email(&#34;test.datasource@example.com&#34;)
     *             .login(&#34;test-datasource&#34;)
     *             .password(&#34;my-password&#34;)
     *             .isAdmin(true)
     *             .build());
     * 
     *         final var fromId = GrafanaFunctions.getUser(GetUserArgs.builder()
     *             .userId(test.userId())
     *             .build());
     * 
     *         final var fromEmail = GrafanaFunctions.getUser(GetUserArgs.builder()
     *             .email(test.email())
     *             .build());
     * 
     *         final var fromLogin = GrafanaFunctions.getUser(GetUserArgs.builder()
     *             .login(test.login())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetUserResult> getUserPlain(GetUserPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("grafana:index/getUser:getUser", TypeShape.of(GetUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * * [Official documentation](https://grafana.com/docs/grafana/latest/administration/user-management/server-user-management/)
     * * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/user/)
     * 
     * This data source uses Grafana&#39;s admin APIs for reading users which
     * does not currently work with API Tokens. You must use basic auth.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.User;
     * import com.pulumi.grafana.UserArgs;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testAllUsers = new User(&#34;testAllUsers&#34;, UserArgs.builder()        
     *             .email(&#34;all_users@example.com&#34;)
     *             .login(&#34;test-grafana-users&#34;)
     *             .password(&#34;my-password&#34;)
     *             .build());
     * 
     *         final var allUsers = GrafanaFunctions.getUsers();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetUsersResult> getUsers() {
        return getUsers(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * * [Official documentation](https://grafana.com/docs/grafana/latest/administration/user-management/server-user-management/)
     * * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/user/)
     * 
     * This data source uses Grafana&#39;s admin APIs for reading users which
     * does not currently work with API Tokens. You must use basic auth.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.User;
     * import com.pulumi.grafana.UserArgs;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testAllUsers = new User(&#34;testAllUsers&#34;, UserArgs.builder()        
     *             .email(&#34;all_users@example.com&#34;)
     *             .login(&#34;test-grafana-users&#34;)
     *             .password(&#34;my-password&#34;)
     *             .build());
     * 
     *         final var allUsers = GrafanaFunctions.getUsers();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetUsersResult> getUsersPlain() {
        return getUsersPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * * [Official documentation](https://grafana.com/docs/grafana/latest/administration/user-management/server-user-management/)
     * * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/user/)
     * 
     * This data source uses Grafana&#39;s admin APIs for reading users which
     * does not currently work with API Tokens. You must use basic auth.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.User;
     * import com.pulumi.grafana.UserArgs;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testAllUsers = new User(&#34;testAllUsers&#34;, UserArgs.builder()        
     *             .email(&#34;all_users@example.com&#34;)
     *             .login(&#34;test-grafana-users&#34;)
     *             .password(&#34;my-password&#34;)
     *             .build());
     * 
     *         final var allUsers = GrafanaFunctions.getUsers();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetUsersResult> getUsers(InvokeArgs args) {
        return getUsers(args, InvokeOptions.Empty);
    }
    /**
     * * [Official documentation](https://grafana.com/docs/grafana/latest/administration/user-management/server-user-management/)
     * * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/user/)
     * 
     * This data source uses Grafana&#39;s admin APIs for reading users which
     * does not currently work with API Tokens. You must use basic auth.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.User;
     * import com.pulumi.grafana.UserArgs;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testAllUsers = new User(&#34;testAllUsers&#34;, UserArgs.builder()        
     *             .email(&#34;all_users@example.com&#34;)
     *             .login(&#34;test-grafana-users&#34;)
     *             .password(&#34;my-password&#34;)
     *             .build());
     * 
     *         final var allUsers = GrafanaFunctions.getUsers();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetUsersResult> getUsersPlain(InvokeArgs args) {
        return getUsersPlain(args, InvokeOptions.Empty);
    }
    /**
     * * [Official documentation](https://grafana.com/docs/grafana/latest/administration/user-management/server-user-management/)
     * * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/user/)
     * 
     * This data source uses Grafana&#39;s admin APIs for reading users which
     * does not currently work with API Tokens. You must use basic auth.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.User;
     * import com.pulumi.grafana.UserArgs;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testAllUsers = new User(&#34;testAllUsers&#34;, UserArgs.builder()        
     *             .email(&#34;all_users@example.com&#34;)
     *             .login(&#34;test-grafana-users&#34;)
     *             .password(&#34;my-password&#34;)
     *             .build());
     * 
     *         final var allUsers = GrafanaFunctions.getUsers();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetUsersResult> getUsers(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("grafana:index/getUsers:getUsers", TypeShape.of(GetUsersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * * [Official documentation](https://grafana.com/docs/grafana/latest/administration/user-management/server-user-management/)
     * * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/user/)
     * 
     * This data source uses Grafana&#39;s admin APIs for reading users which
     * does not currently work with API Tokens. You must use basic auth.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.grafana.User;
     * import com.pulumi.grafana.UserArgs;
     * import com.pulumi.grafana.GrafanaFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testAllUsers = new User(&#34;testAllUsers&#34;, UserArgs.builder()        
     *             .email(&#34;all_users@example.com&#34;)
     *             .login(&#34;test-grafana-users&#34;)
     *             .password(&#34;my-password&#34;)
     *             .build());
     * 
     *         final var allUsers = GrafanaFunctions.getUsers();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetUsersResult> getUsersPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("grafana:index/getUsers:getUsers", TypeShape.of(GetUsersResult.class), args, Utilities.withVersion(options));
    }
}
