// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.grafana.CloudStackArgs;
import com.pulumi.grafana.Utilities;
import com.pulumi.grafana.inputs.CloudStackState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * * [Official documentation](https://grafana.com/docs/grafana-cloud/reference/cloud-api/#stacks/)
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.grafana.CloudStack;
 * import com.pulumi.grafana.CloudStackArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var test = new CloudStack(&#34;test&#34;, CloudStackArgs.builder()        
 *             .description(&#34;Test Grafana Cloud Stack&#34;)
 *             .regionSlug(&#34;eu&#34;)
 *             .slug(&#34;gcloudstacktest&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * ```sh
 *  $ pulumi import grafana:index/cloudStack:CloudStack stack_name {{stack_id}} // import by numerical ID
 * ```
 * 
 * ```sh
 *  $ pulumi import grafana:index/cloudStack:CloudStack stack_name {{stack_slug}} // or import by slug
 * ```
 * 
 */
@ResourceType(type="grafana:index/cloudStack:CloudStack")
public class CloudStack extends com.pulumi.resources.CustomResource {
    /**
     * Name of the Alertmanager instance configured for this stack.
     * 
     */
    @Export(name="alertmanagerName", refs={String.class}, tree="[0]")
    private Output<String> alertmanagerName;

    /**
     * @return Name of the Alertmanager instance configured for this stack.
     * 
     */
    public Output<String> alertmanagerName() {
        return this.alertmanagerName;
    }
    /**
     * Status of the Alertmanager instance configured for this stack.
     * 
     */
    @Export(name="alertmanagerStatus", refs={String.class}, tree="[0]")
    private Output<String> alertmanagerStatus;

    /**
     * @return Status of the Alertmanager instance configured for this stack.
     * 
     */
    public Output<String> alertmanagerStatus() {
        return this.alertmanagerStatus;
    }
    /**
     * Base URL of the Alertmanager instance configured for this stack.
     * 
     */
    @Export(name="alertmanagerUrl", refs={String.class}, tree="[0]")
    private Output<String> alertmanagerUrl;

    /**
     * @return Base URL of the Alertmanager instance configured for this stack.
     * 
     */
    public Output<String> alertmanagerUrl() {
        return this.alertmanagerUrl;
    }
    /**
     * User ID of the Alertmanager instance configured for this stack.
     * 
     */
    @Export(name="alertmanagerUserId", refs={Integer.class}, tree="[0]")
    private Output<Integer> alertmanagerUserId;

    /**
     * @return User ID of the Alertmanager instance configured for this stack.
     * 
     */
    public Output<Integer> alertmanagerUserId() {
        return this.alertmanagerUserId;
    }
    /**
     * Description of stack.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Description of stack.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    @Export(name="graphiteName", refs={String.class}, tree="[0]")
    private Output<String> graphiteName;

    public Output<String> graphiteName() {
        return this.graphiteName;
    }
    @Export(name="graphiteStatus", refs={String.class}, tree="[0]")
    private Output<String> graphiteStatus;

    public Output<String> graphiteStatus() {
        return this.graphiteStatus;
    }
    @Export(name="graphiteUrl", refs={String.class}, tree="[0]")
    private Output<String> graphiteUrl;

    public Output<String> graphiteUrl() {
        return this.graphiteUrl;
    }
    @Export(name="graphiteUserId", refs={Integer.class}, tree="[0]")
    private Output<Integer> graphiteUserId;

    public Output<Integer> graphiteUserId() {
        return this.graphiteUserId;
    }
    @Export(name="logsName", refs={String.class}, tree="[0]")
    private Output<String> logsName;

    public Output<String> logsName() {
        return this.logsName;
    }
    @Export(name="logsStatus", refs={String.class}, tree="[0]")
    private Output<String> logsStatus;

    public Output<String> logsStatus() {
        return this.logsStatus;
    }
    @Export(name="logsUrl", refs={String.class}, tree="[0]")
    private Output<String> logsUrl;

    public Output<String> logsUrl() {
        return this.logsUrl;
    }
    @Export(name="logsUserId", refs={Integer.class}, tree="[0]")
    private Output<Integer> logsUserId;

    public Output<Integer> logsUserId() {
        return this.logsUserId;
    }
    /**
     * Name of stack. Conventionally matches the url of the instance (e.g. “\n\n.grafana.net”).
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of stack. Conventionally matches the url of the instance (e.g. “\n\n.grafana.net”).
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Organization id to assign to this stack.
     * 
     */
    @Export(name="orgId", refs={Integer.class}, tree="[0]")
    private Output<Integer> orgId;

    /**
     * @return Organization id to assign to this stack.
     * 
     */
    public Output<Integer> orgId() {
        return this.orgId;
    }
    /**
     * Organization name to assign to this stack.
     * 
     */
    @Export(name="orgName", refs={String.class}, tree="[0]")
    private Output<String> orgName;

    /**
     * @return Organization name to assign to this stack.
     * 
     */
    public Output<String> orgName() {
        return this.orgName;
    }
    /**
     * Organization slug to assign to this stack.
     * 
     */
    @Export(name="orgSlug", refs={String.class}, tree="[0]")
    private Output<String> orgSlug;

    /**
     * @return Organization slug to assign to this stack.
     * 
     */
    public Output<String> orgSlug() {
        return this.orgSlug;
    }
    /**
     * Prometheus name for this instance.
     * 
     */
    @Export(name="prometheusName", refs={String.class}, tree="[0]")
    private Output<String> prometheusName;

    /**
     * @return Prometheus name for this instance.
     * 
     */
    public Output<String> prometheusName() {
        return this.prometheusName;
    }
    /**
     * Use this URL to query hosted metrics data e.g. Prometheus data source in Grafana
     * 
     */
    @Export(name="prometheusRemoteEndpoint", refs={String.class}, tree="[0]")
    private Output<String> prometheusRemoteEndpoint;

    /**
     * @return Use this URL to query hosted metrics data e.g. Prometheus data source in Grafana
     * 
     */
    public Output<String> prometheusRemoteEndpoint() {
        return this.prometheusRemoteEndpoint;
    }
    /**
     * Use this URL to send prometheus metrics to Grafana cloud
     * 
     */
    @Export(name="prometheusRemoteWriteEndpoint", refs={String.class}, tree="[0]")
    private Output<String> prometheusRemoteWriteEndpoint;

    /**
     * @return Use this URL to send prometheus metrics to Grafana cloud
     * 
     */
    public Output<String> prometheusRemoteWriteEndpoint() {
        return this.prometheusRemoteWriteEndpoint;
    }
    /**
     * Prometheus status for this instance.
     * 
     */
    @Export(name="prometheusStatus", refs={String.class}, tree="[0]")
    private Output<String> prometheusStatus;

    /**
     * @return Prometheus status for this instance.
     * 
     */
    public Output<String> prometheusStatus() {
        return this.prometheusStatus;
    }
    /**
     * Prometheus url for this instance.
     * 
     */
    @Export(name="prometheusUrl", refs={String.class}, tree="[0]")
    private Output<String> prometheusUrl;

    /**
     * @return Prometheus url for this instance.
     * 
     */
    public Output<String> prometheusUrl() {
        return this.prometheusUrl;
    }
    /**
     * Prometheus user ID. Used for e.g. remote_write.
     * 
     */
    @Export(name="prometheusUserId", refs={Integer.class}, tree="[0]")
    private Output<Integer> prometheusUserId;

    /**
     * @return Prometheus user ID. Used for e.g. remote_write.
     * 
     */
    public Output<Integer> prometheusUserId() {
        return this.prometheusUserId;
    }
    /**
     * Region slug to assign to this stack. Changing region will destroy the existing stack and create a new one in the desired region. Use the region list API to get the list of available regions: https://grafana.com/docs/grafana-cloud/reference/cloud-api/#list-regions.
     * 
     */
    @Export(name="regionSlug", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> regionSlug;

    /**
     * @return Region slug to assign to this stack. Changing region will destroy the existing stack and create a new one in the desired region. Use the region list API to get the list of available regions: https://grafana.com/docs/grafana-cloud/reference/cloud-api/#list-regions.
     * 
     */
    public Output<Optional<String>> regionSlug() {
        return Codegen.optional(this.regionSlug);
    }
    /**
     * Subdomain that the Grafana instance will be available at (i.e. setting slug to “\n\n” will make the instance
     * available at “https://\n\n.grafana.net&#34;.
     * 
     */
    @Export(name="slug", refs={String.class}, tree="[0]")
    private Output<String> slug;

    /**
     * @return Subdomain that the Grafana instance will be available at (i.e. setting slug to “\n\n” will make the instance
     * available at “https://\n\n.grafana.net&#34;.
     * 
     */
    public Output<String> slug() {
        return this.slug;
    }
    /**
     * Status of the stack.
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return Status of the stack.
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    @Export(name="tracesName", refs={String.class}, tree="[0]")
    private Output<String> tracesName;

    public Output<String> tracesName() {
        return this.tracesName;
    }
    @Export(name="tracesStatus", refs={String.class}, tree="[0]")
    private Output<String> tracesStatus;

    public Output<String> tracesStatus() {
        return this.tracesStatus;
    }
    @Export(name="tracesUrl", refs={String.class}, tree="[0]")
    private Output<String> tracesUrl;

    public Output<String> tracesUrl() {
        return this.tracesUrl;
    }
    @Export(name="tracesUserId", refs={Integer.class}, tree="[0]")
    private Output<Integer> tracesUserId;

    public Output<Integer> tracesUserId() {
        return this.tracesUserId;
    }
    /**
     * Custom URL for the Grafana instance. Must have a CNAME setup to point to `.grafana.net` before creating the stack
     * 
     */
    @Export(name="url", refs={String.class}, tree="[0]")
    private Output<String> url;

    /**
     * @return Custom URL for the Grafana instance. Must have a CNAME setup to point to `.grafana.net` before creating the stack
     * 
     */
    public Output<String> url() {
        return this.url;
    }
    /**
     * Whether to wait for readiness of the stack after creating it. The check is a HEAD request to the stack URL (Grafana instance). Defaults to `true`.
     * 
     */
    @Export(name="waitForReadiness", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> waitForReadiness;

    /**
     * @return Whether to wait for readiness of the stack after creating it. The check is a HEAD request to the stack URL (Grafana instance). Defaults to `true`.
     * 
     */
    public Output<Optional<Boolean>> waitForReadiness() {
        return Codegen.optional(this.waitForReadiness);
    }
    /**
     * How long to wait for readiness (if enabled). Defaults to `5m0s`.
     * 
     */
    @Export(name="waitForReadinessTimeout", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> waitForReadinessTimeout;

    /**
     * @return How long to wait for readiness (if enabled). Defaults to `5m0s`.
     * 
     */
    public Output<Optional<String>> waitForReadinessTimeout() {
        return Codegen.optional(this.waitForReadinessTimeout);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public CloudStack(String name) {
        this(name, CloudStackArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public CloudStack(String name, CloudStackArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public CloudStack(String name, CloudStackArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("grafana:index/cloudStack:CloudStack", name, args == null ? CloudStackArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private CloudStack(String name, Output<String> id, @Nullable CloudStackState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("grafana:index/cloudStack:CloudStack", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static CloudStack get(String name, Output<String> id, @Nullable CloudStackState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new CloudStack(name, id, state, options);
    }
}
