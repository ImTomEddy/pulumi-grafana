// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.grafana.inputs.FolderPermissionPermissionArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FolderPermissionArgs extends com.pulumi.resources.ResourceArgs {

    public static final FolderPermissionArgs Empty = new FolderPermissionArgs();

    /**
     * The UID of the folder.
     * 
     */
    @Import(name="folderUid", required=true)
    private Output<String> folderUid;

    /**
     * @return The UID of the folder.
     * 
     */
    public Output<String> folderUid() {
        return this.folderUid;
    }

    /**
     * The Organization ID. If not set, the Org ID defined in the provider block will be used.
     * 
     */
    @Import(name="orgId")
    private @Nullable Output<String> orgId;

    /**
     * @return The Organization ID. If not set, the Org ID defined in the provider block will be used.
     * 
     */
    public Optional<Output<String>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * The permission items to add/update. Items that are omitted from the list will be removed.
     * 
     */
    @Import(name="permissions", required=true)
    private Output<List<FolderPermissionPermissionArgs>> permissions;

    /**
     * @return The permission items to add/update. Items that are omitted from the list will be removed.
     * 
     */
    public Output<List<FolderPermissionPermissionArgs>> permissions() {
        return this.permissions;
    }

    private FolderPermissionArgs() {}

    private FolderPermissionArgs(FolderPermissionArgs $) {
        this.folderUid = $.folderUid;
        this.orgId = $.orgId;
        this.permissions = $.permissions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FolderPermissionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FolderPermissionArgs $;

        public Builder() {
            $ = new FolderPermissionArgs();
        }

        public Builder(FolderPermissionArgs defaults) {
            $ = new FolderPermissionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param folderUid The UID of the folder.
         * 
         * @return builder
         * 
         */
        public Builder folderUid(Output<String> folderUid) {
            $.folderUid = folderUid;
            return this;
        }

        /**
         * @param folderUid The UID of the folder.
         * 
         * @return builder
         * 
         */
        public Builder folderUid(String folderUid) {
            return folderUid(Output.of(folderUid));
        }

        /**
         * @param orgId The Organization ID. If not set, the Org ID defined in the provider block will be used.
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId The Organization ID. If not set, the Org ID defined in the provider block will be used.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param permissions The permission items to add/update. Items that are omitted from the list will be removed.
         * 
         * @return builder
         * 
         */
        public Builder permissions(Output<List<FolderPermissionPermissionArgs>> permissions) {
            $.permissions = permissions;
            return this;
        }

        /**
         * @param permissions The permission items to add/update. Items that are omitted from the list will be removed.
         * 
         * @return builder
         * 
         */
        public Builder permissions(List<FolderPermissionPermissionArgs> permissions) {
            return permissions(Output.of(permissions));
        }

        /**
         * @param permissions The permission items to add/update. Items that are omitted from the list will be removed.
         * 
         * @return builder
         * 
         */
        public Builder permissions(FolderPermissionPermissionArgs... permissions) {
            return permissions(List.of(permissions));
        }

        public FolderPermissionArgs build() {
            $.folderUid = Objects.requireNonNull($.folderUid, "expected parameter 'folderUid' to be non-null");
            $.permissions = Objects.requireNonNull($.permissions, "expected parameter 'permissions' to be non-null");
            return $;
        }
    }

}
