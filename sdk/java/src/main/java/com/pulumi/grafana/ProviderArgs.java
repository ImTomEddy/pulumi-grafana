// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProviderArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProviderArgs Empty = new ProviderArgs();

    /**
     * API token or basic auth `username:password`. May alternatively be set via the `GRAFANA_AUTH` environment variable.
     * 
     */
    @Import(name="auth")
    private @Nullable Output<String> auth;

    /**
     * @return API token or basic auth `username:password`. May alternatively be set via the `GRAFANA_AUTH` environment variable.
     * 
     */
    public Optional<Output<String>> auth() {
        return Optional.ofNullable(this.auth);
    }

    /**
     * Certificate CA bundle to use to verify the Grafana server&#39;s certificate. May alternatively be set via the
     * `GRAFANA_CA_CERT` environment variable.
     * 
     */
    @Import(name="caCert")
    private @Nullable Output<String> caCert;

    /**
     * @return Certificate CA bundle to use to verify the Grafana server&#39;s certificate. May alternatively be set via the
     * `GRAFANA_CA_CERT` environment variable.
     * 
     */
    public Optional<Output<String>> caCert() {
        return Optional.ofNullable(this.caCert);
    }

    /**
     * API key for Grafana Cloud. May alternatively be set via the `GRAFANA_CLOUD_API_KEY` environment variable.
     * 
     */
    @Import(name="cloudApiKey")
    private @Nullable Output<String> cloudApiKey;

    /**
     * @return API key for Grafana Cloud. May alternatively be set via the `GRAFANA_CLOUD_API_KEY` environment variable.
     * 
     */
    public Optional<Output<String>> cloudApiKey() {
        return Optional.ofNullable(this.cloudApiKey);
    }

    /**
     * Grafana Cloud&#39;s API URL. May alternatively be set via the `GRAFANA_CLOUD_API_URL` environment variable.
     * 
     */
    @Import(name="cloudApiUrl")
    private @Nullable Output<String> cloudApiUrl;

    /**
     * @return Grafana Cloud&#39;s API URL. May alternatively be set via the `GRAFANA_CLOUD_API_URL` environment variable.
     * 
     */
    public Optional<Output<String>> cloudApiUrl() {
        return Optional.ofNullable(this.cloudApiUrl);
    }

    /**
     * Optional. HTTP headers mapping keys to values used for accessing the Grafana API. May alternatively be set via the
     * `GRAFANA_HTTP_HEADERS` environment variable in JSON format.
     * 
     */
    @Import(name="httpHeaders", json=true)
    private @Nullable Output<Map<String,String>> httpHeaders;

    /**
     * @return Optional. HTTP headers mapping keys to values used for accessing the Grafana API. May alternatively be set via the
     * `GRAFANA_HTTP_HEADERS` environment variable in JSON format.
     * 
     */
    public Optional<Output<Map<String,String>>> httpHeaders() {
        return Optional.ofNullable(this.httpHeaders);
    }

    /**
     * Skip TLS certificate verification. May alternatively be set via the `GRAFANA_INSECURE_SKIP_VERIFY` environment variable.
     * 
     */
    @Import(name="insecureSkipVerify", json=true)
    private @Nullable Output<Boolean> insecureSkipVerify;

    /**
     * @return Skip TLS certificate verification. May alternatively be set via the `GRAFANA_INSECURE_SKIP_VERIFY` environment variable.
     * 
     */
    public Optional<Output<Boolean>> insecureSkipVerify() {
        return Optional.ofNullable(this.insecureSkipVerify);
    }

    /**
     * A Grafana OnCall access token. May alternatively be set via the `GRAFANA_ONCALL_ACCESS_TOKEN` environment variable.
     * 
     */
    @Import(name="oncallAccessToken")
    private @Nullable Output<String> oncallAccessToken;

    /**
     * @return A Grafana OnCall access token. May alternatively be set via the `GRAFANA_ONCALL_ACCESS_TOKEN` environment variable.
     * 
     */
    public Optional<Output<String>> oncallAccessToken() {
        return Optional.ofNullable(this.oncallAccessToken);
    }

    /**
     * An Grafana OnCall backend address. May alternatively be set via the `GRAFANA_ONCALL_URL` environment variable.
     * 
     */
    @Import(name="oncallUrl")
    private @Nullable Output<String> oncallUrl;

    /**
     * @return An Grafana OnCall backend address. May alternatively be set via the `GRAFANA_ONCALL_URL` environment variable.
     * 
     */
    public Optional<Output<String>> oncallUrl() {
        return Optional.ofNullable(this.oncallUrl);
    }

    /**
     * The organization id to operate on within grafana. May alternatively be set via the `GRAFANA_ORG_ID` environment
     * variable.
     * 
     */
    @Import(name="orgId", json=true)
    private @Nullable Output<Integer> orgId;

    /**
     * @return The organization id to operate on within grafana. May alternatively be set via the `GRAFANA_ORG_ID` environment
     * variable.
     * 
     */
    public Optional<Output<Integer>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * The amount of retries to use for Grafana API calls. May alternatively be set via the `GRAFANA_RETRIES` environment
     * variable.
     * 
     */
    @Import(name="retries", json=true)
    private @Nullable Output<Integer> retries;

    /**
     * @return The amount of retries to use for Grafana API calls. May alternatively be set via the `GRAFANA_RETRIES` environment
     * variable.
     * 
     */
    public Optional<Output<Integer>> retries() {
        return Optional.ofNullable(this.retries);
    }

    /**
     * A Synthetic Monitoring access token. May alternatively be set via the `GRAFANA_SM_ACCESS_TOKEN` environment variable.
     * 
     */
    @Import(name="smAccessToken")
    private @Nullable Output<String> smAccessToken;

    /**
     * @return A Synthetic Monitoring access token. May alternatively be set via the `GRAFANA_SM_ACCESS_TOKEN` environment variable.
     * 
     */
    public Optional<Output<String>> smAccessToken() {
        return Optional.ofNullable(this.smAccessToken);
    }

    /**
     * Synthetic monitoring backend address. May alternatively be set via the `GRAFANA_SM_URL` environment variable. The
     * correct value for each service region is cited in the [Synthetic Monitoring
     * documentation](https://grafana.com/docs/grafana-cloud/synthetic-monitoring/private-probes/#probe-api-server-url). Note
     * the `sm_url` value is optional, but it must correspond with the value specified as the `region_slug` in the
     * `grafana_cloud_stack` resource. Also note that when a Terraform configuration contains multiple provider instances
     * managing SM resources associated with the same Grafana stack, specifying an explicit `sm_url` set to the same value for
     * each provider ensures all providers interact with the same SM API.
     * 
     */
    @Import(name="smUrl")
    private @Nullable Output<String> smUrl;

    /**
     * @return Synthetic monitoring backend address. May alternatively be set via the `GRAFANA_SM_URL` environment variable. The
     * correct value for each service region is cited in the [Synthetic Monitoring
     * documentation](https://grafana.com/docs/grafana-cloud/synthetic-monitoring/private-probes/#probe-api-server-url). Note
     * the `sm_url` value is optional, but it must correspond with the value specified as the `region_slug` in the
     * `grafana_cloud_stack` resource. Also note that when a Terraform configuration contains multiple provider instances
     * managing SM resources associated with the same Grafana stack, specifying an explicit `sm_url` set to the same value for
     * each provider ensures all providers interact with the same SM API.
     * 
     */
    public Optional<Output<String>> smUrl() {
        return Optional.ofNullable(this.smUrl);
    }

    /**
     * Set to true if you want to save only the sha256sum instead of complete dashboard model JSON in the tfstate.
     * 
     */
    @Import(name="storeDashboardSha256", json=true)
    private @Nullable Output<Boolean> storeDashboardSha256;

    /**
     * @return Set to true if you want to save only the sha256sum instead of complete dashboard model JSON in the tfstate.
     * 
     */
    public Optional<Output<Boolean>> storeDashboardSha256() {
        return Optional.ofNullable(this.storeDashboardSha256);
    }

    /**
     * Client TLS certificate file to use to authenticate to the Grafana server. May alternatively be set via the
     * `GRAFANA_TLS_CERT` environment variable.
     * 
     */
    @Import(name="tlsCert")
    private @Nullable Output<String> tlsCert;

    /**
     * @return Client TLS certificate file to use to authenticate to the Grafana server. May alternatively be set via the
     * `GRAFANA_TLS_CERT` environment variable.
     * 
     */
    public Optional<Output<String>> tlsCert() {
        return Optional.ofNullable(this.tlsCert);
    }

    /**
     * Client TLS key file to use to authenticate to the Grafana server. May alternatively be set via the `GRAFANA_TLS_KEY`
     * environment variable.
     * 
     */
    @Import(name="tlsKey")
    private @Nullable Output<String> tlsKey;

    /**
     * @return Client TLS key file to use to authenticate to the Grafana server. May alternatively be set via the `GRAFANA_TLS_KEY`
     * environment variable.
     * 
     */
    public Optional<Output<String>> tlsKey() {
        return Optional.ofNullable(this.tlsKey);
    }

    /**
     * The root URL of a Grafana server. May alternatively be set via the `GRAFANA_URL` environment variable.
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return The root URL of a Grafana server. May alternatively be set via the `GRAFANA_URL` environment variable.
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    private ProviderArgs() {}

    private ProviderArgs(ProviderArgs $) {
        this.auth = $.auth;
        this.caCert = $.caCert;
        this.cloudApiKey = $.cloudApiKey;
        this.cloudApiUrl = $.cloudApiUrl;
        this.httpHeaders = $.httpHeaders;
        this.insecureSkipVerify = $.insecureSkipVerify;
        this.oncallAccessToken = $.oncallAccessToken;
        this.oncallUrl = $.oncallUrl;
        this.orgId = $.orgId;
        this.retries = $.retries;
        this.smAccessToken = $.smAccessToken;
        this.smUrl = $.smUrl;
        this.storeDashboardSha256 = $.storeDashboardSha256;
        this.tlsCert = $.tlsCert;
        this.tlsKey = $.tlsKey;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProviderArgs $;

        public Builder() {
            $ = new ProviderArgs();
        }

        public Builder(ProviderArgs defaults) {
            $ = new ProviderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param auth API token or basic auth `username:password`. May alternatively be set via the `GRAFANA_AUTH` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder auth(@Nullable Output<String> auth) {
            $.auth = auth;
            return this;
        }

        /**
         * @param auth API token or basic auth `username:password`. May alternatively be set via the `GRAFANA_AUTH` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder auth(String auth) {
            return auth(Output.of(auth));
        }

        /**
         * @param caCert Certificate CA bundle to use to verify the Grafana server&#39;s certificate. May alternatively be set via the
         * `GRAFANA_CA_CERT` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder caCert(@Nullable Output<String> caCert) {
            $.caCert = caCert;
            return this;
        }

        /**
         * @param caCert Certificate CA bundle to use to verify the Grafana server&#39;s certificate. May alternatively be set via the
         * `GRAFANA_CA_CERT` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder caCert(String caCert) {
            return caCert(Output.of(caCert));
        }

        /**
         * @param cloudApiKey API key for Grafana Cloud. May alternatively be set via the `GRAFANA_CLOUD_API_KEY` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder cloudApiKey(@Nullable Output<String> cloudApiKey) {
            $.cloudApiKey = cloudApiKey;
            return this;
        }

        /**
         * @param cloudApiKey API key for Grafana Cloud. May alternatively be set via the `GRAFANA_CLOUD_API_KEY` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder cloudApiKey(String cloudApiKey) {
            return cloudApiKey(Output.of(cloudApiKey));
        }

        /**
         * @param cloudApiUrl Grafana Cloud&#39;s API URL. May alternatively be set via the `GRAFANA_CLOUD_API_URL` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder cloudApiUrl(@Nullable Output<String> cloudApiUrl) {
            $.cloudApiUrl = cloudApiUrl;
            return this;
        }

        /**
         * @param cloudApiUrl Grafana Cloud&#39;s API URL. May alternatively be set via the `GRAFANA_CLOUD_API_URL` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder cloudApiUrl(String cloudApiUrl) {
            return cloudApiUrl(Output.of(cloudApiUrl));
        }

        /**
         * @param httpHeaders Optional. HTTP headers mapping keys to values used for accessing the Grafana API. May alternatively be set via the
         * `GRAFANA_HTTP_HEADERS` environment variable in JSON format.
         * 
         * @return builder
         * 
         */
        public Builder httpHeaders(@Nullable Output<Map<String,String>> httpHeaders) {
            $.httpHeaders = httpHeaders;
            return this;
        }

        /**
         * @param httpHeaders Optional. HTTP headers mapping keys to values used for accessing the Grafana API. May alternatively be set via the
         * `GRAFANA_HTTP_HEADERS` environment variable in JSON format.
         * 
         * @return builder
         * 
         */
        public Builder httpHeaders(Map<String,String> httpHeaders) {
            return httpHeaders(Output.of(httpHeaders));
        }

        /**
         * @param insecureSkipVerify Skip TLS certificate verification. May alternatively be set via the `GRAFANA_INSECURE_SKIP_VERIFY` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder insecureSkipVerify(@Nullable Output<Boolean> insecureSkipVerify) {
            $.insecureSkipVerify = insecureSkipVerify;
            return this;
        }

        /**
         * @param insecureSkipVerify Skip TLS certificate verification. May alternatively be set via the `GRAFANA_INSECURE_SKIP_VERIFY` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder insecureSkipVerify(Boolean insecureSkipVerify) {
            return insecureSkipVerify(Output.of(insecureSkipVerify));
        }

        /**
         * @param oncallAccessToken A Grafana OnCall access token. May alternatively be set via the `GRAFANA_ONCALL_ACCESS_TOKEN` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder oncallAccessToken(@Nullable Output<String> oncallAccessToken) {
            $.oncallAccessToken = oncallAccessToken;
            return this;
        }

        /**
         * @param oncallAccessToken A Grafana OnCall access token. May alternatively be set via the `GRAFANA_ONCALL_ACCESS_TOKEN` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder oncallAccessToken(String oncallAccessToken) {
            return oncallAccessToken(Output.of(oncallAccessToken));
        }

        /**
         * @param oncallUrl An Grafana OnCall backend address. May alternatively be set via the `GRAFANA_ONCALL_URL` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder oncallUrl(@Nullable Output<String> oncallUrl) {
            $.oncallUrl = oncallUrl;
            return this;
        }

        /**
         * @param oncallUrl An Grafana OnCall backend address. May alternatively be set via the `GRAFANA_ONCALL_URL` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder oncallUrl(String oncallUrl) {
            return oncallUrl(Output.of(oncallUrl));
        }

        /**
         * @param orgId The organization id to operate on within grafana. May alternatively be set via the `GRAFANA_ORG_ID` environment
         * variable.
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable Output<Integer> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId The organization id to operate on within grafana. May alternatively be set via the `GRAFANA_ORG_ID` environment
         * variable.
         * 
         * @return builder
         * 
         */
        public Builder orgId(Integer orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param retries The amount of retries to use for Grafana API calls. May alternatively be set via the `GRAFANA_RETRIES` environment
         * variable.
         * 
         * @return builder
         * 
         */
        public Builder retries(@Nullable Output<Integer> retries) {
            $.retries = retries;
            return this;
        }

        /**
         * @param retries The amount of retries to use for Grafana API calls. May alternatively be set via the `GRAFANA_RETRIES` environment
         * variable.
         * 
         * @return builder
         * 
         */
        public Builder retries(Integer retries) {
            return retries(Output.of(retries));
        }

        /**
         * @param smAccessToken A Synthetic Monitoring access token. May alternatively be set via the `GRAFANA_SM_ACCESS_TOKEN` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder smAccessToken(@Nullable Output<String> smAccessToken) {
            $.smAccessToken = smAccessToken;
            return this;
        }

        /**
         * @param smAccessToken A Synthetic Monitoring access token. May alternatively be set via the `GRAFANA_SM_ACCESS_TOKEN` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder smAccessToken(String smAccessToken) {
            return smAccessToken(Output.of(smAccessToken));
        }

        /**
         * @param smUrl Synthetic monitoring backend address. May alternatively be set via the `GRAFANA_SM_URL` environment variable. The
         * correct value for each service region is cited in the [Synthetic Monitoring
         * documentation](https://grafana.com/docs/grafana-cloud/synthetic-monitoring/private-probes/#probe-api-server-url). Note
         * the `sm_url` value is optional, but it must correspond with the value specified as the `region_slug` in the
         * `grafana_cloud_stack` resource. Also note that when a Terraform configuration contains multiple provider instances
         * managing SM resources associated with the same Grafana stack, specifying an explicit `sm_url` set to the same value for
         * each provider ensures all providers interact with the same SM API.
         * 
         * @return builder
         * 
         */
        public Builder smUrl(@Nullable Output<String> smUrl) {
            $.smUrl = smUrl;
            return this;
        }

        /**
         * @param smUrl Synthetic monitoring backend address. May alternatively be set via the `GRAFANA_SM_URL` environment variable. The
         * correct value for each service region is cited in the [Synthetic Monitoring
         * documentation](https://grafana.com/docs/grafana-cloud/synthetic-monitoring/private-probes/#probe-api-server-url). Note
         * the `sm_url` value is optional, but it must correspond with the value specified as the `region_slug` in the
         * `grafana_cloud_stack` resource. Also note that when a Terraform configuration contains multiple provider instances
         * managing SM resources associated with the same Grafana stack, specifying an explicit `sm_url` set to the same value for
         * each provider ensures all providers interact with the same SM API.
         * 
         * @return builder
         * 
         */
        public Builder smUrl(String smUrl) {
            return smUrl(Output.of(smUrl));
        }

        /**
         * @param storeDashboardSha256 Set to true if you want to save only the sha256sum instead of complete dashboard model JSON in the tfstate.
         * 
         * @return builder
         * 
         */
        public Builder storeDashboardSha256(@Nullable Output<Boolean> storeDashboardSha256) {
            $.storeDashboardSha256 = storeDashboardSha256;
            return this;
        }

        /**
         * @param storeDashboardSha256 Set to true if you want to save only the sha256sum instead of complete dashboard model JSON in the tfstate.
         * 
         * @return builder
         * 
         */
        public Builder storeDashboardSha256(Boolean storeDashboardSha256) {
            return storeDashboardSha256(Output.of(storeDashboardSha256));
        }

        /**
         * @param tlsCert Client TLS certificate file to use to authenticate to the Grafana server. May alternatively be set via the
         * `GRAFANA_TLS_CERT` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder tlsCert(@Nullable Output<String> tlsCert) {
            $.tlsCert = tlsCert;
            return this;
        }

        /**
         * @param tlsCert Client TLS certificate file to use to authenticate to the Grafana server. May alternatively be set via the
         * `GRAFANA_TLS_CERT` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder tlsCert(String tlsCert) {
            return tlsCert(Output.of(tlsCert));
        }

        /**
         * @param tlsKey Client TLS key file to use to authenticate to the Grafana server. May alternatively be set via the `GRAFANA_TLS_KEY`
         * environment variable.
         * 
         * @return builder
         * 
         */
        public Builder tlsKey(@Nullable Output<String> tlsKey) {
            $.tlsKey = tlsKey;
            return this;
        }

        /**
         * @param tlsKey Client TLS key file to use to authenticate to the Grafana server. May alternatively be set via the `GRAFANA_TLS_KEY`
         * environment variable.
         * 
         * @return builder
         * 
         */
        public Builder tlsKey(String tlsKey) {
            return tlsKey(Output.of(tlsKey));
        }

        /**
         * @param url The root URL of a Grafana server. May alternatively be set via the `GRAFANA_URL` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url The root URL of a Grafana server. May alternatively be set via the `GRAFANA_URL` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        public ProviderArgs build() {
            $.auth = Codegen.stringProp("auth").output().arg($.auth).env("GRAFANA_AUTH").getNullable();
            $.caCert = Codegen.stringProp("caCert").output().arg($.caCert).env("GRAFANA_CA_CERT").getNullable();
            $.cloudApiKey = Codegen.stringProp("cloudApiKey").output().arg($.cloudApiKey).env("GRAFANA_CLOUD_API_KEY").getNullable();
            $.cloudApiUrl = Codegen.stringProp("cloudApiUrl").output().arg($.cloudApiUrl).env("GRAFANA_CLOUD_API_URL").getNullable();
            $.insecureSkipVerify = Codegen.booleanProp("insecureSkipVerify").output().arg($.insecureSkipVerify).env("GRAFANA_INSECURE_SKIP_VERIFY").getNullable();
            $.oncallAccessToken = Codegen.stringProp("oncallAccessToken").output().arg($.oncallAccessToken).env("GRAFANA_ONCALL_ACCESS_TOKEN").getNullable();
            $.oncallUrl = Codegen.stringProp("oncallUrl").output().arg($.oncallUrl).env("GRAFANA_ONCALL_URL").getNullable();
            $.orgId = Codegen.integerProp("orgId").output().arg($.orgId).env("GRAFANA_ORG_ID").getNullable();
            $.retries = Codegen.integerProp("retries").output().arg($.retries).env("GRAFANA_RETRIES").getNullable();
            $.smAccessToken = Codegen.stringProp("smAccessToken").output().arg($.smAccessToken).env("GRAFANA_SM_ACCESS_TOKEN").getNullable();
            $.smUrl = Codegen.stringProp("smUrl").output().arg($.smUrl).env("GRAFANA_SM_URL").getNullable();
            $.storeDashboardSha256 = Codegen.booleanProp("storeDashboardSha256").output().arg($.storeDashboardSha256).env("GRAFANA_STORE_DASHBOARD_SHA256").getNullable();
            $.tlsCert = Codegen.stringProp("tlsCert").output().arg($.tlsCert).env("GRAFANA_TLS_CERT").getNullable();
            $.tlsKey = Codegen.stringProp("tlsKey").output().arg($.tlsKey).env("GRAFANA_TLS_KEY").getNullable();
            $.url = Codegen.stringProp("url").output().arg($.url).env("GRAFANA_URL").getNullable();
            return $;
        }
    }

}
