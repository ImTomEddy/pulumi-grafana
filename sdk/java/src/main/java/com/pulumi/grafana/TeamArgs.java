// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TeamArgs extends com.pulumi.resources.ResourceArgs {

    public static final TeamArgs Empty = new TeamArgs();

    /**
     * An email address for the team.
     * 
     */
    @Import(name="email")
    private @Nullable Output<String> email;

    /**
     * @return An email address for the team.
     * 
     */
    public Optional<Output<String>> email() {
        return Optional.ofNullable(this.email);
    }

    /**
     * Ignores team members that have been added to team by [Team
     * Sync](https://grafana.com/docs/grafana/latest/setup-grafana/configure-security/configure-team-sync/). Team Sync can be
     * provisioned using [grafana_team_external_group
     * resource](https://registry.terraform.io/providers/grafana/grafana/latest/docs/resources/team_external_group).
     * 
     */
    @Import(name="ignoreExternallySyncedMembers")
    private @Nullable Output<Boolean> ignoreExternallySyncedMembers;

    /**
     * @return Ignores team members that have been added to team by [Team
     * Sync](https://grafana.com/docs/grafana/latest/setup-grafana/configure-security/configure-team-sync/). Team Sync can be
     * provisioned using [grafana_team_external_group
     * resource](https://registry.terraform.io/providers/grafana/grafana/latest/docs/resources/team_external_group).
     * 
     */
    public Optional<Output<Boolean>> ignoreExternallySyncedMembers() {
        return Optional.ofNullable(this.ignoreExternallySyncedMembers);
    }

    /**
     * A set of email addresses corresponding to users who should be given membership
     * to the team. Note: users specified here must already exist in Grafana.
     * 
     */
    @Import(name="members")
    private @Nullable Output<List<String>> members;

    /**
     * @return A set of email addresses corresponding to users who should be given membership
     * to the team. Note: users specified here must already exist in Grafana.
     * 
     */
    public Optional<Output<List<String>>> members() {
        return Optional.ofNullable(this.members);
    }

    /**
     * The display name for the Grafana team created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The display name for the Grafana team created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private TeamArgs() {}

    private TeamArgs(TeamArgs $) {
        this.email = $.email;
        this.ignoreExternallySyncedMembers = $.ignoreExternallySyncedMembers;
        this.members = $.members;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TeamArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TeamArgs $;

        public Builder() {
            $ = new TeamArgs();
        }

        public Builder(TeamArgs defaults) {
            $ = new TeamArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param email An email address for the team.
         * 
         * @return builder
         * 
         */
        public Builder email(@Nullable Output<String> email) {
            $.email = email;
            return this;
        }

        /**
         * @param email An email address for the team.
         * 
         * @return builder
         * 
         */
        public Builder email(String email) {
            return email(Output.of(email));
        }

        /**
         * @param ignoreExternallySyncedMembers Ignores team members that have been added to team by [Team
         * Sync](https://grafana.com/docs/grafana/latest/setup-grafana/configure-security/configure-team-sync/). Team Sync can be
         * provisioned using [grafana_team_external_group
         * resource](https://registry.terraform.io/providers/grafana/grafana/latest/docs/resources/team_external_group).
         * 
         * @return builder
         * 
         */
        public Builder ignoreExternallySyncedMembers(@Nullable Output<Boolean> ignoreExternallySyncedMembers) {
            $.ignoreExternallySyncedMembers = ignoreExternallySyncedMembers;
            return this;
        }

        /**
         * @param ignoreExternallySyncedMembers Ignores team members that have been added to team by [Team
         * Sync](https://grafana.com/docs/grafana/latest/setup-grafana/configure-security/configure-team-sync/). Team Sync can be
         * provisioned using [grafana_team_external_group
         * resource](https://registry.terraform.io/providers/grafana/grafana/latest/docs/resources/team_external_group).
         * 
         * @return builder
         * 
         */
        public Builder ignoreExternallySyncedMembers(Boolean ignoreExternallySyncedMembers) {
            return ignoreExternallySyncedMembers(Output.of(ignoreExternallySyncedMembers));
        }

        /**
         * @param members A set of email addresses corresponding to users who should be given membership
         * to the team. Note: users specified here must already exist in Grafana.
         * 
         * @return builder
         * 
         */
        public Builder members(@Nullable Output<List<String>> members) {
            $.members = members;
            return this;
        }

        /**
         * @param members A set of email addresses corresponding to users who should be given membership
         * to the team. Note: users specified here must already exist in Grafana.
         * 
         * @return builder
         * 
         */
        public Builder members(List<String> members) {
            return members(Output.of(members));
        }

        /**
         * @param members A set of email addresses corresponding to users who should be given membership
         * to the team. Note: users specified here must already exist in Grafana.
         * 
         * @return builder
         * 
         */
        public Builder members(String... members) {
            return members(List.of(members));
        }

        /**
         * @param name The display name for the Grafana team created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The display name for the Grafana team created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public TeamArgs build() {
            return $;
        }
    }

}
