// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.grafana.outputs.SLOAlertingAnnotation;
import com.pulumi.grafana.outputs.SLOAlertingFastburn;
import com.pulumi.grafana.outputs.SLOAlertingLabel;
import com.pulumi.grafana.outputs.SLOAlertingSlowburn;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class SLOAlerting {
    /**
     * @return Annotations will be attached to all alerts generated by any of these rules.
     * 
     */
    private @Nullable List<SLOAlertingAnnotation> annotations;
    /**
     * @return Alerting Rules generated for Fast Burn alerts
     * 
     */
    private @Nullable List<SLOAlertingFastburn> fastburns;
    /**
     * @return Labels will be attached to all alerts generated by any of these rules.
     * 
     */
    private @Nullable List<SLOAlertingLabel> labels;
    /**
     * @return Alerting Rules generated for Slow Burn alerts
     * 
     */
    private @Nullable List<SLOAlertingSlowburn> slowburns;

    private SLOAlerting() {}
    /**
     * @return Annotations will be attached to all alerts generated by any of these rules.
     * 
     */
    public List<SLOAlertingAnnotation> annotations() {
        return this.annotations == null ? List.of() : this.annotations;
    }
    /**
     * @return Alerting Rules generated for Fast Burn alerts
     * 
     */
    public List<SLOAlertingFastburn> fastburns() {
        return this.fastburns == null ? List.of() : this.fastburns;
    }
    /**
     * @return Labels will be attached to all alerts generated by any of these rules.
     * 
     */
    public List<SLOAlertingLabel> labels() {
        return this.labels == null ? List.of() : this.labels;
    }
    /**
     * @return Alerting Rules generated for Slow Burn alerts
     * 
     */
    public List<SLOAlertingSlowburn> slowburns() {
        return this.slowburns == null ? List.of() : this.slowburns;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SLOAlerting defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<SLOAlertingAnnotation> annotations;
        private @Nullable List<SLOAlertingFastburn> fastburns;
        private @Nullable List<SLOAlertingLabel> labels;
        private @Nullable List<SLOAlertingSlowburn> slowburns;
        public Builder() {}
        public Builder(SLOAlerting defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.fastburns = defaults.fastburns;
    	      this.labels = defaults.labels;
    	      this.slowburns = defaults.slowburns;
        }

        @CustomType.Setter
        public Builder annotations(@Nullable List<SLOAlertingAnnotation> annotations) {
            this.annotations = annotations;
            return this;
        }
        public Builder annotations(SLOAlertingAnnotation... annotations) {
            return annotations(List.of(annotations));
        }
        @CustomType.Setter
        public Builder fastburns(@Nullable List<SLOAlertingFastburn> fastburns) {
            this.fastburns = fastburns;
            return this;
        }
        public Builder fastburns(SLOAlertingFastburn... fastburns) {
            return fastburns(List.of(fastburns));
        }
        @CustomType.Setter
        public Builder labels(@Nullable List<SLOAlertingLabel> labels) {
            this.labels = labels;
            return this;
        }
        public Builder labels(SLOAlertingLabel... labels) {
            return labels(List.of(labels));
        }
        @CustomType.Setter
        public Builder slowburns(@Nullable List<SLOAlertingSlowburn> slowburns) {
            this.slowburns = slowburns;
            return this;
        }
        public Builder slowburns(SLOAlertingSlowburn... slowburns) {
            return slowburns(List.of(slowburns));
        }
        public SLOAlerting build() {
            final var o = new SLOAlerting();
            o.annotations = annotations;
            o.fastburns = fastburns;
            o.labels = labels;
            o.slowburns = slowburns;
            return o;
        }
    }
}
