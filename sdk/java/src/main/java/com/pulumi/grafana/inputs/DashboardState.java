// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DashboardState extends com.pulumi.resources.ResourceArgs {

    public static final DashboardState Empty = new DashboardState();

    /**
     * The complete dashboard model JSON.
     * 
     */
    @Import(name="configJson")
    private @Nullable Output<String> configJson;

    /**
     * @return The complete dashboard model JSON.
     * 
     */
    public Optional<Output<String>> configJson() {
        return Optional.ofNullable(this.configJson);
    }

    /**
     * The numeric ID of the dashboard computed by Grafana.
     * 
     */
    @Import(name="dashboardId")
    private @Nullable Output<Integer> dashboardId;

    /**
     * @return The numeric ID of the dashboard computed by Grafana.
     * 
     */
    public Optional<Output<Integer>> dashboardId() {
        return Optional.ofNullable(this.dashboardId);
    }

    /**
     * The id of the folder to save the dashboard in. This attribute is a string to reflect the type of the folder&#39;s id.
     * 
     */
    @Import(name="folder")
    private @Nullable Output<String> folder;

    /**
     * @return The id of the folder to save the dashboard in. This attribute is a string to reflect the type of the folder&#39;s id.
     * 
     */
    public Optional<Output<String>> folder() {
        return Optional.ofNullable(this.folder);
    }

    /**
     * Set a commit message for the version history.
     * 
     */
    @Import(name="message")
    private @Nullable Output<String> message;

    /**
     * @return Set a commit message for the version history.
     * 
     */
    public Optional<Output<String>> message() {
        return Optional.ofNullable(this.message);
    }

    /**
     * Set to true if you want to overwrite existing dashboard with newer version, same dashboard title in folder or same dashboard uid.
     * 
     */
    @Import(name="overwrite")
    private @Nullable Output<Boolean> overwrite;

    /**
     * @return Set to true if you want to overwrite existing dashboard with newer version, same dashboard title in folder or same dashboard uid.
     * 
     */
    public Optional<Output<Boolean>> overwrite() {
        return Optional.ofNullable(this.overwrite);
    }

    /**
     * URL friendly version of the dashboard title. This field is deprecated, please use `uid` instead.
     * 
     * @deprecated
     * Use `uid` instead.
     * 
     */
    @Deprecated /* Use `uid` instead. */
    @Import(name="slug")
    private @Nullable Output<String> slug;

    /**
     * @return URL friendly version of the dashboard title. This field is deprecated, please use `uid` instead.
     * 
     * @deprecated
     * Use `uid` instead.
     * 
     */
    @Deprecated /* Use `uid` instead. */
    public Optional<Output<String>> slug() {
        return Optional.ofNullable(this.slug);
    }

    /**
     * The unique identifier of a dashboard. This is used to construct its URL. It&#39;s automatically generated if not provided when creating a dashboard. The uid allows having consistent URLs for accessing dashboards and when syncing dashboards between multiple Grafana installs.
     * 
     */
    @Import(name="uid")
    private @Nullable Output<String> uid;

    /**
     * @return The unique identifier of a dashboard. This is used to construct its URL. It&#39;s automatically generated if not provided when creating a dashboard. The uid allows having consistent URLs for accessing dashboards and when syncing dashboards between multiple Grafana installs.
     * 
     */
    public Optional<Output<String>> uid() {
        return Optional.ofNullable(this.uid);
    }

    /**
     * The full URL of the dashboard.
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return The full URL of the dashboard.
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    /**
     * Whenever you save a version of your dashboard, a copy of that version is saved so that previous versions of your dashboard are not lost.
     * 
     */
    @Import(name="version")
    private @Nullable Output<Integer> version;

    /**
     * @return Whenever you save a version of your dashboard, a copy of that version is saved so that previous versions of your dashboard are not lost.
     * 
     */
    public Optional<Output<Integer>> version() {
        return Optional.ofNullable(this.version);
    }

    private DashboardState() {}

    private DashboardState(DashboardState $) {
        this.configJson = $.configJson;
        this.dashboardId = $.dashboardId;
        this.folder = $.folder;
        this.message = $.message;
        this.overwrite = $.overwrite;
        this.slug = $.slug;
        this.uid = $.uid;
        this.url = $.url;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DashboardState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DashboardState $;

        public Builder() {
            $ = new DashboardState();
        }

        public Builder(DashboardState defaults) {
            $ = new DashboardState(Objects.requireNonNull(defaults));
        }

        /**
         * @param configJson The complete dashboard model JSON.
         * 
         * @return builder
         * 
         */
        public Builder configJson(@Nullable Output<String> configJson) {
            $.configJson = configJson;
            return this;
        }

        /**
         * @param configJson The complete dashboard model JSON.
         * 
         * @return builder
         * 
         */
        public Builder configJson(String configJson) {
            return configJson(Output.of(configJson));
        }

        /**
         * @param dashboardId The numeric ID of the dashboard computed by Grafana.
         * 
         * @return builder
         * 
         */
        public Builder dashboardId(@Nullable Output<Integer> dashboardId) {
            $.dashboardId = dashboardId;
            return this;
        }

        /**
         * @param dashboardId The numeric ID of the dashboard computed by Grafana.
         * 
         * @return builder
         * 
         */
        public Builder dashboardId(Integer dashboardId) {
            return dashboardId(Output.of(dashboardId));
        }

        /**
         * @param folder The id of the folder to save the dashboard in. This attribute is a string to reflect the type of the folder&#39;s id.
         * 
         * @return builder
         * 
         */
        public Builder folder(@Nullable Output<String> folder) {
            $.folder = folder;
            return this;
        }

        /**
         * @param folder The id of the folder to save the dashboard in. This attribute is a string to reflect the type of the folder&#39;s id.
         * 
         * @return builder
         * 
         */
        public Builder folder(String folder) {
            return folder(Output.of(folder));
        }

        /**
         * @param message Set a commit message for the version history.
         * 
         * @return builder
         * 
         */
        public Builder message(@Nullable Output<String> message) {
            $.message = message;
            return this;
        }

        /**
         * @param message Set a commit message for the version history.
         * 
         * @return builder
         * 
         */
        public Builder message(String message) {
            return message(Output.of(message));
        }

        /**
         * @param overwrite Set to true if you want to overwrite existing dashboard with newer version, same dashboard title in folder or same dashboard uid.
         * 
         * @return builder
         * 
         */
        public Builder overwrite(@Nullable Output<Boolean> overwrite) {
            $.overwrite = overwrite;
            return this;
        }

        /**
         * @param overwrite Set to true if you want to overwrite existing dashboard with newer version, same dashboard title in folder or same dashboard uid.
         * 
         * @return builder
         * 
         */
        public Builder overwrite(Boolean overwrite) {
            return overwrite(Output.of(overwrite));
        }

        /**
         * @param slug URL friendly version of the dashboard title. This field is deprecated, please use `uid` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Use `uid` instead.
         * 
         */
        @Deprecated /* Use `uid` instead. */
        public Builder slug(@Nullable Output<String> slug) {
            $.slug = slug;
            return this;
        }

        /**
         * @param slug URL friendly version of the dashboard title. This field is deprecated, please use `uid` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Use `uid` instead.
         * 
         */
        @Deprecated /* Use `uid` instead. */
        public Builder slug(String slug) {
            return slug(Output.of(slug));
        }

        /**
         * @param uid The unique identifier of a dashboard. This is used to construct its URL. It&#39;s automatically generated if not provided when creating a dashboard. The uid allows having consistent URLs for accessing dashboards and when syncing dashboards between multiple Grafana installs.
         * 
         * @return builder
         * 
         */
        public Builder uid(@Nullable Output<String> uid) {
            $.uid = uid;
            return this;
        }

        /**
         * @param uid The unique identifier of a dashboard. This is used to construct its URL. It&#39;s automatically generated if not provided when creating a dashboard. The uid allows having consistent URLs for accessing dashboards and when syncing dashboards between multiple Grafana installs.
         * 
         * @return builder
         * 
         */
        public Builder uid(String uid) {
            return uid(Output.of(uid));
        }

        /**
         * @param url The full URL of the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url The full URL of the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        /**
         * @param version Whenever you save a version of your dashboard, a copy of that version is saved so that previous versions of your dashboard are not lost.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<Integer> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version Whenever you save a version of your dashboard, a copy of that version is saved so that previous versions of your dashboard are not lost.
         * 
         * @return builder
         * 
         */
        public Builder version(Integer version) {
            return version(Output.of(version));
        }

        public DashboardState build() {
            return $;
        }
    }

}
