// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class TeamExternalGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final TeamExternalGroupArgs Empty = new TeamExternalGroupArgs();

    /**
     * The team external groups list
     * 
     */
    @Import(name="groups", required=true)
    private Output<List<String>> groups;

    /**
     * @return The team external groups list
     * 
     */
    public Output<List<String>> groups() {
        return this.groups;
    }

    /**
     * The Team ID
     * 
     */
    @Import(name="teamId", required=true)
    private Output<String> teamId;

    /**
     * @return The Team ID
     * 
     */
    public Output<String> teamId() {
        return this.teamId;
    }

    private TeamExternalGroupArgs() {}

    private TeamExternalGroupArgs(TeamExternalGroupArgs $) {
        this.groups = $.groups;
        this.teamId = $.teamId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TeamExternalGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TeamExternalGroupArgs $;

        public Builder() {
            $ = new TeamExternalGroupArgs();
        }

        public Builder(TeamExternalGroupArgs defaults) {
            $ = new TeamExternalGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param groups The team external groups list
         * 
         * @return builder
         * 
         */
        public Builder groups(Output<List<String>> groups) {
            $.groups = groups;
            return this;
        }

        /**
         * @param groups The team external groups list
         * 
         * @return builder
         * 
         */
        public Builder groups(List<String> groups) {
            return groups(Output.of(groups));
        }

        /**
         * @param groups The team external groups list
         * 
         * @return builder
         * 
         */
        public Builder groups(String... groups) {
            return groups(List.of(groups));
        }

        /**
         * @param teamId The Team ID
         * 
         * @return builder
         * 
         */
        public Builder teamId(Output<String> teamId) {
            $.teamId = teamId;
            return this;
        }

        /**
         * @param teamId The Team ID
         * 
         * @return builder
         * 
         */
        public Builder teamId(String teamId) {
            return teamId(Output.of(teamId));
        }

        public TeamExternalGroupArgs build() {
            $.groups = Objects.requireNonNull($.groups, "expected parameter 'groups' to be non-null");
            $.teamId = Objects.requireNonNull($.teamId, "expected parameter 'teamId' to be non-null");
            return $;
        }
    }

}
