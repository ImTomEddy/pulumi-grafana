// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class CloudPluginInstallationArgs extends com.pulumi.resources.ResourceArgs {

    public static final CloudPluginInstallationArgs Empty = new CloudPluginInstallationArgs();

    /**
     * Slug of the plugin to be installed.
     * 
     */
    @Import(name="slug", required=true)
    private Output<String> slug;

    /**
     * @return Slug of the plugin to be installed.
     * 
     */
    public Output<String> slug() {
        return this.slug;
    }

    /**
     * The stack id to which the plugin should be installed.
     * 
     */
    @Import(name="stackSlug", required=true)
    private Output<String> stackSlug;

    /**
     * @return The stack id to which the plugin should be installed.
     * 
     */
    public Output<String> stackSlug() {
        return this.stackSlug;
    }

    /**
     * Version of the plugin to be installed.
     * 
     */
    @Import(name="version", required=true)
    private Output<String> version;

    /**
     * @return Version of the plugin to be installed.
     * 
     */
    public Output<String> version() {
        return this.version;
    }

    private CloudPluginInstallationArgs() {}

    private CloudPluginInstallationArgs(CloudPluginInstallationArgs $) {
        this.slug = $.slug;
        this.stackSlug = $.stackSlug;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CloudPluginInstallationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CloudPluginInstallationArgs $;

        public Builder() {
            $ = new CloudPluginInstallationArgs();
        }

        public Builder(CloudPluginInstallationArgs defaults) {
            $ = new CloudPluginInstallationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param slug Slug of the plugin to be installed.
         * 
         * @return builder
         * 
         */
        public Builder slug(Output<String> slug) {
            $.slug = slug;
            return this;
        }

        /**
         * @param slug Slug of the plugin to be installed.
         * 
         * @return builder
         * 
         */
        public Builder slug(String slug) {
            return slug(Output.of(slug));
        }

        /**
         * @param stackSlug The stack id to which the plugin should be installed.
         * 
         * @return builder
         * 
         */
        public Builder stackSlug(Output<String> stackSlug) {
            $.stackSlug = stackSlug;
            return this;
        }

        /**
         * @param stackSlug The stack id to which the plugin should be installed.
         * 
         * @return builder
         * 
         */
        public Builder stackSlug(String stackSlug) {
            return stackSlug(Output.of(stackSlug));
        }

        /**
         * @param version Version of the plugin to be installed.
         * 
         * @return builder
         * 
         */
        public Builder version(Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version Version of the plugin to be installed.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public CloudPluginInstallationArgs build() {
            $.slug = Objects.requireNonNull($.slug, "expected parameter 'slug' to be non-null");
            $.stackSlug = Objects.requireNonNull($.stackSlug, "expected parameter 'stackSlug' to be non-null");
            $.version = Objects.requireNonNull($.version, "expected parameter 'version' to be non-null");
            return $;
        }
    }

}
