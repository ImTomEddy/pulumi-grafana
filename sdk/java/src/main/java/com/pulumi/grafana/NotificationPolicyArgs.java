// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.grafana.inputs.NotificationPolicyPolicyArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NotificationPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final NotificationPolicyArgs Empty = new NotificationPolicyArgs();

    /**
     * The contact point to route notifications that match this rule to.
     * 
     */
    @Import(name="contactPoint", required=true)
    private Output<String> contactPoint;

    /**
     * @return The contact point to route notifications that match this rule to.
     * 
     */
    public Output<String> contactPoint() {
        return this.contactPoint;
    }

    /**
     * A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping. Required for root policy only. If empty, the parent grouping is used.
     * 
     */
    @Import(name="groupBies", required=true)
    private Output<List<String>> groupBies;

    /**
     * @return A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping. Required for root policy only. If empty, the parent grouping is used.
     * 
     */
    public Output<List<String>> groupBies() {
        return this.groupBies;
    }

    /**
     * Minimum time interval between two notifications for the same group. Default is 5 minutes.
     * 
     */
    @Import(name="groupInterval")
    private @Nullable Output<String> groupInterval;

    /**
     * @return Minimum time interval between two notifications for the same group. Default is 5 minutes.
     * 
     */
    public Optional<Output<String>> groupInterval() {
        return Optional.ofNullable(this.groupInterval);
    }

    /**
     * Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
     * 
     */
    @Import(name="groupWait")
    private @Nullable Output<String> groupWait;

    /**
     * @return Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
     * 
     */
    public Optional<Output<String>> groupWait() {
        return Optional.ofNullable(this.groupWait);
    }

    /**
     * Routing rules for specific label sets.
     * 
     */
    @Import(name="policies")
    private @Nullable Output<List<NotificationPolicyPolicyArgs>> policies;

    /**
     * @return Routing rules for specific label sets.
     * 
     */
    public Optional<Output<List<NotificationPolicyPolicyArgs>>> policies() {
        return Optional.ofNullable(this.policies);
    }

    /**
     * Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
     * 
     */
    @Import(name="repeatInterval")
    private @Nullable Output<String> repeatInterval;

    /**
     * @return Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
     * 
     */
    public Optional<Output<String>> repeatInterval() {
        return Optional.ofNullable(this.repeatInterval);
    }

    private NotificationPolicyArgs() {}

    private NotificationPolicyArgs(NotificationPolicyArgs $) {
        this.contactPoint = $.contactPoint;
        this.groupBies = $.groupBies;
        this.groupInterval = $.groupInterval;
        this.groupWait = $.groupWait;
        this.policies = $.policies;
        this.repeatInterval = $.repeatInterval;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NotificationPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NotificationPolicyArgs $;

        public Builder() {
            $ = new NotificationPolicyArgs();
        }

        public Builder(NotificationPolicyArgs defaults) {
            $ = new NotificationPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param contactPoint The contact point to route notifications that match this rule to.
         * 
         * @return builder
         * 
         */
        public Builder contactPoint(Output<String> contactPoint) {
            $.contactPoint = contactPoint;
            return this;
        }

        /**
         * @param contactPoint The contact point to route notifications that match this rule to.
         * 
         * @return builder
         * 
         */
        public Builder contactPoint(String contactPoint) {
            return contactPoint(Output.of(contactPoint));
        }

        /**
         * @param groupBies A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping. Required for root policy only. If empty, the parent grouping is used.
         * 
         * @return builder
         * 
         */
        public Builder groupBies(Output<List<String>> groupBies) {
            $.groupBies = groupBies;
            return this;
        }

        /**
         * @param groupBies A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping. Required for root policy only. If empty, the parent grouping is used.
         * 
         * @return builder
         * 
         */
        public Builder groupBies(List<String> groupBies) {
            return groupBies(Output.of(groupBies));
        }

        /**
         * @param groupBies A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping. Required for root policy only. If empty, the parent grouping is used.
         * 
         * @return builder
         * 
         */
        public Builder groupBies(String... groupBies) {
            return groupBies(List.of(groupBies));
        }

        /**
         * @param groupInterval Minimum time interval between two notifications for the same group. Default is 5 minutes.
         * 
         * @return builder
         * 
         */
        public Builder groupInterval(@Nullable Output<String> groupInterval) {
            $.groupInterval = groupInterval;
            return this;
        }

        /**
         * @param groupInterval Minimum time interval between two notifications for the same group. Default is 5 minutes.
         * 
         * @return builder
         * 
         */
        public Builder groupInterval(String groupInterval) {
            return groupInterval(Output.of(groupInterval));
        }

        /**
         * @param groupWait Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
         * 
         * @return builder
         * 
         */
        public Builder groupWait(@Nullable Output<String> groupWait) {
            $.groupWait = groupWait;
            return this;
        }

        /**
         * @param groupWait Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
         * 
         * @return builder
         * 
         */
        public Builder groupWait(String groupWait) {
            return groupWait(Output.of(groupWait));
        }

        /**
         * @param policies Routing rules for specific label sets.
         * 
         * @return builder
         * 
         */
        public Builder policies(@Nullable Output<List<NotificationPolicyPolicyArgs>> policies) {
            $.policies = policies;
            return this;
        }

        /**
         * @param policies Routing rules for specific label sets.
         * 
         * @return builder
         * 
         */
        public Builder policies(List<NotificationPolicyPolicyArgs> policies) {
            return policies(Output.of(policies));
        }

        /**
         * @param policies Routing rules for specific label sets.
         * 
         * @return builder
         * 
         */
        public Builder policies(NotificationPolicyPolicyArgs... policies) {
            return policies(List.of(policies));
        }

        /**
         * @param repeatInterval Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
         * 
         * @return builder
         * 
         */
        public Builder repeatInterval(@Nullable Output<String> repeatInterval) {
            $.repeatInterval = repeatInterval;
            return this;
        }

        /**
         * @param repeatInterval Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
         * 
         * @return builder
         * 
         */
        public Builder repeatInterval(String repeatInterval) {
            return repeatInterval(Output.of(repeatInterval));
        }

        public NotificationPolicyArgs build() {
            $.contactPoint = Objects.requireNonNull($.contactPoint, "expected parameter 'contactPoint' to be non-null");
            $.groupBies = Objects.requireNonNull($.groupBies, "expected parameter 'groupBies' to be non-null");
            return $;
        }
    }

}
