// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SLOQueryRatioArgs extends com.pulumi.resources.ResourceArgs {

    public static final SLOQueryRatioArgs Empty = new SLOQueryRatioArgs();

    /**
     * Defines Group By Labels used for per-label alerting. These appear as variables on SLO dashboards to enable filtering and aggregation. Labels must adhere to Prometheus label name schema - &#34;^[a-zA-Z*][a-zA-Z0-9*]*$&#34;
     * 
     */
    @Import(name="groupByLabels")
    private @Nullable Output<List<String>> groupByLabels;

    /**
     * @return Defines Group By Labels used for per-label alerting. These appear as variables on SLO dashboards to enable filtering and aggregation. Labels must adhere to Prometheus label name schema - &#34;^[a-zA-Z*][a-zA-Z0-9*]*$&#34;
     * 
     */
    public Optional<Output<List<String>>> groupByLabels() {
        return Optional.ofNullable(this.groupByLabels);
    }

    /**
     * Counter metric for success events (numerator)
     * 
     */
    @Import(name="successMetric", required=true)
    private Output<String> successMetric;

    /**
     * @return Counter metric for success events (numerator)
     * 
     */
    public Output<String> successMetric() {
        return this.successMetric;
    }

    /**
     * Metric for total events (denominator)
     * 
     */
    @Import(name="totalMetric", required=true)
    private Output<String> totalMetric;

    /**
     * @return Metric for total events (denominator)
     * 
     */
    public Output<String> totalMetric() {
        return this.totalMetric;
    }

    private SLOQueryRatioArgs() {}

    private SLOQueryRatioArgs(SLOQueryRatioArgs $) {
        this.groupByLabels = $.groupByLabels;
        this.successMetric = $.successMetric;
        this.totalMetric = $.totalMetric;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SLOQueryRatioArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SLOQueryRatioArgs $;

        public Builder() {
            $ = new SLOQueryRatioArgs();
        }

        public Builder(SLOQueryRatioArgs defaults) {
            $ = new SLOQueryRatioArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param groupByLabels Defines Group By Labels used for per-label alerting. These appear as variables on SLO dashboards to enable filtering and aggregation. Labels must adhere to Prometheus label name schema - &#34;^[a-zA-Z*][a-zA-Z0-9*]*$&#34;
         * 
         * @return builder
         * 
         */
        public Builder groupByLabels(@Nullable Output<List<String>> groupByLabels) {
            $.groupByLabels = groupByLabels;
            return this;
        }

        /**
         * @param groupByLabels Defines Group By Labels used for per-label alerting. These appear as variables on SLO dashboards to enable filtering and aggregation. Labels must adhere to Prometheus label name schema - &#34;^[a-zA-Z*][a-zA-Z0-9*]*$&#34;
         * 
         * @return builder
         * 
         */
        public Builder groupByLabels(List<String> groupByLabels) {
            return groupByLabels(Output.of(groupByLabels));
        }

        /**
         * @param groupByLabels Defines Group By Labels used for per-label alerting. These appear as variables on SLO dashboards to enable filtering and aggregation. Labels must adhere to Prometheus label name schema - &#34;^[a-zA-Z*][a-zA-Z0-9*]*$&#34;
         * 
         * @return builder
         * 
         */
        public Builder groupByLabels(String... groupByLabels) {
            return groupByLabels(List.of(groupByLabels));
        }

        /**
         * @param successMetric Counter metric for success events (numerator)
         * 
         * @return builder
         * 
         */
        public Builder successMetric(Output<String> successMetric) {
            $.successMetric = successMetric;
            return this;
        }

        /**
         * @param successMetric Counter metric for success events (numerator)
         * 
         * @return builder
         * 
         */
        public Builder successMetric(String successMetric) {
            return successMetric(Output.of(successMetric));
        }

        /**
         * @param totalMetric Metric for total events (denominator)
         * 
         * @return builder
         * 
         */
        public Builder totalMetric(Output<String> totalMetric) {
            $.totalMetric = totalMetric;
            return this;
        }

        /**
         * @param totalMetric Metric for total events (denominator)
         * 
         * @return builder
         * 
         */
        public Builder totalMetric(String totalMetric) {
            return totalMetric(Output.of(totalMetric));
        }

        public SLOQueryRatioArgs build() {
            $.successMetric = Objects.requireNonNull($.successMetric, "expected parameter 'successMetric' to be non-null");
            $.totalMetric = Objects.requireNonNull($.totalMetric, "expected parameter 'totalMetric' to be non-null");
            return $;
        }
    }

}
