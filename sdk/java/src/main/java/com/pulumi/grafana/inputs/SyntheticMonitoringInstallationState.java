// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SyntheticMonitoringInstallationState extends com.pulumi.resources.ResourceArgs {

    public static final SyntheticMonitoringInstallationState Empty = new SyntheticMonitoringInstallationState();

    /**
     * The ID of the logs instance to install SM on (stack&#39;s `logs_user_id` attribute).
     * 
     */
    @Import(name="logsInstanceId")
    private @Nullable Output<Integer> logsInstanceId;

    /**
     * @return The ID of the logs instance to install SM on (stack&#39;s `logs_user_id` attribute).
     * 
     */
    public Optional<Output<Integer>> logsInstanceId() {
        return Optional.ofNullable(this.logsInstanceId);
    }

    /**
     * The ID of the metrics instance to install SM on (stack&#39;s `prometheus_user_id` attribute).
     * 
     */
    @Import(name="metricsInstanceId")
    private @Nullable Output<Integer> metricsInstanceId;

    /**
     * @return The ID of the metrics instance to install SM on (stack&#39;s `prometheus_user_id` attribute).
     * 
     */
    public Optional<Output<Integer>> metricsInstanceId() {
        return Optional.ofNullable(this.metricsInstanceId);
    }

    /**
     * The Cloud API Key with the `MetricsPublisher` role used to publish metrics to the SM API
     * 
     */
    @Import(name="metricsPublisherKey")
    private @Nullable Output<String> metricsPublisherKey;

    /**
     * @return The Cloud API Key with the `MetricsPublisher` role used to publish metrics to the SM API
     * 
     */
    public Optional<Output<String>> metricsPublisherKey() {
        return Optional.ofNullable(this.metricsPublisherKey);
    }

    /**
     * Generated token to access the SM API.
     * 
     */
    @Import(name="smAccessToken")
    private @Nullable Output<String> smAccessToken;

    /**
     * @return Generated token to access the SM API.
     * 
     */
    public Optional<Output<String>> smAccessToken() {
        return Optional.ofNullable(this.smAccessToken);
    }

    /**
     * The ID of the stack to install SM on.
     * 
     */
    @Import(name="stackId")
    private @Nullable Output<Integer> stackId;

    /**
     * @return The ID of the stack to install SM on.
     * 
     */
    public Optional<Output<Integer>> stackId() {
        return Optional.ofNullable(this.stackId);
    }

    private SyntheticMonitoringInstallationState() {}

    private SyntheticMonitoringInstallationState(SyntheticMonitoringInstallationState $) {
        this.logsInstanceId = $.logsInstanceId;
        this.metricsInstanceId = $.metricsInstanceId;
        this.metricsPublisherKey = $.metricsPublisherKey;
        this.smAccessToken = $.smAccessToken;
        this.stackId = $.stackId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SyntheticMonitoringInstallationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SyntheticMonitoringInstallationState $;

        public Builder() {
            $ = new SyntheticMonitoringInstallationState();
        }

        public Builder(SyntheticMonitoringInstallationState defaults) {
            $ = new SyntheticMonitoringInstallationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param logsInstanceId The ID of the logs instance to install SM on (stack&#39;s `logs_user_id` attribute).
         * 
         * @return builder
         * 
         */
        public Builder logsInstanceId(@Nullable Output<Integer> logsInstanceId) {
            $.logsInstanceId = logsInstanceId;
            return this;
        }

        /**
         * @param logsInstanceId The ID of the logs instance to install SM on (stack&#39;s `logs_user_id` attribute).
         * 
         * @return builder
         * 
         */
        public Builder logsInstanceId(Integer logsInstanceId) {
            return logsInstanceId(Output.of(logsInstanceId));
        }

        /**
         * @param metricsInstanceId The ID of the metrics instance to install SM on (stack&#39;s `prometheus_user_id` attribute).
         * 
         * @return builder
         * 
         */
        public Builder metricsInstanceId(@Nullable Output<Integer> metricsInstanceId) {
            $.metricsInstanceId = metricsInstanceId;
            return this;
        }

        /**
         * @param metricsInstanceId The ID of the metrics instance to install SM on (stack&#39;s `prometheus_user_id` attribute).
         * 
         * @return builder
         * 
         */
        public Builder metricsInstanceId(Integer metricsInstanceId) {
            return metricsInstanceId(Output.of(metricsInstanceId));
        }

        /**
         * @param metricsPublisherKey The Cloud API Key with the `MetricsPublisher` role used to publish metrics to the SM API
         * 
         * @return builder
         * 
         */
        public Builder metricsPublisherKey(@Nullable Output<String> metricsPublisherKey) {
            $.metricsPublisherKey = metricsPublisherKey;
            return this;
        }

        /**
         * @param metricsPublisherKey The Cloud API Key with the `MetricsPublisher` role used to publish metrics to the SM API
         * 
         * @return builder
         * 
         */
        public Builder metricsPublisherKey(String metricsPublisherKey) {
            return metricsPublisherKey(Output.of(metricsPublisherKey));
        }

        /**
         * @param smAccessToken Generated token to access the SM API.
         * 
         * @return builder
         * 
         */
        public Builder smAccessToken(@Nullable Output<String> smAccessToken) {
            $.smAccessToken = smAccessToken;
            return this;
        }

        /**
         * @param smAccessToken Generated token to access the SM API.
         * 
         * @return builder
         * 
         */
        public Builder smAccessToken(String smAccessToken) {
            return smAccessToken(Output.of(smAccessToken));
        }

        /**
         * @param stackId The ID of the stack to install SM on.
         * 
         * @return builder
         * 
         */
        public Builder stackId(@Nullable Output<Integer> stackId) {
            $.stackId = stackId;
            return this;
        }

        /**
         * @param stackId The ID of the stack to install SM on.
         * 
         * @return builder
         * 
         */
        public Builder stackId(Integer stackId) {
            return stackId(Output.of(stackId));
        }

        public SyntheticMonitoringInstallationState build() {
            return $;
        }
    }

}
