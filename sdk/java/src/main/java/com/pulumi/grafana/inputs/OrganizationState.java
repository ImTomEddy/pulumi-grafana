// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OrganizationState extends com.pulumi.resources.ResourceArgs {

    public static final OrganizationState Empty = new OrganizationState();

    /**
     * The login name of the configured default admin user for the Grafana installation. If unset, this value defaults to
     * admin, the Grafana default. Grafana adds the default admin user to all organizations automatically upon creation, and
     * this parameter keeps Terraform from removing it from organizations.
     * 
     */
    @Import(name="adminUser")
    private @Nullable Output<String> adminUser;

    /**
     * @return The login name of the configured default admin user for the Grafana installation. If unset, this value defaults to
     * admin, the Grafana default. Grafana adds the default admin user to all organizations automatically upon creation, and
     * this parameter keeps Terraform from removing it from organizations.
     * 
     */
    public Optional<Output<String>> adminUser() {
        return Optional.ofNullable(this.adminUser);
    }

    /**
     * A list of email addresses corresponding to users who should be given admin
     * access to the organization. Note: users specified here must already exist in
     * Grafana unless &#39;create_users&#39; is set to true.
     * 
     */
    @Import(name="admins")
    private @Nullable Output<List<String>> admins;

    /**
     * @return A list of email addresses corresponding to users who should be given admin
     * access to the organization. Note: users specified here must already exist in
     * Grafana unless &#39;create_users&#39; is set to true.
     * 
     */
    public Optional<Output<List<String>>> admins() {
        return Optional.ofNullable(this.admins);
    }

    /**
     * Whether or not to create Grafana users specified in the organization&#39;s
     * membership if they don&#39;t already exist in Grafana. If unspecified, this
     * parameter defaults to true, creating placeholder users with the name, login,
     * and email set to the email of the user, and a random password. Setting this
     * option to false will cause an error to be thrown for any users that do not
     * already exist in Grafana.
     * Defaults to `true`.
     * 
     */
    @Import(name="createUsers")
    private @Nullable Output<Boolean> createUsers;

    /**
     * @return Whether or not to create Grafana users specified in the organization&#39;s
     * membership if they don&#39;t already exist in Grafana. If unspecified, this
     * parameter defaults to true, creating placeholder users with the name, login,
     * and email set to the email of the user, and a random password. Setting this
     * option to false will cause an error to be thrown for any users that do not
     * already exist in Grafana.
     * Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> createUsers() {
        return Optional.ofNullable(this.createUsers);
    }

    /**
     * A list of email addresses corresponding to users who should be given editor
     * access to the organization. Note: users specified here must already exist in
     * Grafana unless &#39;create_users&#39; is set to true.
     * 
     */
    @Import(name="editors")
    private @Nullable Output<List<String>> editors;

    /**
     * @return A list of email addresses corresponding to users who should be given editor
     * access to the organization. Note: users specified here must already exist in
     * Grafana unless &#39;create_users&#39; is set to true.
     * 
     */
    public Optional<Output<List<String>>> editors() {
        return Optional.ofNullable(this.editors);
    }

    /**
     * The display name for the Grafana organization created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The display name for the Grafana organization created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The organization id assigned to this organization by Grafana.
     * 
     */
    @Import(name="orgId")
    private @Nullable Output<Integer> orgId;

    /**
     * @return The organization id assigned to this organization by Grafana.
     * 
     */
    public Optional<Output<Integer>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * A list of email addresses corresponding to users who should be given viewer
     * access to the organization. Note: users specified here must already exist in
     * Grafana unless &#39;create_users&#39; is set to true.
     * 
     */
    @Import(name="viewers")
    private @Nullable Output<List<String>> viewers;

    /**
     * @return A list of email addresses corresponding to users who should be given viewer
     * access to the organization. Note: users specified here must already exist in
     * Grafana unless &#39;create_users&#39; is set to true.
     * 
     */
    public Optional<Output<List<String>>> viewers() {
        return Optional.ofNullable(this.viewers);
    }

    private OrganizationState() {}

    private OrganizationState(OrganizationState $) {
        this.adminUser = $.adminUser;
        this.admins = $.admins;
        this.createUsers = $.createUsers;
        this.editors = $.editors;
        this.name = $.name;
        this.orgId = $.orgId;
        this.viewers = $.viewers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OrganizationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OrganizationState $;

        public Builder() {
            $ = new OrganizationState();
        }

        public Builder(OrganizationState defaults) {
            $ = new OrganizationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param adminUser The login name of the configured default admin user for the Grafana installation. If unset, this value defaults to
         * admin, the Grafana default. Grafana adds the default admin user to all organizations automatically upon creation, and
         * this parameter keeps Terraform from removing it from organizations.
         * 
         * @return builder
         * 
         */
        public Builder adminUser(@Nullable Output<String> adminUser) {
            $.adminUser = adminUser;
            return this;
        }

        /**
         * @param adminUser The login name of the configured default admin user for the Grafana installation. If unset, this value defaults to
         * admin, the Grafana default. Grafana adds the default admin user to all organizations automatically upon creation, and
         * this parameter keeps Terraform from removing it from organizations.
         * 
         * @return builder
         * 
         */
        public Builder adminUser(String adminUser) {
            return adminUser(Output.of(adminUser));
        }

        /**
         * @param admins A list of email addresses corresponding to users who should be given admin
         * access to the organization. Note: users specified here must already exist in
         * Grafana unless &#39;create_users&#39; is set to true.
         * 
         * @return builder
         * 
         */
        public Builder admins(@Nullable Output<List<String>> admins) {
            $.admins = admins;
            return this;
        }

        /**
         * @param admins A list of email addresses corresponding to users who should be given admin
         * access to the organization. Note: users specified here must already exist in
         * Grafana unless &#39;create_users&#39; is set to true.
         * 
         * @return builder
         * 
         */
        public Builder admins(List<String> admins) {
            return admins(Output.of(admins));
        }

        /**
         * @param admins A list of email addresses corresponding to users who should be given admin
         * access to the organization. Note: users specified here must already exist in
         * Grafana unless &#39;create_users&#39; is set to true.
         * 
         * @return builder
         * 
         */
        public Builder admins(String... admins) {
            return admins(List.of(admins));
        }

        /**
         * @param createUsers Whether or not to create Grafana users specified in the organization&#39;s
         * membership if they don&#39;t already exist in Grafana. If unspecified, this
         * parameter defaults to true, creating placeholder users with the name, login,
         * and email set to the email of the user, and a random password. Setting this
         * option to false will cause an error to be thrown for any users that do not
         * already exist in Grafana.
         * Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder createUsers(@Nullable Output<Boolean> createUsers) {
            $.createUsers = createUsers;
            return this;
        }

        /**
         * @param createUsers Whether or not to create Grafana users specified in the organization&#39;s
         * membership if they don&#39;t already exist in Grafana. If unspecified, this
         * parameter defaults to true, creating placeholder users with the name, login,
         * and email set to the email of the user, and a random password. Setting this
         * option to false will cause an error to be thrown for any users that do not
         * already exist in Grafana.
         * Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder createUsers(Boolean createUsers) {
            return createUsers(Output.of(createUsers));
        }

        /**
         * @param editors A list of email addresses corresponding to users who should be given editor
         * access to the organization. Note: users specified here must already exist in
         * Grafana unless &#39;create_users&#39; is set to true.
         * 
         * @return builder
         * 
         */
        public Builder editors(@Nullable Output<List<String>> editors) {
            $.editors = editors;
            return this;
        }

        /**
         * @param editors A list of email addresses corresponding to users who should be given editor
         * access to the organization. Note: users specified here must already exist in
         * Grafana unless &#39;create_users&#39; is set to true.
         * 
         * @return builder
         * 
         */
        public Builder editors(List<String> editors) {
            return editors(Output.of(editors));
        }

        /**
         * @param editors A list of email addresses corresponding to users who should be given editor
         * access to the organization. Note: users specified here must already exist in
         * Grafana unless &#39;create_users&#39; is set to true.
         * 
         * @return builder
         * 
         */
        public Builder editors(String... editors) {
            return editors(List.of(editors));
        }

        /**
         * @param name The display name for the Grafana organization created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The display name for the Grafana organization created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param orgId The organization id assigned to this organization by Grafana.
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable Output<Integer> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId The organization id assigned to this organization by Grafana.
         * 
         * @return builder
         * 
         */
        public Builder orgId(Integer orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param viewers A list of email addresses corresponding to users who should be given viewer
         * access to the organization. Note: users specified here must already exist in
         * Grafana unless &#39;create_users&#39; is set to true.
         * 
         * @return builder
         * 
         */
        public Builder viewers(@Nullable Output<List<String>> viewers) {
            $.viewers = viewers;
            return this;
        }

        /**
         * @param viewers A list of email addresses corresponding to users who should be given viewer
         * access to the organization. Note: users specified here must already exist in
         * Grafana unless &#39;create_users&#39; is set to true.
         * 
         * @return builder
         * 
         */
        public Builder viewers(List<String> viewers) {
            return viewers(Output.of(viewers));
        }

        /**
         * @param viewers A list of email addresses corresponding to users who should be given viewer
         * access to the organization. Note: users specified here must already exist in
         * Grafana unless &#39;create_users&#39; is set to true.
         * 
         * @return builder
         * 
         */
        public Builder viewers(String... viewers) {
            return viewers(List.of(viewers));
        }

        public OrganizationState build() {
            return $;
        }
    }

}
