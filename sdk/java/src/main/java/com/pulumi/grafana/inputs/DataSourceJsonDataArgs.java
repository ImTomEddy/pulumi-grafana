// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.grafana.inputs.DataSourceJsonDataDerivedFieldArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataSourceJsonDataArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataSourceJsonDataArgs Empty = new DataSourceJsonDataArgs();

    /**
     * (Prometheus) The name of the Alertmanager datasource to manage alerts via UI
     * 
     */
    @Import(name="alertmanagerUid")
    private @Nullable Output<String> alertmanagerUid;

    /**
     * @return (Prometheus) The name of the Alertmanager datasource to manage alerts via UI
     * 
     */
    public Optional<Output<String>> alertmanagerUid() {
        return Optional.ofNullable(this.alertmanagerUid);
    }

    /**
     * (CloudWatch, Athena) The ARN of the role to be assumed by Grafana when using the CloudWatch or Athena data source.
     * 
     */
    @Import(name="assumeRoleArn")
    private @Nullable Output<String> assumeRoleArn;

    /**
     * @return (CloudWatch, Athena) The ARN of the role to be assumed by Grafana when using the CloudWatch or Athena data source.
     * 
     */
    public Optional<Output<String>> assumeRoleArn() {
        return Optional.ofNullable(this.assumeRoleArn);
    }

    /**
     * (CloudWatch, Athena) The authentication type used to access the data source.
     * 
     */
    @Import(name="authType")
    private @Nullable Output<String> authType;

    /**
     * @return (CloudWatch, Athena) The authentication type used to access the data source.
     * 
     */
    public Optional<Output<String>> authType() {
        return Optional.ofNullable(this.authType);
    }

    /**
     * (Stackdriver) The authentication type: `jwt` or `gce`.
     * 
     */
    @Import(name="authenticationType")
    private @Nullable Output<String> authenticationType;

    /**
     * @return (Stackdriver) The authentication type: `jwt` or `gce`.
     * 
     */
    public Optional<Output<String>> authenticationType() {
        return Optional.ofNullable(this.authenticationType);
    }

    /**
     * (Athena) Athena catalog.
     * 
     */
    @Import(name="catalog")
    private @Nullable Output<String> catalog;

    /**
     * @return (Athena) Athena catalog.
     * 
     */
    public Optional<Output<String>> catalog() {
        return Optional.ofNullable(this.catalog);
    }

    /**
     * (Stackdriver) Service account email address.
     * 
     */
    @Import(name="clientEmail")
    private @Nullable Output<String> clientEmail;

    /**
     * @return (Stackdriver) Service account email address.
     * 
     */
    public Optional<Output<String>> clientEmail() {
        return Optional.ofNullable(this.clientEmail);
    }

    /**
     * (Azure Monitor) The service account client id.
     * 
     */
    @Import(name="clientId")
    private @Nullable Output<String> clientId;

    /**
     * @return (Azure Monitor) The service account client id.
     * 
     */
    public Optional<Output<String>> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * (Azure Monitor) The cloud name.
     * 
     */
    @Import(name="cloudName")
    private @Nullable Output<String> cloudName;

    /**
     * @return (Azure Monitor) The cloud name.
     * 
     */
    public Optional<Output<String>> cloudName() {
        return Optional.ofNullable(this.cloudName);
    }

    /**
     * (MySQL, PostgreSQL, and MSSQL) Maximum amount of time in seconds a connection may be reused (Grafana v5.4+).
     * 
     */
    @Import(name="connMaxLifetime")
    private @Nullable Output<Integer> connMaxLifetime;

    /**
     * @return (MySQL, PostgreSQL, and MSSQL) Maximum amount of time in seconds a connection may be reused (Grafana v5.4+).
     * 
     */
    public Optional<Output<Integer>> connMaxLifetime() {
        return Optional.ofNullable(this.connMaxLifetime);
    }

    /**
     * (CloudWatch) A comma-separated list of custom namespaces to be queried by the CloudWatch data source.
     * 
     */
    @Import(name="customMetricsNamespaces")
    private @Nullable Output<String> customMetricsNamespaces;

    /**
     * @return (CloudWatch) A comma-separated list of custom namespaces to be queried by the CloudWatch data source.
     * 
     */
    public Optional<Output<String>> customMetricsNamespaces() {
        return Optional.ofNullable(this.customMetricsNamespaces);
    }

    /**
     * (Athena) Name of the database within the catalog.
     * 
     */
    @Import(name="database")
    private @Nullable Output<String> database;

    /**
     * @return (Athena) Name of the database within the catalog.
     * 
     */
    public Optional<Output<String>> database() {
        return Optional.ofNullable(this.database);
    }

    /**
     * (InfluxDB) The default bucket for the data source.
     * 
     */
    @Import(name="defaultBucket")
    private @Nullable Output<String> defaultBucket;

    /**
     * @return (InfluxDB) The default bucket for the data source.
     * 
     */
    public Optional<Output<String>> defaultBucket() {
        return Optional.ofNullable(this.defaultBucket);
    }

    /**
     * (Stackdriver) The default project for the data source.
     * 
     */
    @Import(name="defaultProject")
    private @Nullable Output<String> defaultProject;

    /**
     * @return (Stackdriver) The default project for the data source.
     * 
     */
    public Optional<Output<String>> defaultProject() {
        return Optional.ofNullable(this.defaultProject);
    }

    /**
     * (CloudWatch, Athena) The default region for the data source.
     * 
     */
    @Import(name="defaultRegion")
    private @Nullable Output<String> defaultRegion;

    /**
     * @return (CloudWatch, Athena) The default region for the data source.
     * 
     */
    public Optional<Output<String>> defaultRegion() {
        return Optional.ofNullable(this.defaultRegion);
    }

    /**
     * (Loki) See https://grafana.com/docs/grafana/latest/datasources/loki/#derived-fields
     * 
     */
    @Import(name="derivedFields")
    private @Nullable Output<List<DataSourceJsonDataDerivedFieldArgs>> derivedFields;

    /**
     * @return (Loki) See https://grafana.com/docs/grafana/latest/datasources/loki/#derived-fields
     * 
     */
    public Optional<Output<List<DataSourceJsonDataDerivedFieldArgs>>> derivedFields() {
        return Optional.ofNullable(this.derivedFields);
    }

    /**
     * (MSSQL) Connection SSL encryption handling: &#39;disable&#39;, &#39;false&#39; or &#39;true&#39;.
     * 
     */
    @Import(name="encrypt")
    private @Nullable Output<String> encrypt;

    /**
     * @return (MSSQL) Connection SSL encryption handling: &#39;disable&#39;, &#39;false&#39; or &#39;true&#39;.
     * 
     */
    public Optional<Output<String>> encrypt() {
        return Optional.ofNullable(this.encrypt);
    }

    /**
     * (Elasticsearch) Elasticsearch semantic version (Grafana v8.0+).
     * 
     */
    @Import(name="esVersion")
    private @Nullable Output<String> esVersion;

    /**
     * @return (Elasticsearch) Elasticsearch semantic version (Grafana v8.0+).
     * 
     */
    public Optional<Output<String>> esVersion() {
        return Optional.ofNullable(this.esVersion);
    }

    /**
     * (CloudWatch, Athena) If you are assuming a role in another account, that has been created with an external ID, specify the external ID here.
     * 
     */
    @Import(name="externalId")
    private @Nullable Output<String> externalId;

    /**
     * @return (CloudWatch, Athena) If you are assuming a role in another account, that has been created with an external ID, specify the external ID here.
     * 
     */
    public Optional<Output<String>> externalId() {
        return Optional.ofNullable(this.externalId);
    }

    /**
     * (Github) Github URL
     * 
     */
    @Import(name="githubUrl")
    private @Nullable Output<String> githubUrl;

    /**
     * @return (Github) Github URL
     * 
     */
    public Optional<Output<String>> githubUrl() {
        return Optional.ofNullable(this.githubUrl);
    }

    /**
     * (Graphite) Graphite version.
     * 
     */
    @Import(name="graphiteVersion")
    private @Nullable Output<String> graphiteVersion;

    /**
     * @return (Graphite) Graphite version.
     * 
     */
    public Optional<Output<String>> graphiteVersion() {
        return Optional.ofNullable(this.graphiteVersion);
    }

    /**
     * (Prometheus) HTTP method to use for making requests.
     * 
     */
    @Import(name="httpMethod")
    private @Nullable Output<String> httpMethod;

    /**
     * @return (Prometheus) HTTP method to use for making requests.
     * 
     */
    public Optional<Output<String>> httpMethod() {
        return Optional.ofNullable(this.httpMethod);
    }

    /**
     * (Alertmanager) Implementation of Alertmanager. Either &#39;cortex&#39; or &#39;prometheus&#39;
     * 
     */
    @Import(name="implementation")
    private @Nullable Output<String> implementation;

    /**
     * @return (Alertmanager) Implementation of Alertmanager. Either &#39;cortex&#39; or &#39;prometheus&#39;
     * 
     */
    public Optional<Output<String>> implementation() {
        return Optional.ofNullable(this.implementation);
    }

    /**
     * (Elasticsearch) Index date time format. nil(No Pattern), &#39;Hourly&#39;, &#39;Daily&#39;, &#39;Weekly&#39;, &#39;Monthly&#39; or &#39;Yearly&#39;.
     * 
     */
    @Import(name="interval")
    private @Nullable Output<String> interval;

    /**
     * @return (Elasticsearch) Index date time format. nil(No Pattern), &#39;Hourly&#39;, &#39;Daily&#39;, &#39;Weekly&#39;, &#39;Monthly&#39; or &#39;Yearly&#39;.
     * 
     */
    public Optional<Output<String>> interval() {
        return Optional.ofNullable(this.interval);
    }

    /**
     * (Elasticsearch) Which field should be used to indicate the priority of the log message.
     * 
     */
    @Import(name="logLevelField")
    private @Nullable Output<String> logLevelField;

    /**
     * @return (Elasticsearch) Which field should be used to indicate the priority of the log message.
     * 
     */
    public Optional<Output<String>> logLevelField() {
        return Optional.ofNullable(this.logLevelField);
    }

    /**
     * (Elasticsearch) Which field should be used as the log message.
     * 
     */
    @Import(name="logMessageField")
    private @Nullable Output<String> logMessageField;

    /**
     * @return (Elasticsearch) Which field should be used as the log message.
     * 
     */
    public Optional<Output<String>> logMessageField() {
        return Optional.ofNullable(this.logMessageField);
    }

    /**
     * (Prometheus) Manage alerts.
     * 
     */
    @Import(name="manageAlerts")
    private @Nullable Output<Boolean> manageAlerts;

    /**
     * @return (Prometheus) Manage alerts.
     * 
     */
    public Optional<Output<Boolean>> manageAlerts() {
        return Optional.ofNullable(this.manageAlerts);
    }

    /**
     * (Elasticsearch) Maximum number of concurrent shard requests.
     * 
     */
    @Import(name="maxConcurrentShardRequests")
    private @Nullable Output<Integer> maxConcurrentShardRequests;

    /**
     * @return (Elasticsearch) Maximum number of concurrent shard requests.
     * 
     */
    public Optional<Output<Integer>> maxConcurrentShardRequests() {
        return Optional.ofNullable(this.maxConcurrentShardRequests);
    }

    /**
     * (MySQL, PostgreSQL and MSSQL) Maximum number of connections in the idle connection pool (Grafana v5.4+).
     * 
     */
    @Import(name="maxIdleConns")
    private @Nullable Output<Integer> maxIdleConns;

    /**
     * @return (MySQL, PostgreSQL and MSSQL) Maximum number of connections in the idle connection pool (Grafana v5.4+).
     * 
     */
    public Optional<Output<Integer>> maxIdleConns() {
        return Optional.ofNullable(this.maxIdleConns);
    }

    /**
     * (Loki) Upper limit for the number of log lines returned by Loki
     * 
     */
    @Import(name="maxLines")
    private @Nullable Output<Integer> maxLines;

    /**
     * @return (Loki) Upper limit for the number of log lines returned by Loki
     * 
     */
    public Optional<Output<Integer>> maxLines() {
        return Optional.ofNullable(this.maxLines);
    }

    /**
     * (MySQL, PostgreSQL and MSSQL) Maximum number of open connections to the database (Grafana v5.4+).
     * 
     */
    @Import(name="maxOpenConns")
    private @Nullable Output<Integer> maxOpenConns;

    /**
     * @return (MySQL, PostgreSQL and MSSQL) Maximum number of open connections to the database (Grafana v5.4+).
     * 
     */
    public Optional<Output<Integer>> maxOpenConns() {
        return Optional.ofNullable(this.maxOpenConns);
    }

    /**
     * (Sentry) Organization slug.
     * 
     */
    @Import(name="orgSlug")
    private @Nullable Output<String> orgSlug;

    /**
     * @return (Sentry) Organization slug.
     * 
     */
    public Optional<Output<String>> orgSlug() {
        return Optional.ofNullable(this.orgSlug);
    }

    /**
     * (InfluxDB) An organization is a workspace for a group of users. All dashboards, tasks, buckets, members, etc., belong to an organization.
     * 
     */
    @Import(name="organization")
    private @Nullable Output<String> organization;

    /**
     * @return (InfluxDB) An organization is a workspace for a group of users. All dashboards, tasks, buckets, members, etc., belong to an organization.
     * 
     */
    public Optional<Output<String>> organization() {
        return Optional.ofNullable(this.organization);
    }

    /**
     * (Athena) AWS S3 bucket to store execution outputs. If not specified, the default query result location from the Workgroup configuration will be used.
     * 
     */
    @Import(name="outputLocation")
    private @Nullable Output<String> outputLocation;

    /**
     * @return (Athena) AWS S3 bucket to store execution outputs. If not specified, the default query result location from the Workgroup configuration will be used.
     * 
     */
    public Optional<Output<String>> outputLocation() {
        return Optional.ofNullable(this.outputLocation);
    }

    /**
     * (PostgreSQL) Postgres version as a number (903/904/905/906/1000) meaning v9.3, v9.4, etc.
     * 
     */
    @Import(name="postgresVersion")
    private @Nullable Output<Integer> postgresVersion;

    /**
     * @return (PostgreSQL) Postgres version as a number (903/904/905/906/1000) meaning v9.3, v9.4, etc.
     * 
     */
    public Optional<Output<Integer>> postgresVersion() {
        return Optional.ofNullable(this.postgresVersion);
    }

    /**
     * (CloudWatch, Athena) The credentials profile name to use when authentication type is set as &#39;Credentials file&#39;.
     * 
     */
    @Import(name="profile")
    private @Nullable Output<String> profile;

    /**
     * @return (CloudWatch, Athena) The credentials profile name to use when authentication type is set as &#39;Credentials file&#39;.
     * 
     */
    public Optional<Output<String>> profile() {
        return Optional.ofNullable(this.profile);
    }

    /**
     * (Prometheus) Timeout for queries made to the Prometheus data source in seconds.
     * 
     */
    @Import(name="queryTimeout")
    private @Nullable Output<String> queryTimeout;

    /**
     * @return (Prometheus) Timeout for queries made to the Prometheus data source in seconds.
     * 
     */
    public Optional<Output<String>> queryTimeout() {
        return Optional.ofNullable(this.queryTimeout);
    }

    /**
     * (Elasticsearch and Prometheus) Specifies the ARN of an IAM role to assume.
     * 
     */
    @Import(name="sigv4AssumeRoleArn")
    private @Nullable Output<String> sigv4AssumeRoleArn;

    /**
     * @return (Elasticsearch and Prometheus) Specifies the ARN of an IAM role to assume.
     * 
     */
    public Optional<Output<String>> sigv4AssumeRoleArn() {
        return Optional.ofNullable(this.sigv4AssumeRoleArn);
    }

    /**
     * (Elasticsearch and Prometheus) Enable usage of SigV4.
     * 
     */
    @Import(name="sigv4Auth")
    private @Nullable Output<Boolean> sigv4Auth;

    /**
     * @return (Elasticsearch and Prometheus) Enable usage of SigV4.
     * 
     */
    public Optional<Output<Boolean>> sigv4Auth() {
        return Optional.ofNullable(this.sigv4Auth);
    }

    /**
     * (Elasticsearch and Prometheus) The Sigv4 authentication provider to use: &#39;default&#39;, &#39;credentials&#39; or &#39;keys&#39; (AMG: &#39;workspace-iam-role&#39;).
     * 
     */
    @Import(name="sigv4AuthType")
    private @Nullable Output<String> sigv4AuthType;

    /**
     * @return (Elasticsearch and Prometheus) The Sigv4 authentication provider to use: &#39;default&#39;, &#39;credentials&#39; or &#39;keys&#39; (AMG: &#39;workspace-iam-role&#39;).
     * 
     */
    public Optional<Output<String>> sigv4AuthType() {
        return Optional.ofNullable(this.sigv4AuthType);
    }

    /**
     * (Elasticsearch and Prometheus) When assuming a role in another account use this external ID.
     * 
     */
    @Import(name="sigv4ExternalId")
    private @Nullable Output<String> sigv4ExternalId;

    /**
     * @return (Elasticsearch and Prometheus) When assuming a role in another account use this external ID.
     * 
     */
    public Optional<Output<String>> sigv4ExternalId() {
        return Optional.ofNullable(this.sigv4ExternalId);
    }

    /**
     * (Elasticsearch and Prometheus) Credentials profile name, leave blank for default.
     * 
     */
    @Import(name="sigv4Profile")
    private @Nullable Output<String> sigv4Profile;

    /**
     * @return (Elasticsearch and Prometheus) Credentials profile name, leave blank for default.
     * 
     */
    public Optional<Output<String>> sigv4Profile() {
        return Optional.ofNullable(this.sigv4Profile);
    }

    /**
     * (Elasticsearch and Prometheus) AWS region to use for Sigv4.
     * 
     */
    @Import(name="sigv4Region")
    private @Nullable Output<String> sigv4Region;

    /**
     * @return (Elasticsearch and Prometheus) AWS region to use for Sigv4.
     * 
     */
    public Optional<Output<String>> sigv4Region() {
        return Optional.ofNullable(this.sigv4Region);
    }

    /**
     * (PostgreSQL) SSLmode. &#39;disable&#39;, &#39;require&#39;, &#39;verify-ca&#39; or &#39;verify-full&#39;.
     * 
     */
    @Import(name="sslMode")
    private @Nullable Output<String> sslMode;

    /**
     * @return (PostgreSQL) SSLmode. &#39;disable&#39;, &#39;require&#39;, &#39;verify-ca&#39; or &#39;verify-full&#39;.
     * 
     */
    public Optional<Output<String>> sslMode() {
        return Optional.ofNullable(this.sslMode);
    }

    /**
     * (Azure Monitor) The subscription id
     * 
     */
    @Import(name="subscriptionId")
    private @Nullable Output<String> subscriptionId;

    /**
     * @return (Azure Monitor) The subscription id
     * 
     */
    public Optional<Output<String>> subscriptionId() {
        return Optional.ofNullable(this.subscriptionId);
    }

    /**
     * (Azure Monitor) Service account tenant ID.
     * 
     */
    @Import(name="tenantId")
    private @Nullable Output<String> tenantId;

    /**
     * @return (Azure Monitor) Service account tenant ID.
     * 
     */
    public Optional<Output<String>> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }

    /**
     * (Elasticsearch) Which field that should be used as timestamp.
     * 
     */
    @Import(name="timeField")
    private @Nullable Output<String> timeField;

    /**
     * @return (Elasticsearch) Which field that should be used as timestamp.
     * 
     */
    public Optional<Output<String>> timeField() {
        return Optional.ofNullable(this.timeField);
    }

    /**
     * (Prometheus, Elasticsearch, InfluxDB, MySQL, PostgreSQL, and MSSQL) Lowest interval/step value that should be used for this data source. Sometimes called &#34;Scrape Interval&#34; in the Grafana UI.
     * 
     */
    @Import(name="timeInterval")
    private @Nullable Output<String> timeInterval;

    /**
     * @return (Prometheus, Elasticsearch, InfluxDB, MySQL, PostgreSQL, and MSSQL) Lowest interval/step value that should be used for this data source. Sometimes called &#34;Scrape Interval&#34; in the Grafana UI.
     * 
     */
    public Optional<Output<String>> timeInterval() {
        return Optional.ofNullable(this.timeInterval);
    }

    /**
     * (PostgreSQL) Enable usage of TimescaleDB extension.
     * 
     */
    @Import(name="timescaledb")
    private @Nullable Output<Boolean> timescaledb;

    /**
     * @return (PostgreSQL) Enable usage of TimescaleDB extension.
     * 
     */
    public Optional<Output<Boolean>> timescaledb() {
        return Optional.ofNullable(this.timescaledb);
    }

    /**
     * (All) Enable TLS authentication using client cert configured in secure json data.
     * 
     */
    @Import(name="tlsAuth")
    private @Nullable Output<Boolean> tlsAuth;

    /**
     * @return (All) Enable TLS authentication using client cert configured in secure json data.
     * 
     */
    public Optional<Output<Boolean>> tlsAuth() {
        return Optional.ofNullable(this.tlsAuth);
    }

    /**
     * (All) Enable TLS authentication using CA cert.
     * 
     */
    @Import(name="tlsAuthWithCaCert")
    private @Nullable Output<Boolean> tlsAuthWithCaCert;

    /**
     * @return (All) Enable TLS authentication using CA cert.
     * 
     */
    public Optional<Output<Boolean>> tlsAuthWithCaCert() {
        return Optional.ofNullable(this.tlsAuthWithCaCert);
    }

    /**
     * (All) SSL Certificate configuration, either by ‘file-path’ or ‘file-content’.
     * 
     */
    @Import(name="tlsConfigurationMethod")
    private @Nullable Output<String> tlsConfigurationMethod;

    /**
     * @return (All) SSL Certificate configuration, either by ‘file-path’ or ‘file-content’.
     * 
     */
    public Optional<Output<String>> tlsConfigurationMethod() {
        return Optional.ofNullable(this.tlsConfigurationMethod);
    }

    /**
     * (All) Controls whether a client verifies the server’s certificate chain and host name.
     * 
     */
    @Import(name="tlsSkipVerify")
    private @Nullable Output<Boolean> tlsSkipVerify;

    /**
     * @return (All) Controls whether a client verifies the server’s certificate chain and host name.
     * 
     */
    public Optional<Output<Boolean>> tlsSkipVerify() {
        return Optional.ofNullable(this.tlsSkipVerify);
    }

    /**
     * (Stackdriver) The token URI used, provided in the service account key.
     * 
     */
    @Import(name="tokenUri")
    private @Nullable Output<String> tokenUri;

    /**
     * @return (Stackdriver) The token URI used, provided in the service account key.
     * 
     */
    public Optional<Output<String>> tokenUri() {
        return Optional.ofNullable(this.tokenUri);
    }

    /**
     * (Cloudwatch) The X-Ray datasource uid to associate to this Cloudwatch datasource.
     * 
     */
    @Import(name="tracingDatasourceUid")
    private @Nullable Output<String> tracingDatasourceUid;

    /**
     * @return (Cloudwatch) The X-Ray datasource uid to associate to this Cloudwatch datasource.
     * 
     */
    public Optional<Output<String>> tracingDatasourceUid() {
        return Optional.ofNullable(this.tracingDatasourceUid);
    }

    /**
     * (OpenTSDB) Resolution.
     * 
     */
    @Import(name="tsdbResolution")
    private @Nullable Output<Integer> tsdbResolution;

    /**
     * @return (OpenTSDB) Resolution.
     * 
     */
    public Optional<Output<Integer>> tsdbResolution() {
        return Optional.ofNullable(this.tsdbResolution);
    }

    /**
     * (OpenTSDB) Version.
     * 
     */
    @Import(name="tsdbVersion")
    private @Nullable Output<Integer> tsdbVersion;

    /**
     * @return (OpenTSDB) Version.
     * 
     */
    public Optional<Output<Integer>> tsdbVersion() {
        return Optional.ofNullable(this.tsdbVersion);
    }

    /**
     * (InfluxDB) InfluxQL or Flux.
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return (InfluxDB) InfluxQL or Flux.
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    /**
     * (Athena) Workgroup to use.
     * 
     */
    @Import(name="workgroup")
    private @Nullable Output<String> workgroup;

    /**
     * @return (Athena) Workgroup to use.
     * 
     */
    public Optional<Output<String>> workgroup() {
        return Optional.ofNullable(this.workgroup);
    }

    /**
     * (Elasticsearch) Enable X-Pack support.
     * 
     */
    @Import(name="xpackEnabled")
    private @Nullable Output<Boolean> xpackEnabled;

    /**
     * @return (Elasticsearch) Enable X-Pack support.
     * 
     */
    public Optional<Output<Boolean>> xpackEnabled() {
        return Optional.ofNullable(this.xpackEnabled);
    }

    private DataSourceJsonDataArgs() {}

    private DataSourceJsonDataArgs(DataSourceJsonDataArgs $) {
        this.alertmanagerUid = $.alertmanagerUid;
        this.assumeRoleArn = $.assumeRoleArn;
        this.authType = $.authType;
        this.authenticationType = $.authenticationType;
        this.catalog = $.catalog;
        this.clientEmail = $.clientEmail;
        this.clientId = $.clientId;
        this.cloudName = $.cloudName;
        this.connMaxLifetime = $.connMaxLifetime;
        this.customMetricsNamespaces = $.customMetricsNamespaces;
        this.database = $.database;
        this.defaultBucket = $.defaultBucket;
        this.defaultProject = $.defaultProject;
        this.defaultRegion = $.defaultRegion;
        this.derivedFields = $.derivedFields;
        this.encrypt = $.encrypt;
        this.esVersion = $.esVersion;
        this.externalId = $.externalId;
        this.githubUrl = $.githubUrl;
        this.graphiteVersion = $.graphiteVersion;
        this.httpMethod = $.httpMethod;
        this.implementation = $.implementation;
        this.interval = $.interval;
        this.logLevelField = $.logLevelField;
        this.logMessageField = $.logMessageField;
        this.manageAlerts = $.manageAlerts;
        this.maxConcurrentShardRequests = $.maxConcurrentShardRequests;
        this.maxIdleConns = $.maxIdleConns;
        this.maxLines = $.maxLines;
        this.maxOpenConns = $.maxOpenConns;
        this.orgSlug = $.orgSlug;
        this.organization = $.organization;
        this.outputLocation = $.outputLocation;
        this.postgresVersion = $.postgresVersion;
        this.profile = $.profile;
        this.queryTimeout = $.queryTimeout;
        this.sigv4AssumeRoleArn = $.sigv4AssumeRoleArn;
        this.sigv4Auth = $.sigv4Auth;
        this.sigv4AuthType = $.sigv4AuthType;
        this.sigv4ExternalId = $.sigv4ExternalId;
        this.sigv4Profile = $.sigv4Profile;
        this.sigv4Region = $.sigv4Region;
        this.sslMode = $.sslMode;
        this.subscriptionId = $.subscriptionId;
        this.tenantId = $.tenantId;
        this.timeField = $.timeField;
        this.timeInterval = $.timeInterval;
        this.timescaledb = $.timescaledb;
        this.tlsAuth = $.tlsAuth;
        this.tlsAuthWithCaCert = $.tlsAuthWithCaCert;
        this.tlsConfigurationMethod = $.tlsConfigurationMethod;
        this.tlsSkipVerify = $.tlsSkipVerify;
        this.tokenUri = $.tokenUri;
        this.tracingDatasourceUid = $.tracingDatasourceUid;
        this.tsdbResolution = $.tsdbResolution;
        this.tsdbVersion = $.tsdbVersion;
        this.version = $.version;
        this.workgroup = $.workgroup;
        this.xpackEnabled = $.xpackEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataSourceJsonDataArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataSourceJsonDataArgs $;

        public Builder() {
            $ = new DataSourceJsonDataArgs();
        }

        public Builder(DataSourceJsonDataArgs defaults) {
            $ = new DataSourceJsonDataArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param alertmanagerUid (Prometheus) The name of the Alertmanager datasource to manage alerts via UI
         * 
         * @return builder
         * 
         */
        public Builder alertmanagerUid(@Nullable Output<String> alertmanagerUid) {
            $.alertmanagerUid = alertmanagerUid;
            return this;
        }

        /**
         * @param alertmanagerUid (Prometheus) The name of the Alertmanager datasource to manage alerts via UI
         * 
         * @return builder
         * 
         */
        public Builder alertmanagerUid(String alertmanagerUid) {
            return alertmanagerUid(Output.of(alertmanagerUid));
        }

        /**
         * @param assumeRoleArn (CloudWatch, Athena) The ARN of the role to be assumed by Grafana when using the CloudWatch or Athena data source.
         * 
         * @return builder
         * 
         */
        public Builder assumeRoleArn(@Nullable Output<String> assumeRoleArn) {
            $.assumeRoleArn = assumeRoleArn;
            return this;
        }

        /**
         * @param assumeRoleArn (CloudWatch, Athena) The ARN of the role to be assumed by Grafana when using the CloudWatch or Athena data source.
         * 
         * @return builder
         * 
         */
        public Builder assumeRoleArn(String assumeRoleArn) {
            return assumeRoleArn(Output.of(assumeRoleArn));
        }

        /**
         * @param authType (CloudWatch, Athena) The authentication type used to access the data source.
         * 
         * @return builder
         * 
         */
        public Builder authType(@Nullable Output<String> authType) {
            $.authType = authType;
            return this;
        }

        /**
         * @param authType (CloudWatch, Athena) The authentication type used to access the data source.
         * 
         * @return builder
         * 
         */
        public Builder authType(String authType) {
            return authType(Output.of(authType));
        }

        /**
         * @param authenticationType (Stackdriver) The authentication type: `jwt` or `gce`.
         * 
         * @return builder
         * 
         */
        public Builder authenticationType(@Nullable Output<String> authenticationType) {
            $.authenticationType = authenticationType;
            return this;
        }

        /**
         * @param authenticationType (Stackdriver) The authentication type: `jwt` or `gce`.
         * 
         * @return builder
         * 
         */
        public Builder authenticationType(String authenticationType) {
            return authenticationType(Output.of(authenticationType));
        }

        /**
         * @param catalog (Athena) Athena catalog.
         * 
         * @return builder
         * 
         */
        public Builder catalog(@Nullable Output<String> catalog) {
            $.catalog = catalog;
            return this;
        }

        /**
         * @param catalog (Athena) Athena catalog.
         * 
         * @return builder
         * 
         */
        public Builder catalog(String catalog) {
            return catalog(Output.of(catalog));
        }

        /**
         * @param clientEmail (Stackdriver) Service account email address.
         * 
         * @return builder
         * 
         */
        public Builder clientEmail(@Nullable Output<String> clientEmail) {
            $.clientEmail = clientEmail;
            return this;
        }

        /**
         * @param clientEmail (Stackdriver) Service account email address.
         * 
         * @return builder
         * 
         */
        public Builder clientEmail(String clientEmail) {
            return clientEmail(Output.of(clientEmail));
        }

        /**
         * @param clientId (Azure Monitor) The service account client id.
         * 
         * @return builder
         * 
         */
        public Builder clientId(@Nullable Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId (Azure Monitor) The service account client id.
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param cloudName (Azure Monitor) The cloud name.
         * 
         * @return builder
         * 
         */
        public Builder cloudName(@Nullable Output<String> cloudName) {
            $.cloudName = cloudName;
            return this;
        }

        /**
         * @param cloudName (Azure Monitor) The cloud name.
         * 
         * @return builder
         * 
         */
        public Builder cloudName(String cloudName) {
            return cloudName(Output.of(cloudName));
        }

        /**
         * @param connMaxLifetime (MySQL, PostgreSQL, and MSSQL) Maximum amount of time in seconds a connection may be reused (Grafana v5.4+).
         * 
         * @return builder
         * 
         */
        public Builder connMaxLifetime(@Nullable Output<Integer> connMaxLifetime) {
            $.connMaxLifetime = connMaxLifetime;
            return this;
        }

        /**
         * @param connMaxLifetime (MySQL, PostgreSQL, and MSSQL) Maximum amount of time in seconds a connection may be reused (Grafana v5.4+).
         * 
         * @return builder
         * 
         */
        public Builder connMaxLifetime(Integer connMaxLifetime) {
            return connMaxLifetime(Output.of(connMaxLifetime));
        }

        /**
         * @param customMetricsNamespaces (CloudWatch) A comma-separated list of custom namespaces to be queried by the CloudWatch data source.
         * 
         * @return builder
         * 
         */
        public Builder customMetricsNamespaces(@Nullable Output<String> customMetricsNamespaces) {
            $.customMetricsNamespaces = customMetricsNamespaces;
            return this;
        }

        /**
         * @param customMetricsNamespaces (CloudWatch) A comma-separated list of custom namespaces to be queried by the CloudWatch data source.
         * 
         * @return builder
         * 
         */
        public Builder customMetricsNamespaces(String customMetricsNamespaces) {
            return customMetricsNamespaces(Output.of(customMetricsNamespaces));
        }

        /**
         * @param database (Athena) Name of the database within the catalog.
         * 
         * @return builder
         * 
         */
        public Builder database(@Nullable Output<String> database) {
            $.database = database;
            return this;
        }

        /**
         * @param database (Athena) Name of the database within the catalog.
         * 
         * @return builder
         * 
         */
        public Builder database(String database) {
            return database(Output.of(database));
        }

        /**
         * @param defaultBucket (InfluxDB) The default bucket for the data source.
         * 
         * @return builder
         * 
         */
        public Builder defaultBucket(@Nullable Output<String> defaultBucket) {
            $.defaultBucket = defaultBucket;
            return this;
        }

        /**
         * @param defaultBucket (InfluxDB) The default bucket for the data source.
         * 
         * @return builder
         * 
         */
        public Builder defaultBucket(String defaultBucket) {
            return defaultBucket(Output.of(defaultBucket));
        }

        /**
         * @param defaultProject (Stackdriver) The default project for the data source.
         * 
         * @return builder
         * 
         */
        public Builder defaultProject(@Nullable Output<String> defaultProject) {
            $.defaultProject = defaultProject;
            return this;
        }

        /**
         * @param defaultProject (Stackdriver) The default project for the data source.
         * 
         * @return builder
         * 
         */
        public Builder defaultProject(String defaultProject) {
            return defaultProject(Output.of(defaultProject));
        }

        /**
         * @param defaultRegion (CloudWatch, Athena) The default region for the data source.
         * 
         * @return builder
         * 
         */
        public Builder defaultRegion(@Nullable Output<String> defaultRegion) {
            $.defaultRegion = defaultRegion;
            return this;
        }

        /**
         * @param defaultRegion (CloudWatch, Athena) The default region for the data source.
         * 
         * @return builder
         * 
         */
        public Builder defaultRegion(String defaultRegion) {
            return defaultRegion(Output.of(defaultRegion));
        }

        /**
         * @param derivedFields (Loki) See https://grafana.com/docs/grafana/latest/datasources/loki/#derived-fields
         * 
         * @return builder
         * 
         */
        public Builder derivedFields(@Nullable Output<List<DataSourceJsonDataDerivedFieldArgs>> derivedFields) {
            $.derivedFields = derivedFields;
            return this;
        }

        /**
         * @param derivedFields (Loki) See https://grafana.com/docs/grafana/latest/datasources/loki/#derived-fields
         * 
         * @return builder
         * 
         */
        public Builder derivedFields(List<DataSourceJsonDataDerivedFieldArgs> derivedFields) {
            return derivedFields(Output.of(derivedFields));
        }

        /**
         * @param derivedFields (Loki) See https://grafana.com/docs/grafana/latest/datasources/loki/#derived-fields
         * 
         * @return builder
         * 
         */
        public Builder derivedFields(DataSourceJsonDataDerivedFieldArgs... derivedFields) {
            return derivedFields(List.of(derivedFields));
        }

        /**
         * @param encrypt (MSSQL) Connection SSL encryption handling: &#39;disable&#39;, &#39;false&#39; or &#39;true&#39;.
         * 
         * @return builder
         * 
         */
        public Builder encrypt(@Nullable Output<String> encrypt) {
            $.encrypt = encrypt;
            return this;
        }

        /**
         * @param encrypt (MSSQL) Connection SSL encryption handling: &#39;disable&#39;, &#39;false&#39; or &#39;true&#39;.
         * 
         * @return builder
         * 
         */
        public Builder encrypt(String encrypt) {
            return encrypt(Output.of(encrypt));
        }

        /**
         * @param esVersion (Elasticsearch) Elasticsearch semantic version (Grafana v8.0+).
         * 
         * @return builder
         * 
         */
        public Builder esVersion(@Nullable Output<String> esVersion) {
            $.esVersion = esVersion;
            return this;
        }

        /**
         * @param esVersion (Elasticsearch) Elasticsearch semantic version (Grafana v8.0+).
         * 
         * @return builder
         * 
         */
        public Builder esVersion(String esVersion) {
            return esVersion(Output.of(esVersion));
        }

        /**
         * @param externalId (CloudWatch, Athena) If you are assuming a role in another account, that has been created with an external ID, specify the external ID here.
         * 
         * @return builder
         * 
         */
        public Builder externalId(@Nullable Output<String> externalId) {
            $.externalId = externalId;
            return this;
        }

        /**
         * @param externalId (CloudWatch, Athena) If you are assuming a role in another account, that has been created with an external ID, specify the external ID here.
         * 
         * @return builder
         * 
         */
        public Builder externalId(String externalId) {
            return externalId(Output.of(externalId));
        }

        /**
         * @param githubUrl (Github) Github URL
         * 
         * @return builder
         * 
         */
        public Builder githubUrl(@Nullable Output<String> githubUrl) {
            $.githubUrl = githubUrl;
            return this;
        }

        /**
         * @param githubUrl (Github) Github URL
         * 
         * @return builder
         * 
         */
        public Builder githubUrl(String githubUrl) {
            return githubUrl(Output.of(githubUrl));
        }

        /**
         * @param graphiteVersion (Graphite) Graphite version.
         * 
         * @return builder
         * 
         */
        public Builder graphiteVersion(@Nullable Output<String> graphiteVersion) {
            $.graphiteVersion = graphiteVersion;
            return this;
        }

        /**
         * @param graphiteVersion (Graphite) Graphite version.
         * 
         * @return builder
         * 
         */
        public Builder graphiteVersion(String graphiteVersion) {
            return graphiteVersion(Output.of(graphiteVersion));
        }

        /**
         * @param httpMethod (Prometheus) HTTP method to use for making requests.
         * 
         * @return builder
         * 
         */
        public Builder httpMethod(@Nullable Output<String> httpMethod) {
            $.httpMethod = httpMethod;
            return this;
        }

        /**
         * @param httpMethod (Prometheus) HTTP method to use for making requests.
         * 
         * @return builder
         * 
         */
        public Builder httpMethod(String httpMethod) {
            return httpMethod(Output.of(httpMethod));
        }

        /**
         * @param implementation (Alertmanager) Implementation of Alertmanager. Either &#39;cortex&#39; or &#39;prometheus&#39;
         * 
         * @return builder
         * 
         */
        public Builder implementation(@Nullable Output<String> implementation) {
            $.implementation = implementation;
            return this;
        }

        /**
         * @param implementation (Alertmanager) Implementation of Alertmanager. Either &#39;cortex&#39; or &#39;prometheus&#39;
         * 
         * @return builder
         * 
         */
        public Builder implementation(String implementation) {
            return implementation(Output.of(implementation));
        }

        /**
         * @param interval (Elasticsearch) Index date time format. nil(No Pattern), &#39;Hourly&#39;, &#39;Daily&#39;, &#39;Weekly&#39;, &#39;Monthly&#39; or &#39;Yearly&#39;.
         * 
         * @return builder
         * 
         */
        public Builder interval(@Nullable Output<String> interval) {
            $.interval = interval;
            return this;
        }

        /**
         * @param interval (Elasticsearch) Index date time format. nil(No Pattern), &#39;Hourly&#39;, &#39;Daily&#39;, &#39;Weekly&#39;, &#39;Monthly&#39; or &#39;Yearly&#39;.
         * 
         * @return builder
         * 
         */
        public Builder interval(String interval) {
            return interval(Output.of(interval));
        }

        /**
         * @param logLevelField (Elasticsearch) Which field should be used to indicate the priority of the log message.
         * 
         * @return builder
         * 
         */
        public Builder logLevelField(@Nullable Output<String> logLevelField) {
            $.logLevelField = logLevelField;
            return this;
        }

        /**
         * @param logLevelField (Elasticsearch) Which field should be used to indicate the priority of the log message.
         * 
         * @return builder
         * 
         */
        public Builder logLevelField(String logLevelField) {
            return logLevelField(Output.of(logLevelField));
        }

        /**
         * @param logMessageField (Elasticsearch) Which field should be used as the log message.
         * 
         * @return builder
         * 
         */
        public Builder logMessageField(@Nullable Output<String> logMessageField) {
            $.logMessageField = logMessageField;
            return this;
        }

        /**
         * @param logMessageField (Elasticsearch) Which field should be used as the log message.
         * 
         * @return builder
         * 
         */
        public Builder logMessageField(String logMessageField) {
            return logMessageField(Output.of(logMessageField));
        }

        /**
         * @param manageAlerts (Prometheus) Manage alerts.
         * 
         * @return builder
         * 
         */
        public Builder manageAlerts(@Nullable Output<Boolean> manageAlerts) {
            $.manageAlerts = manageAlerts;
            return this;
        }

        /**
         * @param manageAlerts (Prometheus) Manage alerts.
         * 
         * @return builder
         * 
         */
        public Builder manageAlerts(Boolean manageAlerts) {
            return manageAlerts(Output.of(manageAlerts));
        }

        /**
         * @param maxConcurrentShardRequests (Elasticsearch) Maximum number of concurrent shard requests.
         * 
         * @return builder
         * 
         */
        public Builder maxConcurrentShardRequests(@Nullable Output<Integer> maxConcurrentShardRequests) {
            $.maxConcurrentShardRequests = maxConcurrentShardRequests;
            return this;
        }

        /**
         * @param maxConcurrentShardRequests (Elasticsearch) Maximum number of concurrent shard requests.
         * 
         * @return builder
         * 
         */
        public Builder maxConcurrentShardRequests(Integer maxConcurrentShardRequests) {
            return maxConcurrentShardRequests(Output.of(maxConcurrentShardRequests));
        }

        /**
         * @param maxIdleConns (MySQL, PostgreSQL and MSSQL) Maximum number of connections in the idle connection pool (Grafana v5.4+).
         * 
         * @return builder
         * 
         */
        public Builder maxIdleConns(@Nullable Output<Integer> maxIdleConns) {
            $.maxIdleConns = maxIdleConns;
            return this;
        }

        /**
         * @param maxIdleConns (MySQL, PostgreSQL and MSSQL) Maximum number of connections in the idle connection pool (Grafana v5.4+).
         * 
         * @return builder
         * 
         */
        public Builder maxIdleConns(Integer maxIdleConns) {
            return maxIdleConns(Output.of(maxIdleConns));
        }

        /**
         * @param maxLines (Loki) Upper limit for the number of log lines returned by Loki
         * 
         * @return builder
         * 
         */
        public Builder maxLines(@Nullable Output<Integer> maxLines) {
            $.maxLines = maxLines;
            return this;
        }

        /**
         * @param maxLines (Loki) Upper limit for the number of log lines returned by Loki
         * 
         * @return builder
         * 
         */
        public Builder maxLines(Integer maxLines) {
            return maxLines(Output.of(maxLines));
        }

        /**
         * @param maxOpenConns (MySQL, PostgreSQL and MSSQL) Maximum number of open connections to the database (Grafana v5.4+).
         * 
         * @return builder
         * 
         */
        public Builder maxOpenConns(@Nullable Output<Integer> maxOpenConns) {
            $.maxOpenConns = maxOpenConns;
            return this;
        }

        /**
         * @param maxOpenConns (MySQL, PostgreSQL and MSSQL) Maximum number of open connections to the database (Grafana v5.4+).
         * 
         * @return builder
         * 
         */
        public Builder maxOpenConns(Integer maxOpenConns) {
            return maxOpenConns(Output.of(maxOpenConns));
        }

        /**
         * @param orgSlug (Sentry) Organization slug.
         * 
         * @return builder
         * 
         */
        public Builder orgSlug(@Nullable Output<String> orgSlug) {
            $.orgSlug = orgSlug;
            return this;
        }

        /**
         * @param orgSlug (Sentry) Organization slug.
         * 
         * @return builder
         * 
         */
        public Builder orgSlug(String orgSlug) {
            return orgSlug(Output.of(orgSlug));
        }

        /**
         * @param organization (InfluxDB) An organization is a workspace for a group of users. All dashboards, tasks, buckets, members, etc., belong to an organization.
         * 
         * @return builder
         * 
         */
        public Builder organization(@Nullable Output<String> organization) {
            $.organization = organization;
            return this;
        }

        /**
         * @param organization (InfluxDB) An organization is a workspace for a group of users. All dashboards, tasks, buckets, members, etc., belong to an organization.
         * 
         * @return builder
         * 
         */
        public Builder organization(String organization) {
            return organization(Output.of(organization));
        }

        /**
         * @param outputLocation (Athena) AWS S3 bucket to store execution outputs. If not specified, the default query result location from the Workgroup configuration will be used.
         * 
         * @return builder
         * 
         */
        public Builder outputLocation(@Nullable Output<String> outputLocation) {
            $.outputLocation = outputLocation;
            return this;
        }

        /**
         * @param outputLocation (Athena) AWS S3 bucket to store execution outputs. If not specified, the default query result location from the Workgroup configuration will be used.
         * 
         * @return builder
         * 
         */
        public Builder outputLocation(String outputLocation) {
            return outputLocation(Output.of(outputLocation));
        }

        /**
         * @param postgresVersion (PostgreSQL) Postgres version as a number (903/904/905/906/1000) meaning v9.3, v9.4, etc.
         * 
         * @return builder
         * 
         */
        public Builder postgresVersion(@Nullable Output<Integer> postgresVersion) {
            $.postgresVersion = postgresVersion;
            return this;
        }

        /**
         * @param postgresVersion (PostgreSQL) Postgres version as a number (903/904/905/906/1000) meaning v9.3, v9.4, etc.
         * 
         * @return builder
         * 
         */
        public Builder postgresVersion(Integer postgresVersion) {
            return postgresVersion(Output.of(postgresVersion));
        }

        /**
         * @param profile (CloudWatch, Athena) The credentials profile name to use when authentication type is set as &#39;Credentials file&#39;.
         * 
         * @return builder
         * 
         */
        public Builder profile(@Nullable Output<String> profile) {
            $.profile = profile;
            return this;
        }

        /**
         * @param profile (CloudWatch, Athena) The credentials profile name to use when authentication type is set as &#39;Credentials file&#39;.
         * 
         * @return builder
         * 
         */
        public Builder profile(String profile) {
            return profile(Output.of(profile));
        }

        /**
         * @param queryTimeout (Prometheus) Timeout for queries made to the Prometheus data source in seconds.
         * 
         * @return builder
         * 
         */
        public Builder queryTimeout(@Nullable Output<String> queryTimeout) {
            $.queryTimeout = queryTimeout;
            return this;
        }

        /**
         * @param queryTimeout (Prometheus) Timeout for queries made to the Prometheus data source in seconds.
         * 
         * @return builder
         * 
         */
        public Builder queryTimeout(String queryTimeout) {
            return queryTimeout(Output.of(queryTimeout));
        }

        /**
         * @param sigv4AssumeRoleArn (Elasticsearch and Prometheus) Specifies the ARN of an IAM role to assume.
         * 
         * @return builder
         * 
         */
        public Builder sigv4AssumeRoleArn(@Nullable Output<String> sigv4AssumeRoleArn) {
            $.sigv4AssumeRoleArn = sigv4AssumeRoleArn;
            return this;
        }

        /**
         * @param sigv4AssumeRoleArn (Elasticsearch and Prometheus) Specifies the ARN of an IAM role to assume.
         * 
         * @return builder
         * 
         */
        public Builder sigv4AssumeRoleArn(String sigv4AssumeRoleArn) {
            return sigv4AssumeRoleArn(Output.of(sigv4AssumeRoleArn));
        }

        /**
         * @param sigv4Auth (Elasticsearch and Prometheus) Enable usage of SigV4.
         * 
         * @return builder
         * 
         */
        public Builder sigv4Auth(@Nullable Output<Boolean> sigv4Auth) {
            $.sigv4Auth = sigv4Auth;
            return this;
        }

        /**
         * @param sigv4Auth (Elasticsearch and Prometheus) Enable usage of SigV4.
         * 
         * @return builder
         * 
         */
        public Builder sigv4Auth(Boolean sigv4Auth) {
            return sigv4Auth(Output.of(sigv4Auth));
        }

        /**
         * @param sigv4AuthType (Elasticsearch and Prometheus) The Sigv4 authentication provider to use: &#39;default&#39;, &#39;credentials&#39; or &#39;keys&#39; (AMG: &#39;workspace-iam-role&#39;).
         * 
         * @return builder
         * 
         */
        public Builder sigv4AuthType(@Nullable Output<String> sigv4AuthType) {
            $.sigv4AuthType = sigv4AuthType;
            return this;
        }

        /**
         * @param sigv4AuthType (Elasticsearch and Prometheus) The Sigv4 authentication provider to use: &#39;default&#39;, &#39;credentials&#39; or &#39;keys&#39; (AMG: &#39;workspace-iam-role&#39;).
         * 
         * @return builder
         * 
         */
        public Builder sigv4AuthType(String sigv4AuthType) {
            return sigv4AuthType(Output.of(sigv4AuthType));
        }

        /**
         * @param sigv4ExternalId (Elasticsearch and Prometheus) When assuming a role in another account use this external ID.
         * 
         * @return builder
         * 
         */
        public Builder sigv4ExternalId(@Nullable Output<String> sigv4ExternalId) {
            $.sigv4ExternalId = sigv4ExternalId;
            return this;
        }

        /**
         * @param sigv4ExternalId (Elasticsearch and Prometheus) When assuming a role in another account use this external ID.
         * 
         * @return builder
         * 
         */
        public Builder sigv4ExternalId(String sigv4ExternalId) {
            return sigv4ExternalId(Output.of(sigv4ExternalId));
        }

        /**
         * @param sigv4Profile (Elasticsearch and Prometheus) Credentials profile name, leave blank for default.
         * 
         * @return builder
         * 
         */
        public Builder sigv4Profile(@Nullable Output<String> sigv4Profile) {
            $.sigv4Profile = sigv4Profile;
            return this;
        }

        /**
         * @param sigv4Profile (Elasticsearch and Prometheus) Credentials profile name, leave blank for default.
         * 
         * @return builder
         * 
         */
        public Builder sigv4Profile(String sigv4Profile) {
            return sigv4Profile(Output.of(sigv4Profile));
        }

        /**
         * @param sigv4Region (Elasticsearch and Prometheus) AWS region to use for Sigv4.
         * 
         * @return builder
         * 
         */
        public Builder sigv4Region(@Nullable Output<String> sigv4Region) {
            $.sigv4Region = sigv4Region;
            return this;
        }

        /**
         * @param sigv4Region (Elasticsearch and Prometheus) AWS region to use for Sigv4.
         * 
         * @return builder
         * 
         */
        public Builder sigv4Region(String sigv4Region) {
            return sigv4Region(Output.of(sigv4Region));
        }

        /**
         * @param sslMode (PostgreSQL) SSLmode. &#39;disable&#39;, &#39;require&#39;, &#39;verify-ca&#39; or &#39;verify-full&#39;.
         * 
         * @return builder
         * 
         */
        public Builder sslMode(@Nullable Output<String> sslMode) {
            $.sslMode = sslMode;
            return this;
        }

        /**
         * @param sslMode (PostgreSQL) SSLmode. &#39;disable&#39;, &#39;require&#39;, &#39;verify-ca&#39; or &#39;verify-full&#39;.
         * 
         * @return builder
         * 
         */
        public Builder sslMode(String sslMode) {
            return sslMode(Output.of(sslMode));
        }

        /**
         * @param subscriptionId (Azure Monitor) The subscription id
         * 
         * @return builder
         * 
         */
        public Builder subscriptionId(@Nullable Output<String> subscriptionId) {
            $.subscriptionId = subscriptionId;
            return this;
        }

        /**
         * @param subscriptionId (Azure Monitor) The subscription id
         * 
         * @return builder
         * 
         */
        public Builder subscriptionId(String subscriptionId) {
            return subscriptionId(Output.of(subscriptionId));
        }

        /**
         * @param tenantId (Azure Monitor) Service account tenant ID.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(@Nullable Output<String> tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        /**
         * @param tenantId (Azure Monitor) Service account tenant ID.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(String tenantId) {
            return tenantId(Output.of(tenantId));
        }

        /**
         * @param timeField (Elasticsearch) Which field that should be used as timestamp.
         * 
         * @return builder
         * 
         */
        public Builder timeField(@Nullable Output<String> timeField) {
            $.timeField = timeField;
            return this;
        }

        /**
         * @param timeField (Elasticsearch) Which field that should be used as timestamp.
         * 
         * @return builder
         * 
         */
        public Builder timeField(String timeField) {
            return timeField(Output.of(timeField));
        }

        /**
         * @param timeInterval (Prometheus, Elasticsearch, InfluxDB, MySQL, PostgreSQL, and MSSQL) Lowest interval/step value that should be used for this data source. Sometimes called &#34;Scrape Interval&#34; in the Grafana UI.
         * 
         * @return builder
         * 
         */
        public Builder timeInterval(@Nullable Output<String> timeInterval) {
            $.timeInterval = timeInterval;
            return this;
        }

        /**
         * @param timeInterval (Prometheus, Elasticsearch, InfluxDB, MySQL, PostgreSQL, and MSSQL) Lowest interval/step value that should be used for this data source. Sometimes called &#34;Scrape Interval&#34; in the Grafana UI.
         * 
         * @return builder
         * 
         */
        public Builder timeInterval(String timeInterval) {
            return timeInterval(Output.of(timeInterval));
        }

        /**
         * @param timescaledb (PostgreSQL) Enable usage of TimescaleDB extension.
         * 
         * @return builder
         * 
         */
        public Builder timescaledb(@Nullable Output<Boolean> timescaledb) {
            $.timescaledb = timescaledb;
            return this;
        }

        /**
         * @param timescaledb (PostgreSQL) Enable usage of TimescaleDB extension.
         * 
         * @return builder
         * 
         */
        public Builder timescaledb(Boolean timescaledb) {
            return timescaledb(Output.of(timescaledb));
        }

        /**
         * @param tlsAuth (All) Enable TLS authentication using client cert configured in secure json data.
         * 
         * @return builder
         * 
         */
        public Builder tlsAuth(@Nullable Output<Boolean> tlsAuth) {
            $.tlsAuth = tlsAuth;
            return this;
        }

        /**
         * @param tlsAuth (All) Enable TLS authentication using client cert configured in secure json data.
         * 
         * @return builder
         * 
         */
        public Builder tlsAuth(Boolean tlsAuth) {
            return tlsAuth(Output.of(tlsAuth));
        }

        /**
         * @param tlsAuthWithCaCert (All) Enable TLS authentication using CA cert.
         * 
         * @return builder
         * 
         */
        public Builder tlsAuthWithCaCert(@Nullable Output<Boolean> tlsAuthWithCaCert) {
            $.tlsAuthWithCaCert = tlsAuthWithCaCert;
            return this;
        }

        /**
         * @param tlsAuthWithCaCert (All) Enable TLS authentication using CA cert.
         * 
         * @return builder
         * 
         */
        public Builder tlsAuthWithCaCert(Boolean tlsAuthWithCaCert) {
            return tlsAuthWithCaCert(Output.of(tlsAuthWithCaCert));
        }

        /**
         * @param tlsConfigurationMethod (All) SSL Certificate configuration, either by ‘file-path’ or ‘file-content’.
         * 
         * @return builder
         * 
         */
        public Builder tlsConfigurationMethod(@Nullable Output<String> tlsConfigurationMethod) {
            $.tlsConfigurationMethod = tlsConfigurationMethod;
            return this;
        }

        /**
         * @param tlsConfigurationMethod (All) SSL Certificate configuration, either by ‘file-path’ or ‘file-content’.
         * 
         * @return builder
         * 
         */
        public Builder tlsConfigurationMethod(String tlsConfigurationMethod) {
            return tlsConfigurationMethod(Output.of(tlsConfigurationMethod));
        }

        /**
         * @param tlsSkipVerify (All) Controls whether a client verifies the server’s certificate chain and host name.
         * 
         * @return builder
         * 
         */
        public Builder tlsSkipVerify(@Nullable Output<Boolean> tlsSkipVerify) {
            $.tlsSkipVerify = tlsSkipVerify;
            return this;
        }

        /**
         * @param tlsSkipVerify (All) Controls whether a client verifies the server’s certificate chain and host name.
         * 
         * @return builder
         * 
         */
        public Builder tlsSkipVerify(Boolean tlsSkipVerify) {
            return tlsSkipVerify(Output.of(tlsSkipVerify));
        }

        /**
         * @param tokenUri (Stackdriver) The token URI used, provided in the service account key.
         * 
         * @return builder
         * 
         */
        public Builder tokenUri(@Nullable Output<String> tokenUri) {
            $.tokenUri = tokenUri;
            return this;
        }

        /**
         * @param tokenUri (Stackdriver) The token URI used, provided in the service account key.
         * 
         * @return builder
         * 
         */
        public Builder tokenUri(String tokenUri) {
            return tokenUri(Output.of(tokenUri));
        }

        /**
         * @param tracingDatasourceUid (Cloudwatch) The X-Ray datasource uid to associate to this Cloudwatch datasource.
         * 
         * @return builder
         * 
         */
        public Builder tracingDatasourceUid(@Nullable Output<String> tracingDatasourceUid) {
            $.tracingDatasourceUid = tracingDatasourceUid;
            return this;
        }

        /**
         * @param tracingDatasourceUid (Cloudwatch) The X-Ray datasource uid to associate to this Cloudwatch datasource.
         * 
         * @return builder
         * 
         */
        public Builder tracingDatasourceUid(String tracingDatasourceUid) {
            return tracingDatasourceUid(Output.of(tracingDatasourceUid));
        }

        /**
         * @param tsdbResolution (OpenTSDB) Resolution.
         * 
         * @return builder
         * 
         */
        public Builder tsdbResolution(@Nullable Output<Integer> tsdbResolution) {
            $.tsdbResolution = tsdbResolution;
            return this;
        }

        /**
         * @param tsdbResolution (OpenTSDB) Resolution.
         * 
         * @return builder
         * 
         */
        public Builder tsdbResolution(Integer tsdbResolution) {
            return tsdbResolution(Output.of(tsdbResolution));
        }

        /**
         * @param tsdbVersion (OpenTSDB) Version.
         * 
         * @return builder
         * 
         */
        public Builder tsdbVersion(@Nullable Output<Integer> tsdbVersion) {
            $.tsdbVersion = tsdbVersion;
            return this;
        }

        /**
         * @param tsdbVersion (OpenTSDB) Version.
         * 
         * @return builder
         * 
         */
        public Builder tsdbVersion(Integer tsdbVersion) {
            return tsdbVersion(Output.of(tsdbVersion));
        }

        /**
         * @param version (InfluxDB) InfluxQL or Flux.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version (InfluxDB) InfluxQL or Flux.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        /**
         * @param workgroup (Athena) Workgroup to use.
         * 
         * @return builder
         * 
         */
        public Builder workgroup(@Nullable Output<String> workgroup) {
            $.workgroup = workgroup;
            return this;
        }

        /**
         * @param workgroup (Athena) Workgroup to use.
         * 
         * @return builder
         * 
         */
        public Builder workgroup(String workgroup) {
            return workgroup(Output.of(workgroup));
        }

        /**
         * @param xpackEnabled (Elasticsearch) Enable X-Pack support.
         * 
         * @return builder
         * 
         */
        public Builder xpackEnabled(@Nullable Output<Boolean> xpackEnabled) {
            $.xpackEnabled = xpackEnabled;
            return this;
        }

        /**
         * @param xpackEnabled (Elasticsearch) Enable X-Pack support.
         * 
         * @return builder
         * 
         */
        public Builder xpackEnabled(Boolean xpackEnabled) {
            return xpackEnabled(Output.of(xpackEnabled));
        }

        public DataSourceJsonDataArgs build() {
            return $;
        }
    }

}
