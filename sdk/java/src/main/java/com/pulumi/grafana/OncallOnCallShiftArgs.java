// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OncallOnCallShiftArgs extends com.pulumi.resources.ResourceArgs {

    public static final OncallOnCallShiftArgs Empty = new OncallOnCallShiftArgs();

    /**
     * This parameter takes a list of days in iCal format. Can be MO, TU, WE, TH, FR, SA, SU
     * 
     */
    @Import(name="byDays")
    private @Nullable Output<List<String>> byDays;

    /**
     * @return This parameter takes a list of days in iCal format. Can be MO, TU, WE, TH, FR, SA, SU
     * 
     */
    public Optional<Output<List<String>>> byDays() {
        return Optional.ofNullable(this.byDays);
    }

    /**
     * This parameter takes a list of days of the month.  Valid values are 1 to 31 or -31 to -1
     * 
     */
    @Import(name="byMonthdays")
    private @Nullable Output<List<Integer>> byMonthdays;

    /**
     * @return This parameter takes a list of days of the month.  Valid values are 1 to 31 or -31 to -1
     * 
     */
    public Optional<Output<List<Integer>>> byMonthdays() {
        return Optional.ofNullable(this.byMonthdays);
    }

    /**
     * This parameter takes a list of months. Valid values are 1 to 12
     * 
     */
    @Import(name="byMonths")
    private @Nullable Output<List<Integer>> byMonths;

    /**
     * @return This parameter takes a list of months. Valid values are 1 to 12
     * 
     */
    public Optional<Output<List<Integer>>> byMonths() {
        return Optional.ofNullable(this.byMonths);
    }

    /**
     * The duration of the event.
     * 
     */
    @Import(name="duration", required=true)
    private Output<Integer> duration;

    /**
     * @return The duration of the event.
     * 
     */
    public Output<Integer> duration() {
        return this.duration;
    }

    /**
     * The frequency of the event. Can be daily, weekly, monthly
     * 
     */
    @Import(name="frequency")
    private @Nullable Output<String> frequency;

    /**
     * @return The frequency of the event. Can be daily, weekly, monthly
     * 
     */
    public Optional<Output<String>> frequency() {
        return Optional.ofNullable(this.frequency);
    }

    /**
     * The positive integer representing at which intervals the recurrence rule repeats.
     * 
     */
    @Import(name="interval")
    private @Nullable Output<Integer> interval;

    /**
     * @return The positive integer representing at which intervals the recurrence rule repeats.
     * 
     */
    public Optional<Output<Integer>> interval() {
        return Optional.ofNullable(this.interval);
    }

    /**
     * The priority level. The higher the value, the higher the priority.
     * 
     */
    @Import(name="level")
    private @Nullable Output<Integer> level;

    /**
     * @return The priority level. The higher the value, the higher the priority.
     * 
     */
    public Optional<Output<Integer>> level() {
        return Optional.ofNullable(this.level);
    }

    /**
     * The shift&#39;s name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The shift&#39;s name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The list of lists with on-call users (for rolling_users event type)
     * 
     */
    @Import(name="rollingUsers")
    private @Nullable Output<List<List<String>>> rollingUsers;

    /**
     * @return The list of lists with on-call users (for rolling_users event type)
     * 
     */
    public Optional<Output<List<List<String>>>> rollingUsers() {
        return Optional.ofNullable(this.rollingUsers);
    }

    /**
     * The start time of the on-call shift. This parameter takes a date format as yyyy-MM-dd&#39;T&#39;HH:mm:ss (for example &#34;2020-09-05T08:00:00&#34;)
     * 
     */
    @Import(name="start", required=true)
    private Output<String> start;

    /**
     * @return The start time of the on-call shift. This parameter takes a date format as yyyy-MM-dd&#39;T&#39;HH:mm:ss (for example &#34;2020-09-05T08:00:00&#34;)
     * 
     */
    public Output<String> start() {
        return this.start;
    }

    /**
     * The index of the list of users in rolling_users, from which on-call rotation starts.
     * 
     */
    @Import(name="startRotationFromUserIndex")
    private @Nullable Output<Integer> startRotationFromUserIndex;

    /**
     * @return The index of the list of users in rolling_users, from which on-call rotation starts.
     * 
     */
    public Optional<Output<Integer>> startRotationFromUserIndex() {
        return Optional.ofNullable(this.startRotationFromUserIndex);
    }

    /**
     * The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `grafana.getOncallTeam` datasource.
     * 
     */
    @Import(name="teamId")
    private @Nullable Output<String> teamId;

    /**
     * @return The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `grafana.getOncallTeam` datasource.
     * 
     */
    public Optional<Output<String>> teamId() {
        return Optional.ofNullable(this.teamId);
    }

    /**
     * The shift&#39;s timezone.  Overrides schedule&#39;s timezone.
     * 
     */
    @Import(name="timeZone")
    private @Nullable Output<String> timeZone;

    /**
     * @return The shift&#39;s timezone.  Overrides schedule&#39;s timezone.
     * 
     */
    public Optional<Output<String>> timeZone() {
        return Optional.ofNullable(this.timeZone);
    }

    /**
     * The shift&#39;s type. Can be rolling*users, recurrent*event, single_event
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The shift&#39;s type. Can be rolling*users, recurrent*event, single_event
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * The list of on-call users (for single*event and recurrent*event event type).
     * 
     */
    @Import(name="users")
    private @Nullable Output<List<String>> users;

    /**
     * @return The list of on-call users (for single*event and recurrent*event event type).
     * 
     */
    public Optional<Output<List<String>>> users() {
        return Optional.ofNullable(this.users);
    }

    /**
     * Start day of the week in iCal format. Can be MO, TU, WE, TH, FR, SA, SU
     * 
     */
    @Import(name="weekStart")
    private @Nullable Output<String> weekStart;

    /**
     * @return Start day of the week in iCal format. Can be MO, TU, WE, TH, FR, SA, SU
     * 
     */
    public Optional<Output<String>> weekStart() {
        return Optional.ofNullable(this.weekStart);
    }

    private OncallOnCallShiftArgs() {}

    private OncallOnCallShiftArgs(OncallOnCallShiftArgs $) {
        this.byDays = $.byDays;
        this.byMonthdays = $.byMonthdays;
        this.byMonths = $.byMonths;
        this.duration = $.duration;
        this.frequency = $.frequency;
        this.interval = $.interval;
        this.level = $.level;
        this.name = $.name;
        this.rollingUsers = $.rollingUsers;
        this.start = $.start;
        this.startRotationFromUserIndex = $.startRotationFromUserIndex;
        this.teamId = $.teamId;
        this.timeZone = $.timeZone;
        this.type = $.type;
        this.users = $.users;
        this.weekStart = $.weekStart;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OncallOnCallShiftArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OncallOnCallShiftArgs $;

        public Builder() {
            $ = new OncallOnCallShiftArgs();
        }

        public Builder(OncallOnCallShiftArgs defaults) {
            $ = new OncallOnCallShiftArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param byDays This parameter takes a list of days in iCal format. Can be MO, TU, WE, TH, FR, SA, SU
         * 
         * @return builder
         * 
         */
        public Builder byDays(@Nullable Output<List<String>> byDays) {
            $.byDays = byDays;
            return this;
        }

        /**
         * @param byDays This parameter takes a list of days in iCal format. Can be MO, TU, WE, TH, FR, SA, SU
         * 
         * @return builder
         * 
         */
        public Builder byDays(List<String> byDays) {
            return byDays(Output.of(byDays));
        }

        /**
         * @param byDays This parameter takes a list of days in iCal format. Can be MO, TU, WE, TH, FR, SA, SU
         * 
         * @return builder
         * 
         */
        public Builder byDays(String... byDays) {
            return byDays(List.of(byDays));
        }

        /**
         * @param byMonthdays This parameter takes a list of days of the month.  Valid values are 1 to 31 or -31 to -1
         * 
         * @return builder
         * 
         */
        public Builder byMonthdays(@Nullable Output<List<Integer>> byMonthdays) {
            $.byMonthdays = byMonthdays;
            return this;
        }

        /**
         * @param byMonthdays This parameter takes a list of days of the month.  Valid values are 1 to 31 or -31 to -1
         * 
         * @return builder
         * 
         */
        public Builder byMonthdays(List<Integer> byMonthdays) {
            return byMonthdays(Output.of(byMonthdays));
        }

        /**
         * @param byMonthdays This parameter takes a list of days of the month.  Valid values are 1 to 31 or -31 to -1
         * 
         * @return builder
         * 
         */
        public Builder byMonthdays(Integer... byMonthdays) {
            return byMonthdays(List.of(byMonthdays));
        }

        /**
         * @param byMonths This parameter takes a list of months. Valid values are 1 to 12
         * 
         * @return builder
         * 
         */
        public Builder byMonths(@Nullable Output<List<Integer>> byMonths) {
            $.byMonths = byMonths;
            return this;
        }

        /**
         * @param byMonths This parameter takes a list of months. Valid values are 1 to 12
         * 
         * @return builder
         * 
         */
        public Builder byMonths(List<Integer> byMonths) {
            return byMonths(Output.of(byMonths));
        }

        /**
         * @param byMonths This parameter takes a list of months. Valid values are 1 to 12
         * 
         * @return builder
         * 
         */
        public Builder byMonths(Integer... byMonths) {
            return byMonths(List.of(byMonths));
        }

        /**
         * @param duration The duration of the event.
         * 
         * @return builder
         * 
         */
        public Builder duration(Output<Integer> duration) {
            $.duration = duration;
            return this;
        }

        /**
         * @param duration The duration of the event.
         * 
         * @return builder
         * 
         */
        public Builder duration(Integer duration) {
            return duration(Output.of(duration));
        }

        /**
         * @param frequency The frequency of the event. Can be daily, weekly, monthly
         * 
         * @return builder
         * 
         */
        public Builder frequency(@Nullable Output<String> frequency) {
            $.frequency = frequency;
            return this;
        }

        /**
         * @param frequency The frequency of the event. Can be daily, weekly, monthly
         * 
         * @return builder
         * 
         */
        public Builder frequency(String frequency) {
            return frequency(Output.of(frequency));
        }

        /**
         * @param interval The positive integer representing at which intervals the recurrence rule repeats.
         * 
         * @return builder
         * 
         */
        public Builder interval(@Nullable Output<Integer> interval) {
            $.interval = interval;
            return this;
        }

        /**
         * @param interval The positive integer representing at which intervals the recurrence rule repeats.
         * 
         * @return builder
         * 
         */
        public Builder interval(Integer interval) {
            return interval(Output.of(interval));
        }

        /**
         * @param level The priority level. The higher the value, the higher the priority.
         * 
         * @return builder
         * 
         */
        public Builder level(@Nullable Output<Integer> level) {
            $.level = level;
            return this;
        }

        /**
         * @param level The priority level. The higher the value, the higher the priority.
         * 
         * @return builder
         * 
         */
        public Builder level(Integer level) {
            return level(Output.of(level));
        }

        /**
         * @param name The shift&#39;s name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The shift&#39;s name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param rollingUsers The list of lists with on-call users (for rolling_users event type)
         * 
         * @return builder
         * 
         */
        public Builder rollingUsers(@Nullable Output<List<List<String>>> rollingUsers) {
            $.rollingUsers = rollingUsers;
            return this;
        }

        /**
         * @param rollingUsers The list of lists with on-call users (for rolling_users event type)
         * 
         * @return builder
         * 
         */
        public Builder rollingUsers(List<List<String>> rollingUsers) {
            return rollingUsers(Output.of(rollingUsers));
        }

        /**
         * @param rollingUsers The list of lists with on-call users (for rolling_users event type)
         * 
         * @return builder
         * 
         */
        public Builder rollingUsers(List<String>... rollingUsers) {
            return rollingUsers(List.of(rollingUsers));
        }

        /**
         * @param start The start time of the on-call shift. This parameter takes a date format as yyyy-MM-dd&#39;T&#39;HH:mm:ss (for example &#34;2020-09-05T08:00:00&#34;)
         * 
         * @return builder
         * 
         */
        public Builder start(Output<String> start) {
            $.start = start;
            return this;
        }

        /**
         * @param start The start time of the on-call shift. This parameter takes a date format as yyyy-MM-dd&#39;T&#39;HH:mm:ss (for example &#34;2020-09-05T08:00:00&#34;)
         * 
         * @return builder
         * 
         */
        public Builder start(String start) {
            return start(Output.of(start));
        }

        /**
         * @param startRotationFromUserIndex The index of the list of users in rolling_users, from which on-call rotation starts.
         * 
         * @return builder
         * 
         */
        public Builder startRotationFromUserIndex(@Nullable Output<Integer> startRotationFromUserIndex) {
            $.startRotationFromUserIndex = startRotationFromUserIndex;
            return this;
        }

        /**
         * @param startRotationFromUserIndex The index of the list of users in rolling_users, from which on-call rotation starts.
         * 
         * @return builder
         * 
         */
        public Builder startRotationFromUserIndex(Integer startRotationFromUserIndex) {
            return startRotationFromUserIndex(Output.of(startRotationFromUserIndex));
        }

        /**
         * @param teamId The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `grafana.getOncallTeam` datasource.
         * 
         * @return builder
         * 
         */
        public Builder teamId(@Nullable Output<String> teamId) {
            $.teamId = teamId;
            return this;
        }

        /**
         * @param teamId The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `grafana.getOncallTeam` datasource.
         * 
         * @return builder
         * 
         */
        public Builder teamId(String teamId) {
            return teamId(Output.of(teamId));
        }

        /**
         * @param timeZone The shift&#39;s timezone.  Overrides schedule&#39;s timezone.
         * 
         * @return builder
         * 
         */
        public Builder timeZone(@Nullable Output<String> timeZone) {
            $.timeZone = timeZone;
            return this;
        }

        /**
         * @param timeZone The shift&#39;s timezone.  Overrides schedule&#39;s timezone.
         * 
         * @return builder
         * 
         */
        public Builder timeZone(String timeZone) {
            return timeZone(Output.of(timeZone));
        }

        /**
         * @param type The shift&#39;s type. Can be rolling*users, recurrent*event, single_event
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The shift&#39;s type. Can be rolling*users, recurrent*event, single_event
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param users The list of on-call users (for single*event and recurrent*event event type).
         * 
         * @return builder
         * 
         */
        public Builder users(@Nullable Output<List<String>> users) {
            $.users = users;
            return this;
        }

        /**
         * @param users The list of on-call users (for single*event and recurrent*event event type).
         * 
         * @return builder
         * 
         */
        public Builder users(List<String> users) {
            return users(Output.of(users));
        }

        /**
         * @param users The list of on-call users (for single*event and recurrent*event event type).
         * 
         * @return builder
         * 
         */
        public Builder users(String... users) {
            return users(List.of(users));
        }

        /**
         * @param weekStart Start day of the week in iCal format. Can be MO, TU, WE, TH, FR, SA, SU
         * 
         * @return builder
         * 
         */
        public Builder weekStart(@Nullable Output<String> weekStart) {
            $.weekStart = weekStart;
            return this;
        }

        /**
         * @param weekStart Start day of the week in iCal format. Can be MO, TU, WE, TH, FR, SA, SU
         * 
         * @return builder
         * 
         */
        public Builder weekStart(String weekStart) {
            return weekStart(Output.of(weekStart));
        }

        public OncallOnCallShiftArgs build() {
            $.duration = Objects.requireNonNull($.duration, "expected parameter 'duration' to be non-null");
            $.start = Objects.requireNonNull($.start, "expected parameter 'start' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
