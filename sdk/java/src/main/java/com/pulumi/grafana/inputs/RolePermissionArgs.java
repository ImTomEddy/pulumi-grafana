// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RolePermissionArgs extends com.pulumi.resources.ResourceArgs {

    public static final RolePermissionArgs Empty = new RolePermissionArgs();

    /**
     * Specific action users granted with the role will be allowed to perform (for example: `users:read`)
     * 
     */
    @Import(name="action", required=true)
    private Output<String> action;

    /**
     * @return Specific action users granted with the role will be allowed to perform (for example: `users:read`)
     * 
     */
    public Output<String> action() {
        return this.action;
    }

    /**
     * Scope to restrict the action to a set of resources (for example: `users:*` or `roles:customrole1`) Defaults to ``.
     * 
     */
    @Import(name="scope")
    private @Nullable Output<String> scope;

    /**
     * @return Scope to restrict the action to a set of resources (for example: `users:*` or `roles:customrole1`) Defaults to ``.
     * 
     */
    public Optional<Output<String>> scope() {
        return Optional.ofNullable(this.scope);
    }

    private RolePermissionArgs() {}

    private RolePermissionArgs(RolePermissionArgs $) {
        this.action = $.action;
        this.scope = $.scope;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RolePermissionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RolePermissionArgs $;

        public Builder() {
            $ = new RolePermissionArgs();
        }

        public Builder(RolePermissionArgs defaults) {
            $ = new RolePermissionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action Specific action users granted with the role will be allowed to perform (for example: `users:read`)
         * 
         * @return builder
         * 
         */
        public Builder action(Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action Specific action users granted with the role will be allowed to perform (for example: `users:read`)
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param scope Scope to restrict the action to a set of resources (for example: `users:*` or `roles:customrole1`) Defaults to ``.
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope Scope to restrict the action to a set of resources (for example: `users:*` or `roles:customrole1`) Defaults to ``.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        public RolePermissionArgs build() {
            $.action = Objects.requireNonNull($.action, "expected parameter 'action' to be non-null");
            return $;
        }
    }

}
