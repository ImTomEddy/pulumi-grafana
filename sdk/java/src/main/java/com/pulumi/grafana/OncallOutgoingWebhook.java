// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.grafana.OncallOutgoingWebhookArgs;
import com.pulumi.grafana.Utilities;
import com.pulumi.grafana.inputs.OncallOutgoingWebhookState;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * * [HTTP API](https://grafana.com/docs/oncall/latest/oncall-api-reference/outgoing_webhooks/)
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.grafana.OncallOutgoingWebhook;
 * import com.pulumi.grafana.OncallOutgoingWebhookArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var test_acc_outgoingWebhook = new OncallOutgoingWebhook(&#34;test-acc-outgoingWebhook&#34;, OncallOutgoingWebhookArgs.builder()        
 *             .url(&#34;https://example.com/&#34;)
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(grafana.oncall())
 *                 .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * ```sh
 *  $ pulumi import grafana:index/oncallOutgoingWebhook:OncallOutgoingWebhook outgoing_webhook_name {{outgoing_webhook_id}}
 * ```
 * 
 */
@ResourceType(type="grafana:index/oncallOutgoingWebhook:OncallOutgoingWebhook")
public class OncallOutgoingWebhook extends com.pulumi.resources.CustomResource {
    /**
     * The auth data of the webhook. Used in Authorization header instead of user/password auth.
     * 
     */
    @Export(name="authorizationHeader", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> authorizationHeader;

    /**
     * @return The auth data of the webhook. Used in Authorization header instead of user/password auth.
     * 
     */
    public Output<Optional<String>> authorizationHeader() {
        return Codegen.optional(this.authorizationHeader);
    }
    /**
     * The data of the webhook.
     * 
     */
    @Export(name="data", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> data;

    /**
     * @return The data of the webhook.
     * 
     */
    public Output<Optional<String>> data() {
        return Codegen.optional(this.data);
    }
    /**
     * Forwards whole payload of the alert to the webhook&#39;s url as POST data.
     * 
     */
    @Export(name="forwardWholePayload", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> forwardWholePayload;

    /**
     * @return Forwards whole payload of the alert to the webhook&#39;s url as POST data.
     * 
     */
    public Output<Optional<Boolean>> forwardWholePayload() {
        return Codegen.optional(this.forwardWholePayload);
    }
    /**
     * The name of the outgoing webhook.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the outgoing webhook.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The auth data of the webhook. Used for Basic authentication
     * 
     */
    @Export(name="password", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> password;

    /**
     * @return The auth data of the webhook. Used for Basic authentication
     * 
     */
    public Output<Optional<String>> password() {
        return Codegen.optional(this.password);
    }
    /**
     * The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `grafana.getOncallTeam` datasource.
     * 
     */
    @Export(name="teamId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> teamId;

    /**
     * @return The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `grafana.getOncallTeam` datasource.
     * 
     */
    public Output<Optional<String>> teamId() {
        return Codegen.optional(this.teamId);
    }
    /**
     * The webhook URL.
     * 
     */
    @Export(name="url", refs={String.class}, tree="[0]")
    private Output<String> url;

    /**
     * @return The webhook URL.
     * 
     */
    public Output<String> url() {
        return this.url;
    }
    /**
     * The auth data of the webhook. Used for Basic authentication.
     * 
     */
    @Export(name="user", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> user;

    /**
     * @return The auth data of the webhook. Used for Basic authentication.
     * 
     */
    public Output<Optional<String>> user() {
        return Codegen.optional(this.user);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public OncallOutgoingWebhook(String name) {
        this(name, OncallOutgoingWebhookArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public OncallOutgoingWebhook(String name, OncallOutgoingWebhookArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public OncallOutgoingWebhook(String name, OncallOutgoingWebhookArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("grafana:index/oncallOutgoingWebhook:OncallOutgoingWebhook", name, args == null ? OncallOutgoingWebhookArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private OncallOutgoingWebhook(String name, Output<String> id, @Nullable OncallOutgoingWebhookState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("grafana:index/oncallOutgoingWebhook:OncallOutgoingWebhook", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static OncallOutgoingWebhook get(String name, Output<String> id, @Nullable OncallOutgoingWebhookState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new OncallOutgoingWebhook(name, id, state, options);
    }
}
