// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.grafana.inputs.OncallScheduleSlackArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OncallScheduleArgs extends com.pulumi.resources.ResourceArgs {

    public static final OncallScheduleArgs Empty = new OncallScheduleArgs();

    /**
     * Enable overrides via web UI (it will ignore ical*url*overrides).
     * 
     */
    @Import(name="enableWebOverrides")
    private @Nullable Output<Boolean> enableWebOverrides;

    /**
     * @return Enable overrides via web UI (it will ignore ical*url*overrides).
     * 
     */
    public Optional<Output<Boolean>> enableWebOverrides() {
        return Optional.ofNullable(this.enableWebOverrides);
    }

    /**
     * The URL of external iCal calendar which override primary events.
     * 
     */
    @Import(name="icalUrlOverrides")
    private @Nullable Output<String> icalUrlOverrides;

    /**
     * @return The URL of external iCal calendar which override primary events.
     * 
     */
    public Optional<Output<String>> icalUrlOverrides() {
        return Optional.ofNullable(this.icalUrlOverrides);
    }

    /**
     * The URL of the external calendar iCal file.
     * 
     */
    @Import(name="icalUrlPrimary")
    private @Nullable Output<String> icalUrlPrimary;

    /**
     * @return The URL of the external calendar iCal file.
     * 
     */
    public Optional<Output<String>> icalUrlPrimary() {
        return Optional.ofNullable(this.icalUrlPrimary);
    }

    /**
     * The schedule&#39;s name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The schedule&#39;s name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The list of ID&#39;s of on-call shifts.
     * 
     */
    @Import(name="shifts")
    private @Nullable Output<List<String>> shifts;

    /**
     * @return The list of ID&#39;s of on-call shifts.
     * 
     */
    public Optional<Output<List<String>>> shifts() {
        return Optional.ofNullable(this.shifts);
    }

    /**
     * The Slack-specific settings for a schedule.
     * 
     */
    @Import(name="slack")
    private @Nullable Output<OncallScheduleSlackArgs> slack;

    /**
     * @return The Slack-specific settings for a schedule.
     * 
     */
    public Optional<Output<OncallScheduleSlackArgs>> slack() {
        return Optional.ofNullable(this.slack);
    }

    /**
     * The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `grafana.getOncallTeam` datasource.
     * 
     */
    @Import(name="teamId")
    private @Nullable Output<String> teamId;

    /**
     * @return The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `grafana.getOncallTeam` datasource.
     * 
     */
    public Optional<Output<String>> teamId() {
        return Optional.ofNullable(this.teamId);
    }

    /**
     * The schedule&#39;s time zone.
     * 
     */
    @Import(name="timeZone")
    private @Nullable Output<String> timeZone;

    /**
     * @return The schedule&#39;s time zone.
     * 
     */
    public Optional<Output<String>> timeZone() {
        return Optional.ofNullable(this.timeZone);
    }

    /**
     * The schedule&#39;s type.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The schedule&#39;s type.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private OncallScheduleArgs() {}

    private OncallScheduleArgs(OncallScheduleArgs $) {
        this.enableWebOverrides = $.enableWebOverrides;
        this.icalUrlOverrides = $.icalUrlOverrides;
        this.icalUrlPrimary = $.icalUrlPrimary;
        this.name = $.name;
        this.shifts = $.shifts;
        this.slack = $.slack;
        this.teamId = $.teamId;
        this.timeZone = $.timeZone;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OncallScheduleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OncallScheduleArgs $;

        public Builder() {
            $ = new OncallScheduleArgs();
        }

        public Builder(OncallScheduleArgs defaults) {
            $ = new OncallScheduleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enableWebOverrides Enable overrides via web UI (it will ignore ical*url*overrides).
         * 
         * @return builder
         * 
         */
        public Builder enableWebOverrides(@Nullable Output<Boolean> enableWebOverrides) {
            $.enableWebOverrides = enableWebOverrides;
            return this;
        }

        /**
         * @param enableWebOverrides Enable overrides via web UI (it will ignore ical*url*overrides).
         * 
         * @return builder
         * 
         */
        public Builder enableWebOverrides(Boolean enableWebOverrides) {
            return enableWebOverrides(Output.of(enableWebOverrides));
        }

        /**
         * @param icalUrlOverrides The URL of external iCal calendar which override primary events.
         * 
         * @return builder
         * 
         */
        public Builder icalUrlOverrides(@Nullable Output<String> icalUrlOverrides) {
            $.icalUrlOverrides = icalUrlOverrides;
            return this;
        }

        /**
         * @param icalUrlOverrides The URL of external iCal calendar which override primary events.
         * 
         * @return builder
         * 
         */
        public Builder icalUrlOverrides(String icalUrlOverrides) {
            return icalUrlOverrides(Output.of(icalUrlOverrides));
        }

        /**
         * @param icalUrlPrimary The URL of the external calendar iCal file.
         * 
         * @return builder
         * 
         */
        public Builder icalUrlPrimary(@Nullable Output<String> icalUrlPrimary) {
            $.icalUrlPrimary = icalUrlPrimary;
            return this;
        }

        /**
         * @param icalUrlPrimary The URL of the external calendar iCal file.
         * 
         * @return builder
         * 
         */
        public Builder icalUrlPrimary(String icalUrlPrimary) {
            return icalUrlPrimary(Output.of(icalUrlPrimary));
        }

        /**
         * @param name The schedule&#39;s name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The schedule&#39;s name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param shifts The list of ID&#39;s of on-call shifts.
         * 
         * @return builder
         * 
         */
        public Builder shifts(@Nullable Output<List<String>> shifts) {
            $.shifts = shifts;
            return this;
        }

        /**
         * @param shifts The list of ID&#39;s of on-call shifts.
         * 
         * @return builder
         * 
         */
        public Builder shifts(List<String> shifts) {
            return shifts(Output.of(shifts));
        }

        /**
         * @param shifts The list of ID&#39;s of on-call shifts.
         * 
         * @return builder
         * 
         */
        public Builder shifts(String... shifts) {
            return shifts(List.of(shifts));
        }

        /**
         * @param slack The Slack-specific settings for a schedule.
         * 
         * @return builder
         * 
         */
        public Builder slack(@Nullable Output<OncallScheduleSlackArgs> slack) {
            $.slack = slack;
            return this;
        }

        /**
         * @param slack The Slack-specific settings for a schedule.
         * 
         * @return builder
         * 
         */
        public Builder slack(OncallScheduleSlackArgs slack) {
            return slack(Output.of(slack));
        }

        /**
         * @param teamId The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `grafana.getOncallTeam` datasource.
         * 
         * @return builder
         * 
         */
        public Builder teamId(@Nullable Output<String> teamId) {
            $.teamId = teamId;
            return this;
        }

        /**
         * @param teamId The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `grafana.getOncallTeam` datasource.
         * 
         * @return builder
         * 
         */
        public Builder teamId(String teamId) {
            return teamId(Output.of(teamId));
        }

        /**
         * @param timeZone The schedule&#39;s time zone.
         * 
         * @return builder
         * 
         */
        public Builder timeZone(@Nullable Output<String> timeZone) {
            $.timeZone = timeZone;
            return this;
        }

        /**
         * @param timeZone The schedule&#39;s time zone.
         * 
         * @return builder
         * 
         */
        public Builder timeZone(String timeZone) {
            return timeZone(Output.of(timeZone));
        }

        /**
         * @param type The schedule&#39;s type.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The schedule&#39;s type.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public OncallScheduleArgs build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
