// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContactPointPushoverArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContactPointPushoverArgs Empty = new ContactPointPushoverArgs();

    /**
     * The Pushover API token.
     * 
     */
    @Import(name="apiToken", required=true)
    private Output<String> apiToken;

    /**
     * @return The Pushover API token.
     * 
     */
    public Output<String> apiToken() {
        return this.apiToken;
    }

    /**
     * Comma-separated list of devices to which the event is associated.
     * 
     */
    @Import(name="device")
    private @Nullable Output<String> device;

    /**
     * @return Comma-separated list of devices to which the event is associated.
     * 
     */
    public Optional<Output<String>> device() {
        return Optional.ofNullable(this.device);
    }

    /**
     * Whether to disable sending resolve messages. Defaults to `false`.
     * 
     */
    @Import(name="disableResolveMessage")
    private @Nullable Output<Boolean> disableResolveMessage;

    /**
     * @return Whether to disable sending resolve messages. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> disableResolveMessage() {
        return Optional.ofNullable(this.disableResolveMessage);
    }

    /**
     * How many seconds for which the notification will continue to be retried by Pushover.
     * 
     */
    @Import(name="expire")
    private @Nullable Output<Integer> expire;

    /**
     * @return How many seconds for which the notification will continue to be retried by Pushover.
     * 
     */
    public Optional<Output<Integer>> expire() {
        return Optional.ofNullable(this.expire);
    }

    /**
     * The templated notification message content.
     * 
     */
    @Import(name="message")
    private @Nullable Output<String> message;

    /**
     * @return The templated notification message content.
     * 
     */
    public Optional<Output<String>> message() {
        return Optional.ofNullable(this.message);
    }

    /**
     * The priority level of the resolved event.
     * 
     */
    @Import(name="okPriority")
    private @Nullable Output<Integer> okPriority;

    /**
     * @return The priority level of the resolved event.
     * 
     */
    public Optional<Output<Integer>> okPriority() {
        return Optional.ofNullable(this.okPriority);
    }

    /**
     * The sound associated with the resolved notification.
     * 
     */
    @Import(name="okSound")
    private @Nullable Output<String> okSound;

    /**
     * @return The sound associated with the resolved notification.
     * 
     */
    public Optional<Output<String>> okSound() {
        return Optional.ofNullable(this.okSound);
    }

    /**
     * The priority level of the event.
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    /**
     * @return The priority level of the event.
     * 
     */
    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * How often, in seconds, the Pushover servers will send the same notification to the user.
     * 
     */
    @Import(name="retry")
    private @Nullable Output<Integer> retry;

    /**
     * @return How often, in seconds, the Pushover servers will send the same notification to the user.
     * 
     */
    public Optional<Output<Integer>> retry() {
        return Optional.ofNullable(this.retry);
    }

    /**
     * Additional custom properties to attach to the notifier. Defaults to `map[]`.
     * 
     */
    @Import(name="settings")
    private @Nullable Output<Map<String,String>> settings;

    /**
     * @return Additional custom properties to attach to the notifier. Defaults to `map[]`.
     * 
     */
    public Optional<Output<Map<String,String>>> settings() {
        return Optional.ofNullable(this.settings);
    }

    /**
     * The sound associated with the notification.
     * 
     */
    @Import(name="sound")
    private @Nullable Output<String> sound;

    /**
     * @return The sound associated with the notification.
     * 
     */
    public Optional<Output<String>> sound() {
        return Optional.ofNullable(this.sound);
    }

    /**
     * The templated title of the message.
     * 
     */
    @Import(name="title")
    private @Nullable Output<String> title;

    /**
     * @return The templated title of the message.
     * 
     */
    public Optional<Output<String>> title() {
        return Optional.ofNullable(this.title);
    }

    /**
     * The UID of the contact point.
     * 
     */
    @Import(name="uid")
    private @Nullable Output<String> uid;

    /**
     * @return The UID of the contact point.
     * 
     */
    public Optional<Output<String>> uid() {
        return Optional.ofNullable(this.uid);
    }

    /**
     * The Pushover user key.
     * 
     */
    @Import(name="userKey", required=true)
    private Output<String> userKey;

    /**
     * @return The Pushover user key.
     * 
     */
    public Output<String> userKey() {
        return this.userKey;
    }

    private ContactPointPushoverArgs() {}

    private ContactPointPushoverArgs(ContactPointPushoverArgs $) {
        this.apiToken = $.apiToken;
        this.device = $.device;
        this.disableResolveMessage = $.disableResolveMessage;
        this.expire = $.expire;
        this.message = $.message;
        this.okPriority = $.okPriority;
        this.okSound = $.okSound;
        this.priority = $.priority;
        this.retry = $.retry;
        this.settings = $.settings;
        this.sound = $.sound;
        this.title = $.title;
        this.uid = $.uid;
        this.userKey = $.userKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContactPointPushoverArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContactPointPushoverArgs $;

        public Builder() {
            $ = new ContactPointPushoverArgs();
        }

        public Builder(ContactPointPushoverArgs defaults) {
            $ = new ContactPointPushoverArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiToken The Pushover API token.
         * 
         * @return builder
         * 
         */
        public Builder apiToken(Output<String> apiToken) {
            $.apiToken = apiToken;
            return this;
        }

        /**
         * @param apiToken The Pushover API token.
         * 
         * @return builder
         * 
         */
        public Builder apiToken(String apiToken) {
            return apiToken(Output.of(apiToken));
        }

        /**
         * @param device Comma-separated list of devices to which the event is associated.
         * 
         * @return builder
         * 
         */
        public Builder device(@Nullable Output<String> device) {
            $.device = device;
            return this;
        }

        /**
         * @param device Comma-separated list of devices to which the event is associated.
         * 
         * @return builder
         * 
         */
        public Builder device(String device) {
            return device(Output.of(device));
        }

        /**
         * @param disableResolveMessage Whether to disable sending resolve messages. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder disableResolveMessage(@Nullable Output<Boolean> disableResolveMessage) {
            $.disableResolveMessage = disableResolveMessage;
            return this;
        }

        /**
         * @param disableResolveMessage Whether to disable sending resolve messages. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder disableResolveMessage(Boolean disableResolveMessage) {
            return disableResolveMessage(Output.of(disableResolveMessage));
        }

        /**
         * @param expire How many seconds for which the notification will continue to be retried by Pushover.
         * 
         * @return builder
         * 
         */
        public Builder expire(@Nullable Output<Integer> expire) {
            $.expire = expire;
            return this;
        }

        /**
         * @param expire How many seconds for which the notification will continue to be retried by Pushover.
         * 
         * @return builder
         * 
         */
        public Builder expire(Integer expire) {
            return expire(Output.of(expire));
        }

        /**
         * @param message The templated notification message content.
         * 
         * @return builder
         * 
         */
        public Builder message(@Nullable Output<String> message) {
            $.message = message;
            return this;
        }

        /**
         * @param message The templated notification message content.
         * 
         * @return builder
         * 
         */
        public Builder message(String message) {
            return message(Output.of(message));
        }

        /**
         * @param okPriority The priority level of the resolved event.
         * 
         * @return builder
         * 
         */
        public Builder okPriority(@Nullable Output<Integer> okPriority) {
            $.okPriority = okPriority;
            return this;
        }

        /**
         * @param okPriority The priority level of the resolved event.
         * 
         * @return builder
         * 
         */
        public Builder okPriority(Integer okPriority) {
            return okPriority(Output.of(okPriority));
        }

        /**
         * @param okSound The sound associated with the resolved notification.
         * 
         * @return builder
         * 
         */
        public Builder okSound(@Nullable Output<String> okSound) {
            $.okSound = okSound;
            return this;
        }

        /**
         * @param okSound The sound associated with the resolved notification.
         * 
         * @return builder
         * 
         */
        public Builder okSound(String okSound) {
            return okSound(Output.of(okSound));
        }

        /**
         * @param priority The priority level of the event.
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority The priority level of the event.
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param retry How often, in seconds, the Pushover servers will send the same notification to the user.
         * 
         * @return builder
         * 
         */
        public Builder retry(@Nullable Output<Integer> retry) {
            $.retry = retry;
            return this;
        }

        /**
         * @param retry How often, in seconds, the Pushover servers will send the same notification to the user.
         * 
         * @return builder
         * 
         */
        public Builder retry(Integer retry) {
            return retry(Output.of(retry));
        }

        /**
         * @param settings Additional custom properties to attach to the notifier. Defaults to `map[]`.
         * 
         * @return builder
         * 
         */
        public Builder settings(@Nullable Output<Map<String,String>> settings) {
            $.settings = settings;
            return this;
        }

        /**
         * @param settings Additional custom properties to attach to the notifier. Defaults to `map[]`.
         * 
         * @return builder
         * 
         */
        public Builder settings(Map<String,String> settings) {
            return settings(Output.of(settings));
        }

        /**
         * @param sound The sound associated with the notification.
         * 
         * @return builder
         * 
         */
        public Builder sound(@Nullable Output<String> sound) {
            $.sound = sound;
            return this;
        }

        /**
         * @param sound The sound associated with the notification.
         * 
         * @return builder
         * 
         */
        public Builder sound(String sound) {
            return sound(Output.of(sound));
        }

        /**
         * @param title The templated title of the message.
         * 
         * @return builder
         * 
         */
        public Builder title(@Nullable Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title The templated title of the message.
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        /**
         * @param uid The UID of the contact point.
         * 
         * @return builder
         * 
         */
        public Builder uid(@Nullable Output<String> uid) {
            $.uid = uid;
            return this;
        }

        /**
         * @param uid The UID of the contact point.
         * 
         * @return builder
         * 
         */
        public Builder uid(String uid) {
            return uid(Output.of(uid));
        }

        /**
         * @param userKey The Pushover user key.
         * 
         * @return builder
         * 
         */
        public Builder userKey(Output<String> userKey) {
            $.userKey = userKey;
            return this;
        }

        /**
         * @param userKey The Pushover user key.
         * 
         * @return builder
         * 
         */
        public Builder userKey(String userKey) {
            return userKey(Output.of(userKey));
        }

        public ContactPointPushoverArgs build() {
            $.apiToken = Objects.requireNonNull($.apiToken, "expected parameter 'apiToken' to be non-null");
            $.userKey = Objects.requireNonNull($.userKey, "expected parameter 'userKey' to be non-null");
            return $;
        }
    }

}
