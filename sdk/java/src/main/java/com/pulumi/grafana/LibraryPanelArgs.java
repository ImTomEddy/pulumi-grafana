// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LibraryPanelArgs extends com.pulumi.resources.ResourceArgs {

    public static final LibraryPanelArgs Empty = new LibraryPanelArgs();

    /**
     * ID of the folder where the library panel is stored.
     * 
     */
    @Import(name="folderId")
    private @Nullable Output<Integer> folderId;

    /**
     * @return ID of the folder where the library panel is stored.
     * 
     */
    public Optional<Output<Integer>> folderId() {
        return Optional.ofNullable(this.folderId);
    }

    /**
     * The JSON model for the library panel.
     * 
     */
    @Import(name="modelJson", required=true)
    private Output<String> modelJson;

    /**
     * @return The JSON model for the library panel.
     * 
     */
    public Output<String> modelJson() {
        return this.modelJson;
    }

    /**
     * Name of the library panel.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the library panel.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The unique identifier (UID) of a library panel uniquely identifies library panels between multiple Grafana installs. It’s automatically generated unless you specify it during library panel creation.The UID provides consistent URLs for accessing library panels and when syncing library panels between multiple Grafana installs.
     * 
     */
    @Import(name="uid")
    private @Nullable Output<String> uid;

    /**
     * @return The unique identifier (UID) of a library panel uniquely identifies library panels between multiple Grafana installs. It’s automatically generated unless you specify it during library panel creation.The UID provides consistent URLs for accessing library panels and when syncing library panels between multiple Grafana installs.
     * 
     */
    public Optional<Output<String>> uid() {
        return Optional.ofNullable(this.uid);
    }

    private LibraryPanelArgs() {}

    private LibraryPanelArgs(LibraryPanelArgs $) {
        this.folderId = $.folderId;
        this.modelJson = $.modelJson;
        this.name = $.name;
        this.uid = $.uid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LibraryPanelArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LibraryPanelArgs $;

        public Builder() {
            $ = new LibraryPanelArgs();
        }

        public Builder(LibraryPanelArgs defaults) {
            $ = new LibraryPanelArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param folderId ID of the folder where the library panel is stored.
         * 
         * @return builder
         * 
         */
        public Builder folderId(@Nullable Output<Integer> folderId) {
            $.folderId = folderId;
            return this;
        }

        /**
         * @param folderId ID of the folder where the library panel is stored.
         * 
         * @return builder
         * 
         */
        public Builder folderId(Integer folderId) {
            return folderId(Output.of(folderId));
        }

        /**
         * @param modelJson The JSON model for the library panel.
         * 
         * @return builder
         * 
         */
        public Builder modelJson(Output<String> modelJson) {
            $.modelJson = modelJson;
            return this;
        }

        /**
         * @param modelJson The JSON model for the library panel.
         * 
         * @return builder
         * 
         */
        public Builder modelJson(String modelJson) {
            return modelJson(Output.of(modelJson));
        }

        /**
         * @param name Name of the library panel.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the library panel.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param uid The unique identifier (UID) of a library panel uniquely identifies library panels between multiple Grafana installs. It’s automatically generated unless you specify it during library panel creation.The UID provides consistent URLs for accessing library panels and when syncing library panels between multiple Grafana installs.
         * 
         * @return builder
         * 
         */
        public Builder uid(@Nullable Output<String> uid) {
            $.uid = uid;
            return this;
        }

        /**
         * @param uid The unique identifier (UID) of a library panel uniquely identifies library panels between multiple Grafana installs. It’s automatically generated unless you specify it during library panel creation.The UID provides consistent URLs for accessing library panels and when syncing library panels between multiple Grafana installs.
         * 
         * @return builder
         * 
         */
        public Builder uid(String uid) {
            return uid(Output.of(uid));
        }

        public LibraryPanelArgs build() {
            $.modelJson = Objects.requireNonNull($.modelJson, "expected parameter 'modelJson' to be non-null");
            return $;
        }
    }

}
