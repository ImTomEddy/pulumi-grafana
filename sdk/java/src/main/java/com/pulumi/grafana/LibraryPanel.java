// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.grafana.LibraryPanelArgs;
import com.pulumi.grafana.Utilities;
import com.pulumi.grafana.inputs.LibraryPanelState;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages Grafana library panels.
 * 
 * * [Official documentation](https://grafana.com/docs/grafana/latest/dashboards/build-dashboards/manage-library-panels/)
 * * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/library_element/)
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.grafana.LibraryPanel;
 * import com.pulumi.grafana.LibraryPanelArgs;
 * import static com.pulumi.codegen.internal.Serialization.*;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var test = new LibraryPanel(&#34;test&#34;, LibraryPanelArgs.builder()        
 *             .modelJson(serializeJson(
 *                 jsonObject(
 *                     jsonProperty(&#34;title&#34;, &#34;updated name&#34;),
 *                     jsonProperty(&#34;id&#34;, 12),
 *                     jsonProperty(&#34;version&#34;, 35)
 *                 )))
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * ```sh
 *  $ pulumi import grafana:index/libraryPanel:LibraryPanel panel_name {{library_panel_slug}}
 * ```
 * 
 */
@ResourceType(type="grafana:index/libraryPanel:LibraryPanel")
public class LibraryPanel extends com.pulumi.resources.CustomResource {
    /**
     * Timestamp when the library panel was created.
     * 
     */
    @Export(name="created", type=String.class, parameters={})
    private Output<String> created;

    /**
     * @return Timestamp when the library panel was created.
     * 
     */
    public Output<String> created() {
        return this.created;
    }
    /**
     * Numerical IDs of Grafana dashboards containing the library panel.
     * 
     */
    @Export(name="dashboardIds", type=List.class, parameters={Integer.class})
    private Output<List<Integer>> dashboardIds;

    /**
     * @return Numerical IDs of Grafana dashboards containing the library panel.
     * 
     */
    public Output<List<Integer>> dashboardIds() {
        return this.dashboardIds;
    }
    /**
     * Description of the library panel.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output<String> description;

    /**
     * @return Description of the library panel.
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * ID of the folder where the library panel is stored.
     * 
     */
    @Export(name="folderId", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> folderId;

    /**
     * @return ID of the folder where the library panel is stored.
     * 
     */
    public Output<Optional<Integer>> folderId() {
        return Codegen.optional(this.folderId);
    }
    /**
     * Name of the folder containing the library panel.
     * 
     */
    @Export(name="folderName", type=String.class, parameters={})
    private Output<String> folderName;

    /**
     * @return Name of the folder containing the library panel.
     * 
     */
    public Output<String> folderName() {
        return this.folderName;
    }
    /**
     * Unique ID (UID) of the folder containing the library panel.
     * 
     */
    @Export(name="folderUid", type=String.class, parameters={})
    private Output<String> folderUid;

    /**
     * @return Unique ID (UID) of the folder containing the library panel.
     * 
     */
    public Output<String> folderUid() {
        return this.folderUid;
    }
    /**
     * The JSON model for the library panel.
     * 
     */
    @Export(name="modelJson", type=String.class, parameters={})
    private Output<String> modelJson;

    /**
     * @return The JSON model for the library panel.
     * 
     */
    public Output<String> modelJson() {
        return this.modelJson;
    }
    /**
     * Name of the library panel.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Name of the library panel.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The Organization ID. If not set, the Org ID defined in the provider block will be used.
     * 
     */
    @Export(name="orgId", type=String.class, parameters={})
    private Output</* @Nullable */ String> orgId;

    /**
     * @return The Organization ID. If not set, the Org ID defined in the provider block will be used.
     * 
     */
    public Output<Optional<String>> orgId() {
        return Codegen.optional(this.orgId);
    }
    /**
     * The numeric ID of the library panel computed by Grafana.
     * 
     */
    @Export(name="panelId", type=Integer.class, parameters={})
    private Output<Integer> panelId;

    /**
     * @return The numeric ID of the library panel computed by Grafana.
     * 
     */
    public Output<Integer> panelId() {
        return this.panelId;
    }
    /**
     * Type of the library panel (eg. text).
     * 
     */
    @Export(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return Type of the library panel (eg. text).
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * The unique identifier (UID) of a library panel uniquely identifies library panels between multiple Grafana installs. It’s automatically generated unless you specify it during library panel creation.The UID provides consistent URLs for accessing library panels and when syncing library panels between multiple Grafana installs.
     * 
     */
    @Export(name="uid", type=String.class, parameters={})
    private Output<String> uid;

    /**
     * @return The unique identifier (UID) of a library panel uniquely identifies library panels between multiple Grafana installs. It’s automatically generated unless you specify it during library panel creation.The UID provides consistent URLs for accessing library panels and when syncing library panels between multiple Grafana installs.
     * 
     */
    public Output<String> uid() {
        return this.uid;
    }
    /**
     * Timestamp when the library panel was last modified.
     * 
     */
    @Export(name="updated", type=String.class, parameters={})
    private Output<String> updated;

    /**
     * @return Timestamp when the library panel was last modified.
     * 
     */
    public Output<String> updated() {
        return this.updated;
    }
    /**
     * Version of the library panel.
     * 
     */
    @Export(name="version", type=Integer.class, parameters={})
    private Output<Integer> version;

    /**
     * @return Version of the library panel.
     * 
     */
    public Output<Integer> version() {
        return this.version;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public LibraryPanel(String name) {
        this(name, LibraryPanelArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public LibraryPanel(String name, LibraryPanelArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public LibraryPanel(String name, LibraryPanelArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("grafana:index/libraryPanel:LibraryPanel", name, args == null ? LibraryPanelArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private LibraryPanel(String name, Output<String> id, @Nullable LibraryPanelState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("grafana:index/libraryPanel:LibraryPanel", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static LibraryPanel get(String name, Output<String> id, @Nullable LibraryPanelState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new LibraryPanel(name, id, state, options);
    }
}
