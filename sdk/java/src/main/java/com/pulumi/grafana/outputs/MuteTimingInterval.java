// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.grafana.outputs.MuteTimingIntervalTime;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class MuteTimingInterval {
    /**
     * @return An inclusive range of days, 1-31, within a month, e.g. &#34;1&#34; or &#34;14:16&#34;. Negative values can be used to represent days counting from the end of a month, e.g. &#34;-1&#34;.
     * 
     */
    private @Nullable List<String> daysOfMonths;
    /**
     * @return An inclusive range of months, either numerical or full calendar month, e.g. &#34;1:3&#34;, &#34;december&#34;, or &#34;may:august&#34;.
     * 
     */
    private @Nullable List<String> months;
    /**
     * @return The time ranges, represented in minutes, during which to mute in a given day.
     * 
     */
    private @Nullable List<MuteTimingIntervalTime> times;
    /**
     * @return An inclusive range of weekdays, e.g. &#34;monday&#34; or &#34;tuesday:thursday&#34;.
     * 
     */
    private @Nullable List<String> weekdays;
    /**
     * @return A positive inclusive range of years, e.g. &#34;2030&#34; or &#34;2025:2026&#34;.
     * 
     */
    private @Nullable List<String> years;

    private MuteTimingInterval() {}
    /**
     * @return An inclusive range of days, 1-31, within a month, e.g. &#34;1&#34; or &#34;14:16&#34;. Negative values can be used to represent days counting from the end of a month, e.g. &#34;-1&#34;.
     * 
     */
    public List<String> daysOfMonths() {
        return this.daysOfMonths == null ? List.of() : this.daysOfMonths;
    }
    /**
     * @return An inclusive range of months, either numerical or full calendar month, e.g. &#34;1:3&#34;, &#34;december&#34;, or &#34;may:august&#34;.
     * 
     */
    public List<String> months() {
        return this.months == null ? List.of() : this.months;
    }
    /**
     * @return The time ranges, represented in minutes, during which to mute in a given day.
     * 
     */
    public List<MuteTimingIntervalTime> times() {
        return this.times == null ? List.of() : this.times;
    }
    /**
     * @return An inclusive range of weekdays, e.g. &#34;monday&#34; or &#34;tuesday:thursday&#34;.
     * 
     */
    public List<String> weekdays() {
        return this.weekdays == null ? List.of() : this.weekdays;
    }
    /**
     * @return A positive inclusive range of years, e.g. &#34;2030&#34; or &#34;2025:2026&#34;.
     * 
     */
    public List<String> years() {
        return this.years == null ? List.of() : this.years;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MuteTimingInterval defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> daysOfMonths;
        private @Nullable List<String> months;
        private @Nullable List<MuteTimingIntervalTime> times;
        private @Nullable List<String> weekdays;
        private @Nullable List<String> years;
        public Builder() {}
        public Builder(MuteTimingInterval defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.daysOfMonths = defaults.daysOfMonths;
    	      this.months = defaults.months;
    	      this.times = defaults.times;
    	      this.weekdays = defaults.weekdays;
    	      this.years = defaults.years;
        }

        @CustomType.Setter
        public Builder daysOfMonths(@Nullable List<String> daysOfMonths) {
            this.daysOfMonths = daysOfMonths;
            return this;
        }
        public Builder daysOfMonths(String... daysOfMonths) {
            return daysOfMonths(List.of(daysOfMonths));
        }
        @CustomType.Setter
        public Builder months(@Nullable List<String> months) {
            this.months = months;
            return this;
        }
        public Builder months(String... months) {
            return months(List.of(months));
        }
        @CustomType.Setter
        public Builder times(@Nullable List<MuteTimingIntervalTime> times) {
            this.times = times;
            return this;
        }
        public Builder times(MuteTimingIntervalTime... times) {
            return times(List.of(times));
        }
        @CustomType.Setter
        public Builder weekdays(@Nullable List<String> weekdays) {
            this.weekdays = weekdays;
            return this;
        }
        public Builder weekdays(String... weekdays) {
            return weekdays(List.of(weekdays));
        }
        @CustomType.Setter
        public Builder years(@Nullable List<String> years) {
            this.years = years;
            return this;
        }
        public Builder years(String... years) {
            return years(List.of(years));
        }
        public MuteTimingInterval build() {
            final var o = new MuteTimingInterval();
            o.daysOfMonths = daysOfMonths;
            o.months = months;
            o.times = times;
            o.weekdays = weekdays;
            o.years = years;
            return o;
        }
    }
}
