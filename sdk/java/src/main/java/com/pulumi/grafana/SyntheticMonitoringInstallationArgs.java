// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SyntheticMonitoringInstallationArgs extends com.pulumi.resources.ResourceArgs {

    public static final SyntheticMonitoringInstallationArgs Empty = new SyntheticMonitoringInstallationArgs();

    /**
     * Deprecated: Not used anymore.
     * 
     * @deprecated
     * Not used anymore.
     * 
     */
    @Deprecated /* Not used anymore. */
    @Import(name="logsInstanceId")
    private @Nullable Output<Integer> logsInstanceId;

    /**
     * @return Deprecated: Not used anymore.
     * 
     * @deprecated
     * Not used anymore.
     * 
     */
    @Deprecated /* Not used anymore. */
    public Optional<Output<Integer>> logsInstanceId() {
        return Optional.ofNullable(this.logsInstanceId);
    }

    /**
     * Deprecated: Not used anymore.
     * 
     * @deprecated
     * Not used anymore.
     * 
     */
    @Deprecated /* Not used anymore. */
    @Import(name="metricsInstanceId")
    private @Nullable Output<Integer> metricsInstanceId;

    /**
     * @return Deprecated: Not used anymore.
     * 
     * @deprecated
     * Not used anymore.
     * 
     */
    @Deprecated /* Not used anymore. */
    public Optional<Output<Integer>> metricsInstanceId() {
        return Optional.ofNullable(this.metricsInstanceId);
    }

    /**
     * The Cloud API Key with the `MetricsPublisher` role used to publish metrics to the SM API
     * 
     */
    @Import(name="metricsPublisherKey", required=true)
    private Output<String> metricsPublisherKey;

    /**
     * @return The Cloud API Key with the `MetricsPublisher` role used to publish metrics to the SM API
     * 
     */
    public Output<String> metricsPublisherKey() {
        return this.metricsPublisherKey;
    }

    /**
     * The ID or slug of the stack to install SM on.
     * 
     */
    @Import(name="stackId", required=true)
    private Output<String> stackId;

    /**
     * @return The ID or slug of the stack to install SM on.
     * 
     */
    public Output<String> stackId() {
        return this.stackId;
    }

    /**
     * The URL of the SM API to install SM on. This depends on the stack region, find the list of API URLs here: https://grafana.com/docs/grafana-cloud/synthetic-monitoring/private-probes/#probe-api-server-url. A static mapping exists in the provider but it may not contain all the regions. If it does contain the stack&#39;s region, this field is computed automatically and readable.
     * 
     */
    @Import(name="stackSmApiUrl")
    private @Nullable Output<String> stackSmApiUrl;

    /**
     * @return The URL of the SM API to install SM on. This depends on the stack region, find the list of API URLs here: https://grafana.com/docs/grafana-cloud/synthetic-monitoring/private-probes/#probe-api-server-url. A static mapping exists in the provider but it may not contain all the regions. If it does contain the stack&#39;s region, this field is computed automatically and readable.
     * 
     */
    public Optional<Output<String>> stackSmApiUrl() {
        return Optional.ofNullable(this.stackSmApiUrl);
    }

    private SyntheticMonitoringInstallationArgs() {}

    private SyntheticMonitoringInstallationArgs(SyntheticMonitoringInstallationArgs $) {
        this.logsInstanceId = $.logsInstanceId;
        this.metricsInstanceId = $.metricsInstanceId;
        this.metricsPublisherKey = $.metricsPublisherKey;
        this.stackId = $.stackId;
        this.stackSmApiUrl = $.stackSmApiUrl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SyntheticMonitoringInstallationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SyntheticMonitoringInstallationArgs $;

        public Builder() {
            $ = new SyntheticMonitoringInstallationArgs();
        }

        public Builder(SyntheticMonitoringInstallationArgs defaults) {
            $ = new SyntheticMonitoringInstallationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param logsInstanceId Deprecated: Not used anymore.
         * 
         * @return builder
         * 
         * @deprecated
         * Not used anymore.
         * 
         */
        @Deprecated /* Not used anymore. */
        public Builder logsInstanceId(@Nullable Output<Integer> logsInstanceId) {
            $.logsInstanceId = logsInstanceId;
            return this;
        }

        /**
         * @param logsInstanceId Deprecated: Not used anymore.
         * 
         * @return builder
         * 
         * @deprecated
         * Not used anymore.
         * 
         */
        @Deprecated /* Not used anymore. */
        public Builder logsInstanceId(Integer logsInstanceId) {
            return logsInstanceId(Output.of(logsInstanceId));
        }

        /**
         * @param metricsInstanceId Deprecated: Not used anymore.
         * 
         * @return builder
         * 
         * @deprecated
         * Not used anymore.
         * 
         */
        @Deprecated /* Not used anymore. */
        public Builder metricsInstanceId(@Nullable Output<Integer> metricsInstanceId) {
            $.metricsInstanceId = metricsInstanceId;
            return this;
        }

        /**
         * @param metricsInstanceId Deprecated: Not used anymore.
         * 
         * @return builder
         * 
         * @deprecated
         * Not used anymore.
         * 
         */
        @Deprecated /* Not used anymore. */
        public Builder metricsInstanceId(Integer metricsInstanceId) {
            return metricsInstanceId(Output.of(metricsInstanceId));
        }

        /**
         * @param metricsPublisherKey The Cloud API Key with the `MetricsPublisher` role used to publish metrics to the SM API
         * 
         * @return builder
         * 
         */
        public Builder metricsPublisherKey(Output<String> metricsPublisherKey) {
            $.metricsPublisherKey = metricsPublisherKey;
            return this;
        }

        /**
         * @param metricsPublisherKey The Cloud API Key with the `MetricsPublisher` role used to publish metrics to the SM API
         * 
         * @return builder
         * 
         */
        public Builder metricsPublisherKey(String metricsPublisherKey) {
            return metricsPublisherKey(Output.of(metricsPublisherKey));
        }

        /**
         * @param stackId The ID or slug of the stack to install SM on.
         * 
         * @return builder
         * 
         */
        public Builder stackId(Output<String> stackId) {
            $.stackId = stackId;
            return this;
        }

        /**
         * @param stackId The ID or slug of the stack to install SM on.
         * 
         * @return builder
         * 
         */
        public Builder stackId(String stackId) {
            return stackId(Output.of(stackId));
        }

        /**
         * @param stackSmApiUrl The URL of the SM API to install SM on. This depends on the stack region, find the list of API URLs here: https://grafana.com/docs/grafana-cloud/synthetic-monitoring/private-probes/#probe-api-server-url. A static mapping exists in the provider but it may not contain all the regions. If it does contain the stack&#39;s region, this field is computed automatically and readable.
         * 
         * @return builder
         * 
         */
        public Builder stackSmApiUrl(@Nullable Output<String> stackSmApiUrl) {
            $.stackSmApiUrl = stackSmApiUrl;
            return this;
        }

        /**
         * @param stackSmApiUrl The URL of the SM API to install SM on. This depends on the stack region, find the list of API URLs here: https://grafana.com/docs/grafana-cloud/synthetic-monitoring/private-probes/#probe-api-server-url. A static mapping exists in the provider but it may not contain all the regions. If it does contain the stack&#39;s region, this field is computed automatically and readable.
         * 
         * @return builder
         * 
         */
        public Builder stackSmApiUrl(String stackSmApiUrl) {
            return stackSmApiUrl(Output.of(stackSmApiUrl));
        }

        public SyntheticMonitoringInstallationArgs build() {
            $.metricsPublisherKey = Objects.requireNonNull($.metricsPublisherKey, "expected parameter 'metricsPublisherKey' to be non-null");
            $.stackId = Objects.requireNonNull($.stackId, "expected parameter 'stackId' to be non-null");
            return $;
        }
    }

}
