// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LibraryPanelState extends com.pulumi.resources.ResourceArgs {

    public static final LibraryPanelState Empty = new LibraryPanelState();

    /**
     * Timestamp when the library panel was created.
     * 
     */
    @Import(name="created")
    private @Nullable Output<String> created;

    /**
     * @return Timestamp when the library panel was created.
     * 
     */
    public Optional<Output<String>> created() {
        return Optional.ofNullable(this.created);
    }

    /**
     * Numerical IDs of Grafana dashboards containing the library panel.
     * 
     */
    @Import(name="dashboardIds")
    private @Nullable Output<List<Integer>> dashboardIds;

    /**
     * @return Numerical IDs of Grafana dashboards containing the library panel.
     * 
     */
    public Optional<Output<List<Integer>>> dashboardIds() {
        return Optional.ofNullable(this.dashboardIds);
    }

    /**
     * Description of the library panel.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the library panel.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * ID of the folder where the library panel is stored.
     * 
     */
    @Import(name="folderId")
    private @Nullable Output<Integer> folderId;

    /**
     * @return ID of the folder where the library panel is stored.
     * 
     */
    public Optional<Output<Integer>> folderId() {
        return Optional.ofNullable(this.folderId);
    }

    /**
     * Name of the folder containing the library panel.
     * 
     */
    @Import(name="folderName")
    private @Nullable Output<String> folderName;

    /**
     * @return Name of the folder containing the library panel.
     * 
     */
    public Optional<Output<String>> folderName() {
        return Optional.ofNullable(this.folderName);
    }

    /**
     * Unique ID (UID) of the folder containing the library panel.
     * 
     */
    @Import(name="folderUid")
    private @Nullable Output<String> folderUid;

    /**
     * @return Unique ID (UID) of the folder containing the library panel.
     * 
     */
    public Optional<Output<String>> folderUid() {
        return Optional.ofNullable(this.folderUid);
    }

    /**
     * The JSON model for the library panel.
     * 
     */
    @Import(name="modelJson")
    private @Nullable Output<String> modelJson;

    /**
     * @return The JSON model for the library panel.
     * 
     */
    public Optional<Output<String>> modelJson() {
        return Optional.ofNullable(this.modelJson);
    }

    /**
     * Name of the library panel.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the library panel.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The numeric ID of the library panel computed by Grafana.
     * 
     */
    @Import(name="orgId")
    private @Nullable Output<Integer> orgId;

    /**
     * @return The numeric ID of the library panel computed by Grafana.
     * 
     */
    public Optional<Output<Integer>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * The numeric ID of the library panel computed by Grafana.
     * 
     */
    @Import(name="panelId")
    private @Nullable Output<Integer> panelId;

    /**
     * @return The numeric ID of the library panel computed by Grafana.
     * 
     */
    public Optional<Output<Integer>> panelId() {
        return Optional.ofNullable(this.panelId);
    }

    /**
     * Type of the library panel (eg. text).
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Type of the library panel (eg. text).
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * The unique identifier (UID) of a library panel uniquely identifies library panels between multiple Grafana installs. It’s automatically generated unless you specify it during library panel creation.The UID provides consistent URLs for accessing library panels and when syncing library panels between multiple Grafana installs.
     * 
     */
    @Import(name="uid")
    private @Nullable Output<String> uid;

    /**
     * @return The unique identifier (UID) of a library panel uniquely identifies library panels between multiple Grafana installs. It’s automatically generated unless you specify it during library panel creation.The UID provides consistent URLs for accessing library panels and when syncing library panels between multiple Grafana installs.
     * 
     */
    public Optional<Output<String>> uid() {
        return Optional.ofNullable(this.uid);
    }

    /**
     * Timestamp when the library panel was last modified.
     * 
     */
    @Import(name="updated")
    private @Nullable Output<String> updated;

    /**
     * @return Timestamp when the library panel was last modified.
     * 
     */
    public Optional<Output<String>> updated() {
        return Optional.ofNullable(this.updated);
    }

    /**
     * Version of the library panel.
     * 
     */
    @Import(name="version")
    private @Nullable Output<Integer> version;

    /**
     * @return Version of the library panel.
     * 
     */
    public Optional<Output<Integer>> version() {
        return Optional.ofNullable(this.version);
    }

    private LibraryPanelState() {}

    private LibraryPanelState(LibraryPanelState $) {
        this.created = $.created;
        this.dashboardIds = $.dashboardIds;
        this.description = $.description;
        this.folderId = $.folderId;
        this.folderName = $.folderName;
        this.folderUid = $.folderUid;
        this.modelJson = $.modelJson;
        this.name = $.name;
        this.orgId = $.orgId;
        this.panelId = $.panelId;
        this.type = $.type;
        this.uid = $.uid;
        this.updated = $.updated;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LibraryPanelState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LibraryPanelState $;

        public Builder() {
            $ = new LibraryPanelState();
        }

        public Builder(LibraryPanelState defaults) {
            $ = new LibraryPanelState(Objects.requireNonNull(defaults));
        }

        /**
         * @param created Timestamp when the library panel was created.
         * 
         * @return builder
         * 
         */
        public Builder created(@Nullable Output<String> created) {
            $.created = created;
            return this;
        }

        /**
         * @param created Timestamp when the library panel was created.
         * 
         * @return builder
         * 
         */
        public Builder created(String created) {
            return created(Output.of(created));
        }

        /**
         * @param dashboardIds Numerical IDs of Grafana dashboards containing the library panel.
         * 
         * @return builder
         * 
         */
        public Builder dashboardIds(@Nullable Output<List<Integer>> dashboardIds) {
            $.dashboardIds = dashboardIds;
            return this;
        }

        /**
         * @param dashboardIds Numerical IDs of Grafana dashboards containing the library panel.
         * 
         * @return builder
         * 
         */
        public Builder dashboardIds(List<Integer> dashboardIds) {
            return dashboardIds(Output.of(dashboardIds));
        }

        /**
         * @param dashboardIds Numerical IDs of Grafana dashboards containing the library panel.
         * 
         * @return builder
         * 
         */
        public Builder dashboardIds(Integer... dashboardIds) {
            return dashboardIds(List.of(dashboardIds));
        }

        /**
         * @param description Description of the library panel.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the library panel.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param folderId ID of the folder where the library panel is stored.
         * 
         * @return builder
         * 
         */
        public Builder folderId(@Nullable Output<Integer> folderId) {
            $.folderId = folderId;
            return this;
        }

        /**
         * @param folderId ID of the folder where the library panel is stored.
         * 
         * @return builder
         * 
         */
        public Builder folderId(Integer folderId) {
            return folderId(Output.of(folderId));
        }

        /**
         * @param folderName Name of the folder containing the library panel.
         * 
         * @return builder
         * 
         */
        public Builder folderName(@Nullable Output<String> folderName) {
            $.folderName = folderName;
            return this;
        }

        /**
         * @param folderName Name of the folder containing the library panel.
         * 
         * @return builder
         * 
         */
        public Builder folderName(String folderName) {
            return folderName(Output.of(folderName));
        }

        /**
         * @param folderUid Unique ID (UID) of the folder containing the library panel.
         * 
         * @return builder
         * 
         */
        public Builder folderUid(@Nullable Output<String> folderUid) {
            $.folderUid = folderUid;
            return this;
        }

        /**
         * @param folderUid Unique ID (UID) of the folder containing the library panel.
         * 
         * @return builder
         * 
         */
        public Builder folderUid(String folderUid) {
            return folderUid(Output.of(folderUid));
        }

        /**
         * @param modelJson The JSON model for the library panel.
         * 
         * @return builder
         * 
         */
        public Builder modelJson(@Nullable Output<String> modelJson) {
            $.modelJson = modelJson;
            return this;
        }

        /**
         * @param modelJson The JSON model for the library panel.
         * 
         * @return builder
         * 
         */
        public Builder modelJson(String modelJson) {
            return modelJson(Output.of(modelJson));
        }

        /**
         * @param name Name of the library panel.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the library panel.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param orgId The numeric ID of the library panel computed by Grafana.
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable Output<Integer> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId The numeric ID of the library panel computed by Grafana.
         * 
         * @return builder
         * 
         */
        public Builder orgId(Integer orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param panelId The numeric ID of the library panel computed by Grafana.
         * 
         * @return builder
         * 
         */
        public Builder panelId(@Nullable Output<Integer> panelId) {
            $.panelId = panelId;
            return this;
        }

        /**
         * @param panelId The numeric ID of the library panel computed by Grafana.
         * 
         * @return builder
         * 
         */
        public Builder panelId(Integer panelId) {
            return panelId(Output.of(panelId));
        }

        /**
         * @param type Type of the library panel (eg. text).
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of the library panel (eg. text).
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param uid The unique identifier (UID) of a library panel uniquely identifies library panels between multiple Grafana installs. It’s automatically generated unless you specify it during library panel creation.The UID provides consistent URLs for accessing library panels and when syncing library panels between multiple Grafana installs.
         * 
         * @return builder
         * 
         */
        public Builder uid(@Nullable Output<String> uid) {
            $.uid = uid;
            return this;
        }

        /**
         * @param uid The unique identifier (UID) of a library panel uniquely identifies library panels between multiple Grafana installs. It’s automatically generated unless you specify it during library panel creation.The UID provides consistent URLs for accessing library panels and when syncing library panels between multiple Grafana installs.
         * 
         * @return builder
         * 
         */
        public Builder uid(String uid) {
            return uid(Output.of(uid));
        }

        /**
         * @param updated Timestamp when the library panel was last modified.
         * 
         * @return builder
         * 
         */
        public Builder updated(@Nullable Output<String> updated) {
            $.updated = updated;
            return this;
        }

        /**
         * @param updated Timestamp when the library panel was last modified.
         * 
         * @return builder
         * 
         */
        public Builder updated(String updated) {
            return updated(Output.of(updated));
        }

        /**
         * @param version Version of the library panel.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<Integer> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version Version of the library panel.
         * 
         * @return builder
         * 
         */
        public Builder version(Integer version) {
            return version(Output.of(version));
        }

        public LibraryPanelState build() {
            return $;
        }
    }

}
