// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.grafana.DataSourcePermissionArgs;
import com.pulumi.grafana.Utilities;
import com.pulumi.grafana.inputs.DataSourcePermissionState;
import com.pulumi.grafana.outputs.DataSourcePermissionPermission;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/datasource_permissions/)
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.grafana.Team;
 * import com.pulumi.grafana.DataSource;
 * import com.pulumi.grafana.DataSourceArgs;
 * import com.pulumi.grafana.User;
 * import com.pulumi.grafana.UserArgs;
 * import com.pulumi.grafana.DataSourcePermission;
 * import com.pulumi.grafana.DataSourcePermissionArgs;
 * import com.pulumi.grafana.inputs.DataSourcePermissionPermissionArgs;
 * import static com.pulumi.codegen.internal.Serialization.*;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var team = new Team(&#34;team&#34;);
 * 
 *         var foo = new DataSource(&#34;foo&#34;, DataSourceArgs.builder()        
 *             .type(&#34;cloudwatch&#34;)
 *             .jsonDataEncoded(serializeJson(
 *                 jsonObject(
 *                     jsonProperty(&#34;defaultRegion&#34;, &#34;us-east-1&#34;),
 *                     jsonProperty(&#34;authType&#34;, &#34;keys&#34;)
 *                 )))
 *             .secureJsonDataEncoded(serializeJson(
 *                 jsonObject(
 *                     jsonProperty(&#34;accessKey&#34;, &#34;123&#34;),
 *                     jsonProperty(&#34;secretKey&#34;, &#34;456&#34;)
 *                 )))
 *             .build());
 * 
 *         var user = new User(&#34;user&#34;, UserArgs.builder()        
 *             .email(&#34;test-ds-permissions@example.com&#34;)
 *             .login(&#34;test-ds-permissions&#34;)
 *             .password(&#34;hunter2&#34;)
 *             .build());
 * 
 *         var fooPermissions = new DataSourcePermission(&#34;fooPermissions&#34;, DataSourcePermissionArgs.builder()        
 *             .datasourceId(foo.id())
 *             .permissions(            
 *                 DataSourcePermissionPermissionArgs.builder()
 *                     .teamId(team.id())
 *                     .permission(&#34;Query&#34;)
 *                     .build(),
 *                 DataSourcePermissionPermissionArgs.builder()
 *                     .userId(user.id())
 *                     .permission(&#34;Edit&#34;)
 *                     .build(),
 *                 DataSourcePermissionPermissionArgs.builder()
 *                     .builtInRole(&#34;Viewer&#34;)
 *                     .permission(&#34;Query&#34;)
 *                     .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 */
@ResourceType(type="grafana:index/dataSourcePermission:DataSourcePermission")
public class DataSourcePermission extends com.pulumi.resources.CustomResource {
    /**
     * ID of the datasource to apply permissions to.
     * 
     */
    @Export(name="datasourceId", refs={String.class}, tree="[0]")
    private Output<String> datasourceId;

    /**
     * @return ID of the datasource to apply permissions to.
     * 
     */
    public Output<String> datasourceId() {
        return this.datasourceId;
    }
    /**
     * The Organization ID. If not set, the Org ID defined in the provider block will be used.
     * 
     */
    @Export(name="orgId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> orgId;

    /**
     * @return The Organization ID. If not set, the Org ID defined in the provider block will be used.
     * 
     */
    public Output<Optional<String>> orgId() {
        return Codegen.optional(this.orgId);
    }
    /**
     * The permission items to add/update. Items that are omitted from the list will be removed.
     * 
     */
    @Export(name="permissions", refs={List.class,DataSourcePermissionPermission.class}, tree="[0,1]")
    private Output<List<DataSourcePermissionPermission>> permissions;

    /**
     * @return The permission items to add/update. Items that are omitted from the list will be removed.
     * 
     */
    public Output<List<DataSourcePermissionPermission>> permissions() {
        return this.permissions;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public DataSourcePermission(String name) {
        this(name, DataSourcePermissionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public DataSourcePermission(String name, DataSourcePermissionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DataSourcePermission(String name, DataSourcePermissionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("grafana:index/dataSourcePermission:DataSourcePermission", name, args == null ? DataSourcePermissionArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private DataSourcePermission(String name, Output<String> id, @Nullable DataSourcePermissionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("grafana:index/dataSourcePermission:DataSourcePermission", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DataSourcePermission get(String name, Output<String> id, @Nullable DataSourcePermissionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new DataSourcePermission(name, id, state, options);
    }
}
