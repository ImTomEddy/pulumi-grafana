// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetLibraryPanelResult {
    /**
     * @return Timestamp when the library panel was created.
     * 
     */
    private String created;
    /**
     * @return Numerical IDs of Grafana dashboards containing the library panel.
     * 
     */
    private List<Integer> dashboardIds;
    /**
     * @return Description of the library panel.
     * 
     */
    private String description;
    /**
     * @return ID of the folder where the library panel is stored.
     * 
     */
    private Integer folderId;
    /**
     * @return Name of the folder containing the library panel.
     * 
     */
    private String folderName;
    /**
     * @return Unique ID (UID) of the folder containing the library panel.
     * 
     */
    private String folderUid;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The JSON model for the library panel.
     * 
     */
    private String modelJson;
    /**
     * @return Name of the library panel.
     * 
     */
    private @Nullable String name;
    /**
     * @return The numeric ID of the library panel computed by Grafana.
     * 
     */
    private Integer orgId;
    /**
     * @return The numeric ID of the library panel computed by Grafana.
     * 
     */
    private Integer panelId;
    /**
     * @return Type of the library panel (eg. text).
     * 
     */
    private String type;
    /**
     * @return The unique identifier (UID) of the library panel.
     * 
     */
    private @Nullable String uid;
    /**
     * @return Timestamp when the library panel was last modified.
     * 
     */
    private String updated;
    /**
     * @return Version of the library panel.
     * 
     */
    private Integer version;

    private GetLibraryPanelResult() {}
    /**
     * @return Timestamp when the library panel was created.
     * 
     */
    public String created() {
        return this.created;
    }
    /**
     * @return Numerical IDs of Grafana dashboards containing the library panel.
     * 
     */
    public List<Integer> dashboardIds() {
        return this.dashboardIds;
    }
    /**
     * @return Description of the library panel.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return ID of the folder where the library panel is stored.
     * 
     */
    public Integer folderId() {
        return this.folderId;
    }
    /**
     * @return Name of the folder containing the library panel.
     * 
     */
    public String folderName() {
        return this.folderName;
    }
    /**
     * @return Unique ID (UID) of the folder containing the library panel.
     * 
     */
    public String folderUid() {
        return this.folderUid;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The JSON model for the library panel.
     * 
     */
    public String modelJson() {
        return this.modelJson;
    }
    /**
     * @return Name of the library panel.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The numeric ID of the library panel computed by Grafana.
     * 
     */
    public Integer orgId() {
        return this.orgId;
    }
    /**
     * @return The numeric ID of the library panel computed by Grafana.
     * 
     */
    public Integer panelId() {
        return this.panelId;
    }
    /**
     * @return Type of the library panel (eg. text).
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The unique identifier (UID) of the library panel.
     * 
     */
    public Optional<String> uid() {
        return Optional.ofNullable(this.uid);
    }
    /**
     * @return Timestamp when the library panel was last modified.
     * 
     */
    public String updated() {
        return this.updated;
    }
    /**
     * @return Version of the library panel.
     * 
     */
    public Integer version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLibraryPanelResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String created;
        private List<Integer> dashboardIds;
        private String description;
        private Integer folderId;
        private String folderName;
        private String folderUid;
        private String id;
        private String modelJson;
        private @Nullable String name;
        private Integer orgId;
        private Integer panelId;
        private String type;
        private @Nullable String uid;
        private String updated;
        private Integer version;
        public Builder() {}
        public Builder(GetLibraryPanelResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.created = defaults.created;
    	      this.dashboardIds = defaults.dashboardIds;
    	      this.description = defaults.description;
    	      this.folderId = defaults.folderId;
    	      this.folderName = defaults.folderName;
    	      this.folderUid = defaults.folderUid;
    	      this.id = defaults.id;
    	      this.modelJson = defaults.modelJson;
    	      this.name = defaults.name;
    	      this.orgId = defaults.orgId;
    	      this.panelId = defaults.panelId;
    	      this.type = defaults.type;
    	      this.uid = defaults.uid;
    	      this.updated = defaults.updated;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder created(String created) {
            this.created = Objects.requireNonNull(created);
            return this;
        }
        @CustomType.Setter
        public Builder dashboardIds(List<Integer> dashboardIds) {
            this.dashboardIds = Objects.requireNonNull(dashboardIds);
            return this;
        }
        public Builder dashboardIds(Integer... dashboardIds) {
            return dashboardIds(List.of(dashboardIds));
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder folderId(Integer folderId) {
            this.folderId = Objects.requireNonNull(folderId);
            return this;
        }
        @CustomType.Setter
        public Builder folderName(String folderName) {
            this.folderName = Objects.requireNonNull(folderName);
            return this;
        }
        @CustomType.Setter
        public Builder folderUid(String folderUid) {
            this.folderUid = Objects.requireNonNull(folderUid);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder modelJson(String modelJson) {
            this.modelJson = Objects.requireNonNull(modelJson);
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder orgId(Integer orgId) {
            this.orgId = Objects.requireNonNull(orgId);
            return this;
        }
        @CustomType.Setter
        public Builder panelId(Integer panelId) {
            this.panelId = Objects.requireNonNull(panelId);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder uid(@Nullable String uid) {
            this.uid = uid;
            return this;
        }
        @CustomType.Setter
        public Builder updated(String updated) {
            this.updated = Objects.requireNonNull(updated);
            return this;
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }
        public GetLibraryPanelResult build() {
            final var o = new GetLibraryPanelResult();
            o.created = created;
            o.dashboardIds = dashboardIds;
            o.description = description;
            o.folderId = folderId;
            o.folderName = folderName;
            o.folderUid = folderUid;
            o.id = id;
            o.modelJson = modelJson;
            o.name = name;
            o.orgId = orgId;
            o.panelId = panelId;
            o.type = type;
            o.uid = uid;
            o.updated = updated;
            o.version = version;
            return o;
        }
    }
}
