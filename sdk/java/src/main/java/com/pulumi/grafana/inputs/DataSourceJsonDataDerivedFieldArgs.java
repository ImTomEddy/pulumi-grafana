// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataSourceJsonDataDerivedFieldArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataSourceJsonDataDerivedFieldArgs Empty = new DataSourceJsonDataDerivedFieldArgs();

    @Import(name="datasourceUid")
    private @Nullable Output<String> datasourceUid;

    public Optional<Output<String>> datasourceUid() {
        return Optional.ofNullable(this.datasourceUid);
    }

    @Import(name="matcherRegex")
    private @Nullable Output<String> matcherRegex;

    public Optional<Output<String>> matcherRegex() {
        return Optional.ofNullable(this.matcherRegex);
    }

    /**
     * A unique name for the data source.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A unique name for the data source.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The URL for the data source. The type of URL required varies depending on the chosen data source type.
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return The URL for the data source. The type of URL required varies depending on the chosen data source type.
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    private DataSourceJsonDataDerivedFieldArgs() {}

    private DataSourceJsonDataDerivedFieldArgs(DataSourceJsonDataDerivedFieldArgs $) {
        this.datasourceUid = $.datasourceUid;
        this.matcherRegex = $.matcherRegex;
        this.name = $.name;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataSourceJsonDataDerivedFieldArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataSourceJsonDataDerivedFieldArgs $;

        public Builder() {
            $ = new DataSourceJsonDataDerivedFieldArgs();
        }

        public Builder(DataSourceJsonDataDerivedFieldArgs defaults) {
            $ = new DataSourceJsonDataDerivedFieldArgs(Objects.requireNonNull(defaults));
        }

        public Builder datasourceUid(@Nullable Output<String> datasourceUid) {
            $.datasourceUid = datasourceUid;
            return this;
        }

        public Builder datasourceUid(String datasourceUid) {
            return datasourceUid(Output.of(datasourceUid));
        }

        public Builder matcherRegex(@Nullable Output<String> matcherRegex) {
            $.matcherRegex = matcherRegex;
            return this;
        }

        public Builder matcherRegex(String matcherRegex) {
            return matcherRegex(Output.of(matcherRegex));
        }

        /**
         * @param name A unique name for the data source.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A unique name for the data source.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param url The URL for the data source. The type of URL required varies depending on the chosen data source type.
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url The URL for the data source. The type of URL required varies depending on the chosen data source type.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        public DataSourceJsonDataDerivedFieldArgs build() {
            return $;
        }
    }

}
