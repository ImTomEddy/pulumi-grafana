// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TeamExternalGroupState extends com.pulumi.resources.ResourceArgs {

    public static final TeamExternalGroupState Empty = new TeamExternalGroupState();

    /**
     * The team external groups list
     * 
     */
    @Import(name="groups")
    private @Nullable Output<List<String>> groups;

    /**
     * @return The team external groups list
     * 
     */
    public Optional<Output<List<String>>> groups() {
        return Optional.ofNullable(this.groups);
    }

    /**
     * The Team ID
     * 
     */
    @Import(name="teamId")
    private @Nullable Output<String> teamId;

    /**
     * @return The Team ID
     * 
     */
    public Optional<Output<String>> teamId() {
        return Optional.ofNullable(this.teamId);
    }

    private TeamExternalGroupState() {}

    private TeamExternalGroupState(TeamExternalGroupState $) {
        this.groups = $.groups;
        this.teamId = $.teamId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TeamExternalGroupState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TeamExternalGroupState $;

        public Builder() {
            $ = new TeamExternalGroupState();
        }

        public Builder(TeamExternalGroupState defaults) {
            $ = new TeamExternalGroupState(Objects.requireNonNull(defaults));
        }

        /**
         * @param groups The team external groups list
         * 
         * @return builder
         * 
         */
        public Builder groups(@Nullable Output<List<String>> groups) {
            $.groups = groups;
            return this;
        }

        /**
         * @param groups The team external groups list
         * 
         * @return builder
         * 
         */
        public Builder groups(List<String> groups) {
            return groups(Output.of(groups));
        }

        /**
         * @param groups The team external groups list
         * 
         * @return builder
         * 
         */
        public Builder groups(String... groups) {
            return groups(List.of(groups));
        }

        /**
         * @param teamId The Team ID
         * 
         * @return builder
         * 
         */
        public Builder teamId(@Nullable Output<String> teamId) {
            $.teamId = teamId;
            return this;
        }

        /**
         * @param teamId The Team ID
         * 
         * @return builder
         * 
         */
        public Builder teamId(String teamId) {
            return teamId(Output.of(teamId));
        }

        public TeamExternalGroupState build() {
            return $;
        }
    }

}
