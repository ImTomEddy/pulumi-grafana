// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArgs extends com.pulumi.resources.ResourceArgs {

    public static final SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArgs Empty = new SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArgs();

    /**
     * Allow header to be missing from responses. Defaults to `false`.
     * 
     */
    @Import(name="allowMissing")
    private @Nullable Output<Boolean> allowMissing;

    /**
     * @return Allow header to be missing from responses. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> allowMissing() {
        return Optional.ofNullable(this.allowMissing);
    }

    /**
     * Header name.
     * 
     */
    @Import(name="header", required=true)
    private Output<String> header;

    /**
     * @return Header name.
     * 
     */
    public Output<String> header() {
        return this.header;
    }

    /**
     * Regex that header value should match.
     * 
     */
    @Import(name="regexp", required=true)
    private Output<String> regexp;

    /**
     * @return Regex that header value should match.
     * 
     */
    public Output<String> regexp() {
        return this.regexp;
    }

    private SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArgs() {}

    private SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArgs(SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArgs $) {
        this.allowMissing = $.allowMissing;
        this.header = $.header;
        this.regexp = $.regexp;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArgs $;

        public Builder() {
            $ = new SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArgs();
        }

        public Builder(SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArgs defaults) {
            $ = new SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowMissing Allow header to be missing from responses. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder allowMissing(@Nullable Output<Boolean> allowMissing) {
            $.allowMissing = allowMissing;
            return this;
        }

        /**
         * @param allowMissing Allow header to be missing from responses. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder allowMissing(Boolean allowMissing) {
            return allowMissing(Output.of(allowMissing));
        }

        /**
         * @param header Header name.
         * 
         * @return builder
         * 
         */
        public Builder header(Output<String> header) {
            $.header = header;
            return this;
        }

        /**
         * @param header Header name.
         * 
         * @return builder
         * 
         */
        public Builder header(String header) {
            return header(Output.of(header));
        }

        /**
         * @param regexp Regex that header value should match.
         * 
         * @return builder
         * 
         */
        public Builder regexp(Output<String> regexp) {
            $.regexp = regexp;
            return this;
        }

        /**
         * @param regexp Regex that header value should match.
         * 
         * @return builder
         * 
         */
        public Builder regexp(String regexp) {
            return regexp(Output.of(regexp));
        }

        public SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArgs build() {
            $.header = Objects.requireNonNull($.header, "expected parameter 'header' to be non-null");
            $.regexp = Objects.requireNonNull($.regexp, "expected parameter 'regexp' to be non-null");
            return $;
        }
    }

}
