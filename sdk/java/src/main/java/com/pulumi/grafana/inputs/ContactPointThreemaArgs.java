// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContactPointThreemaArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContactPointThreemaArgs Empty = new ContactPointThreemaArgs();

    /**
     * The Threema API key.
     * 
     */
    @Import(name="apiSecret", required=true)
    private Output<String> apiSecret;

    /**
     * @return The Threema API key.
     * 
     */
    public Output<String> apiSecret() {
        return this.apiSecret;
    }

    /**
     * The templated description of the message.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The templated description of the message.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Whether to disable sending resolve messages. Defaults to `false`.
     * 
     */
    @Import(name="disableResolveMessage")
    private @Nullable Output<Boolean> disableResolveMessage;

    /**
     * @return Whether to disable sending resolve messages. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> disableResolveMessage() {
        return Optional.ofNullable(this.disableResolveMessage);
    }

    /**
     * The Threema gateway ID.
     * 
     */
    @Import(name="gatewayId", required=true)
    private Output<String> gatewayId;

    /**
     * @return The Threema gateway ID.
     * 
     */
    public Output<String> gatewayId() {
        return this.gatewayId;
    }

    /**
     * The ID of the recipient of the message.
     * 
     */
    @Import(name="recipientId", required=true)
    private Output<String> recipientId;

    /**
     * @return The ID of the recipient of the message.
     * 
     */
    public Output<String> recipientId() {
        return this.recipientId;
    }

    /**
     * Additional custom properties to attach to the notifier. Defaults to `map[]`.
     * 
     */
    @Import(name="settings")
    private @Nullable Output<Map<String,String>> settings;

    /**
     * @return Additional custom properties to attach to the notifier. Defaults to `map[]`.
     * 
     */
    public Optional<Output<Map<String,String>>> settings() {
        return Optional.ofNullable(this.settings);
    }

    /**
     * The templated title of the message.
     * 
     */
    @Import(name="title")
    private @Nullable Output<String> title;

    /**
     * @return The templated title of the message.
     * 
     */
    public Optional<Output<String>> title() {
        return Optional.ofNullable(this.title);
    }

    /**
     * The UID of the contact point.
     * 
     */
    @Import(name="uid")
    private @Nullable Output<String> uid;

    /**
     * @return The UID of the contact point.
     * 
     */
    public Optional<Output<String>> uid() {
        return Optional.ofNullable(this.uid);
    }

    private ContactPointThreemaArgs() {}

    private ContactPointThreemaArgs(ContactPointThreemaArgs $) {
        this.apiSecret = $.apiSecret;
        this.description = $.description;
        this.disableResolveMessage = $.disableResolveMessage;
        this.gatewayId = $.gatewayId;
        this.recipientId = $.recipientId;
        this.settings = $.settings;
        this.title = $.title;
        this.uid = $.uid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContactPointThreemaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContactPointThreemaArgs $;

        public Builder() {
            $ = new ContactPointThreemaArgs();
        }

        public Builder(ContactPointThreemaArgs defaults) {
            $ = new ContactPointThreemaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiSecret The Threema API key.
         * 
         * @return builder
         * 
         */
        public Builder apiSecret(Output<String> apiSecret) {
            $.apiSecret = apiSecret;
            return this;
        }

        /**
         * @param apiSecret The Threema API key.
         * 
         * @return builder
         * 
         */
        public Builder apiSecret(String apiSecret) {
            return apiSecret(Output.of(apiSecret));
        }

        /**
         * @param description The templated description of the message.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The templated description of the message.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param disableResolveMessage Whether to disable sending resolve messages. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder disableResolveMessage(@Nullable Output<Boolean> disableResolveMessage) {
            $.disableResolveMessage = disableResolveMessage;
            return this;
        }

        /**
         * @param disableResolveMessage Whether to disable sending resolve messages. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder disableResolveMessage(Boolean disableResolveMessage) {
            return disableResolveMessage(Output.of(disableResolveMessage));
        }

        /**
         * @param gatewayId The Threema gateway ID.
         * 
         * @return builder
         * 
         */
        public Builder gatewayId(Output<String> gatewayId) {
            $.gatewayId = gatewayId;
            return this;
        }

        /**
         * @param gatewayId The Threema gateway ID.
         * 
         * @return builder
         * 
         */
        public Builder gatewayId(String gatewayId) {
            return gatewayId(Output.of(gatewayId));
        }

        /**
         * @param recipientId The ID of the recipient of the message.
         * 
         * @return builder
         * 
         */
        public Builder recipientId(Output<String> recipientId) {
            $.recipientId = recipientId;
            return this;
        }

        /**
         * @param recipientId The ID of the recipient of the message.
         * 
         * @return builder
         * 
         */
        public Builder recipientId(String recipientId) {
            return recipientId(Output.of(recipientId));
        }

        /**
         * @param settings Additional custom properties to attach to the notifier. Defaults to `map[]`.
         * 
         * @return builder
         * 
         */
        public Builder settings(@Nullable Output<Map<String,String>> settings) {
            $.settings = settings;
            return this;
        }

        /**
         * @param settings Additional custom properties to attach to the notifier. Defaults to `map[]`.
         * 
         * @return builder
         * 
         */
        public Builder settings(Map<String,String> settings) {
            return settings(Output.of(settings));
        }

        /**
         * @param title The templated title of the message.
         * 
         * @return builder
         * 
         */
        public Builder title(@Nullable Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title The templated title of the message.
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        /**
         * @param uid The UID of the contact point.
         * 
         * @return builder
         * 
         */
        public Builder uid(@Nullable Output<String> uid) {
            $.uid = uid;
            return this;
        }

        /**
         * @param uid The UID of the contact point.
         * 
         * @return builder
         * 
         */
        public Builder uid(String uid) {
            return uid(Output.of(uid));
        }

        public ContactPointThreemaArgs build() {
            $.apiSecret = Objects.requireNonNull($.apiSecret, "expected parameter 'apiSecret' to be non-null");
            $.gatewayId = Objects.requireNonNull($.gatewayId, "expected parameter 'gatewayId' to be non-null");
            $.recipientId = Objects.requireNonNull($.recipientId, "expected parameter 'recipientId' to be non-null");
            return $;
        }
    }

}
