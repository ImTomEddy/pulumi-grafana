// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataSourceArgs Empty = new DataSourceArgs();

    /**
     * The method by which Grafana will access the data source: `proxy` or `direct`. Defaults to `proxy`.
     * 
     */
    @Import(name="accessMode")
    private @Nullable Output<String> accessMode;

    /**
     * @return The method by which Grafana will access the data source: `proxy` or `direct`. Defaults to `proxy`.
     * 
     */
    public Optional<Output<String>> accessMode() {
        return Optional.ofNullable(this.accessMode);
    }

    /**
     * Whether to enable basic auth for the data source. Defaults to `false`.
     * 
     */
    @Import(name="basicAuthEnabled")
    private @Nullable Output<Boolean> basicAuthEnabled;

    /**
     * @return Whether to enable basic auth for the data source. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> basicAuthEnabled() {
        return Optional.ofNullable(this.basicAuthEnabled);
    }

    /**
     * Basic auth username. Defaults to ``.
     * 
     */
    @Import(name="basicAuthUsername")
    private @Nullable Output<String> basicAuthUsername;

    /**
     * @return Basic auth username. Defaults to ``.
     * 
     */
    public Optional<Output<String>> basicAuthUsername() {
        return Optional.ofNullable(this.basicAuthUsername);
    }

    /**
     * (Required by some data source types) The name of the database to use on the selected data source server. Defaults to ``.
     * 
     */
    @Import(name="databaseName")
    private @Nullable Output<String> databaseName;

    /**
     * @return (Required by some data source types) The name of the database to use on the selected data source server. Defaults to ``.
     * 
     */
    public Optional<Output<String>> databaseName() {
        return Optional.ofNullable(this.databaseName);
    }

    /**
     * Custom HTTP headers
     * 
     */
    @Import(name="httpHeaders")
    private @Nullable Output<Map<String,String>> httpHeaders;

    /**
     * @return Custom HTTP headers
     * 
     */
    public Optional<Output<Map<String,String>>> httpHeaders() {
        return Optional.ofNullable(this.httpHeaders);
    }

    /**
     * Whether to set the data source as default. This should only be `true` to a single data source. Defaults to `false`.
     * 
     */
    @Import(name="isDefault")
    private @Nullable Output<Boolean> isDefault;

    /**
     * @return Whether to set the data source as default. This should only be `true` to a single data source. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> isDefault() {
        return Optional.ofNullable(this.isDefault);
    }

    /**
     * Serialized JSON string containing the json data. This attribute can be used to pass configuration options to the data source. To figure out what options a datasource has available, see its docs or inspect the network data when saving it from the Grafana UI. Note that keys in this map are usually camelCased.
     * 
     */
    @Import(name="jsonDataEncoded")
    private @Nullable Output<String> jsonDataEncoded;

    /**
     * @return Serialized JSON string containing the json data. This attribute can be used to pass configuration options to the data source. To figure out what options a datasource has available, see its docs or inspect the network data when saving it from the Grafana UI. Note that keys in this map are usually camelCased.
     * 
     */
    public Optional<Output<String>> jsonDataEncoded() {
        return Optional.ofNullable(this.jsonDataEncoded);
    }

    /**
     * A unique name for the data source.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A unique name for the data source.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The Organization ID. If not set, the Org ID defined in the provider block will be used.
     * 
     */
    @Import(name="orgId")
    private @Nullable Output<String> orgId;

    /**
     * @return The Organization ID. If not set, the Org ID defined in the provider block will be used.
     * 
     */
    public Optional<Output<String>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * Serialized JSON string containing the secure json data. This attribute can be used to pass secure configuration options to the data source. To figure out what options a datasource has available, see its docs or inspect the network data when saving it from the Grafana UI. Note that keys in this map are usually camelCased.
     * 
     */
    @Import(name="secureJsonDataEncoded")
    private @Nullable Output<String> secureJsonDataEncoded;

    /**
     * @return Serialized JSON string containing the secure json data. This attribute can be used to pass secure configuration options to the data source. To figure out what options a datasource has available, see its docs or inspect the network data when saving it from the Grafana UI. Note that keys in this map are usually camelCased.
     * 
     */
    public Optional<Output<String>> secureJsonDataEncoded() {
        return Optional.ofNullable(this.secureJsonDataEncoded);
    }

    /**
     * The data source type. Must be one of the supported data source keywords.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The data source type. Must be one of the supported data source keywords.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * Unique identifier. If unset, this will be automatically generated.
     * 
     */
    @Import(name="uid")
    private @Nullable Output<String> uid;

    /**
     * @return Unique identifier. If unset, this will be automatically generated.
     * 
     */
    public Optional<Output<String>> uid() {
        return Optional.ofNullable(this.uid);
    }

    /**
     * The URL for the data source. The type of URL required varies depending on the chosen data source type.
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return The URL for the data source. The type of URL required varies depending on the chosen data source type.
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    /**
     * (Required by some data source types) The username to use to authenticate to the data source. Defaults to ``.
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return (Required by some data source types) The username to use to authenticate to the data source. Defaults to ``.
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private DataSourceArgs() {}

    private DataSourceArgs(DataSourceArgs $) {
        this.accessMode = $.accessMode;
        this.basicAuthEnabled = $.basicAuthEnabled;
        this.basicAuthUsername = $.basicAuthUsername;
        this.databaseName = $.databaseName;
        this.httpHeaders = $.httpHeaders;
        this.isDefault = $.isDefault;
        this.jsonDataEncoded = $.jsonDataEncoded;
        this.name = $.name;
        this.orgId = $.orgId;
        this.secureJsonDataEncoded = $.secureJsonDataEncoded;
        this.type = $.type;
        this.uid = $.uid;
        this.url = $.url;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataSourceArgs $;

        public Builder() {
            $ = new DataSourceArgs();
        }

        public Builder(DataSourceArgs defaults) {
            $ = new DataSourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessMode The method by which Grafana will access the data source: `proxy` or `direct`. Defaults to `proxy`.
         * 
         * @return builder
         * 
         */
        public Builder accessMode(@Nullable Output<String> accessMode) {
            $.accessMode = accessMode;
            return this;
        }

        /**
         * @param accessMode The method by which Grafana will access the data source: `proxy` or `direct`. Defaults to `proxy`.
         * 
         * @return builder
         * 
         */
        public Builder accessMode(String accessMode) {
            return accessMode(Output.of(accessMode));
        }

        /**
         * @param basicAuthEnabled Whether to enable basic auth for the data source. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder basicAuthEnabled(@Nullable Output<Boolean> basicAuthEnabled) {
            $.basicAuthEnabled = basicAuthEnabled;
            return this;
        }

        /**
         * @param basicAuthEnabled Whether to enable basic auth for the data source. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder basicAuthEnabled(Boolean basicAuthEnabled) {
            return basicAuthEnabled(Output.of(basicAuthEnabled));
        }

        /**
         * @param basicAuthUsername Basic auth username. Defaults to ``.
         * 
         * @return builder
         * 
         */
        public Builder basicAuthUsername(@Nullable Output<String> basicAuthUsername) {
            $.basicAuthUsername = basicAuthUsername;
            return this;
        }

        /**
         * @param basicAuthUsername Basic auth username. Defaults to ``.
         * 
         * @return builder
         * 
         */
        public Builder basicAuthUsername(String basicAuthUsername) {
            return basicAuthUsername(Output.of(basicAuthUsername));
        }

        /**
         * @param databaseName (Required by some data source types) The name of the database to use on the selected data source server. Defaults to ``.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(@Nullable Output<String> databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        /**
         * @param databaseName (Required by some data source types) The name of the database to use on the selected data source server. Defaults to ``.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(String databaseName) {
            return databaseName(Output.of(databaseName));
        }

        /**
         * @param httpHeaders Custom HTTP headers
         * 
         * @return builder
         * 
         */
        public Builder httpHeaders(@Nullable Output<Map<String,String>> httpHeaders) {
            $.httpHeaders = httpHeaders;
            return this;
        }

        /**
         * @param httpHeaders Custom HTTP headers
         * 
         * @return builder
         * 
         */
        public Builder httpHeaders(Map<String,String> httpHeaders) {
            return httpHeaders(Output.of(httpHeaders));
        }

        /**
         * @param isDefault Whether to set the data source as default. This should only be `true` to a single data source. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder isDefault(@Nullable Output<Boolean> isDefault) {
            $.isDefault = isDefault;
            return this;
        }

        /**
         * @param isDefault Whether to set the data source as default. This should only be `true` to a single data source. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder isDefault(Boolean isDefault) {
            return isDefault(Output.of(isDefault));
        }

        /**
         * @param jsonDataEncoded Serialized JSON string containing the json data. This attribute can be used to pass configuration options to the data source. To figure out what options a datasource has available, see its docs or inspect the network data when saving it from the Grafana UI. Note that keys in this map are usually camelCased.
         * 
         * @return builder
         * 
         */
        public Builder jsonDataEncoded(@Nullable Output<String> jsonDataEncoded) {
            $.jsonDataEncoded = jsonDataEncoded;
            return this;
        }

        /**
         * @param jsonDataEncoded Serialized JSON string containing the json data. This attribute can be used to pass configuration options to the data source. To figure out what options a datasource has available, see its docs or inspect the network data when saving it from the Grafana UI. Note that keys in this map are usually camelCased.
         * 
         * @return builder
         * 
         */
        public Builder jsonDataEncoded(String jsonDataEncoded) {
            return jsonDataEncoded(Output.of(jsonDataEncoded));
        }

        /**
         * @param name A unique name for the data source.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A unique name for the data source.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param orgId The Organization ID. If not set, the Org ID defined in the provider block will be used.
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId The Organization ID. If not set, the Org ID defined in the provider block will be used.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param secureJsonDataEncoded Serialized JSON string containing the secure json data. This attribute can be used to pass secure configuration options to the data source. To figure out what options a datasource has available, see its docs or inspect the network data when saving it from the Grafana UI. Note that keys in this map are usually camelCased.
         * 
         * @return builder
         * 
         */
        public Builder secureJsonDataEncoded(@Nullable Output<String> secureJsonDataEncoded) {
            $.secureJsonDataEncoded = secureJsonDataEncoded;
            return this;
        }

        /**
         * @param secureJsonDataEncoded Serialized JSON string containing the secure json data. This attribute can be used to pass secure configuration options to the data source. To figure out what options a datasource has available, see its docs or inspect the network data when saving it from the Grafana UI. Note that keys in this map are usually camelCased.
         * 
         * @return builder
         * 
         */
        public Builder secureJsonDataEncoded(String secureJsonDataEncoded) {
            return secureJsonDataEncoded(Output.of(secureJsonDataEncoded));
        }

        /**
         * @param type The data source type. Must be one of the supported data source keywords.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The data source type. Must be one of the supported data source keywords.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param uid Unique identifier. If unset, this will be automatically generated.
         * 
         * @return builder
         * 
         */
        public Builder uid(@Nullable Output<String> uid) {
            $.uid = uid;
            return this;
        }

        /**
         * @param uid Unique identifier. If unset, this will be automatically generated.
         * 
         * @return builder
         * 
         */
        public Builder uid(String uid) {
            return uid(Output.of(uid));
        }

        /**
         * @param url The URL for the data source. The type of URL required varies depending on the chosen data source type.
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url The URL for the data source. The type of URL required varies depending on the chosen data source type.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        /**
         * @param username (Required by some data source types) The username to use to authenticate to the data source. Defaults to ``.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username (Required by some data source types) The username to use to authenticate to the data source. Defaults to ``.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public DataSourceArgs build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
