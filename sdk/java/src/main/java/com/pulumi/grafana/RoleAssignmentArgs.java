// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RoleAssignmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final RoleAssignmentArgs Empty = new RoleAssignmentArgs();

    /**
     * Grafana RBAC role UID.
     * 
     */
    @Import(name="roleUid", required=true)
    private Output<String> roleUid;

    /**
     * @return Grafana RBAC role UID.
     * 
     */
    public Output<String> roleUid() {
        return this.roleUid;
    }

    /**
     * IDs of service accounts that the role should be assigned to.
     * 
     */
    @Import(name="serviceAccounts")
    private @Nullable Output<List<Integer>> serviceAccounts;

    /**
     * @return IDs of service accounts that the role should be assigned to.
     * 
     */
    public Optional<Output<List<Integer>>> serviceAccounts() {
        return Optional.ofNullable(this.serviceAccounts);
    }

    /**
     * IDs of teams that the role should be assigned to.
     * 
     */
    @Import(name="teams")
    private @Nullable Output<List<String>> teams;

    /**
     * @return IDs of teams that the role should be assigned to.
     * 
     */
    public Optional<Output<List<String>>> teams() {
        return Optional.ofNullable(this.teams);
    }

    /**
     * IDs of users that the role should be assigned to.
     * 
     */
    @Import(name="users")
    private @Nullable Output<List<Integer>> users;

    /**
     * @return IDs of users that the role should be assigned to.
     * 
     */
    public Optional<Output<List<Integer>>> users() {
        return Optional.ofNullable(this.users);
    }

    private RoleAssignmentArgs() {}

    private RoleAssignmentArgs(RoleAssignmentArgs $) {
        this.roleUid = $.roleUid;
        this.serviceAccounts = $.serviceAccounts;
        this.teams = $.teams;
        this.users = $.users;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RoleAssignmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RoleAssignmentArgs $;

        public Builder() {
            $ = new RoleAssignmentArgs();
        }

        public Builder(RoleAssignmentArgs defaults) {
            $ = new RoleAssignmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param roleUid Grafana RBAC role UID.
         * 
         * @return builder
         * 
         */
        public Builder roleUid(Output<String> roleUid) {
            $.roleUid = roleUid;
            return this;
        }

        /**
         * @param roleUid Grafana RBAC role UID.
         * 
         * @return builder
         * 
         */
        public Builder roleUid(String roleUid) {
            return roleUid(Output.of(roleUid));
        }

        /**
         * @param serviceAccounts IDs of service accounts that the role should be assigned to.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccounts(@Nullable Output<List<Integer>> serviceAccounts) {
            $.serviceAccounts = serviceAccounts;
            return this;
        }

        /**
         * @param serviceAccounts IDs of service accounts that the role should be assigned to.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccounts(List<Integer> serviceAccounts) {
            return serviceAccounts(Output.of(serviceAccounts));
        }

        /**
         * @param serviceAccounts IDs of service accounts that the role should be assigned to.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccounts(Integer... serviceAccounts) {
            return serviceAccounts(List.of(serviceAccounts));
        }

        /**
         * @param teams IDs of teams that the role should be assigned to.
         * 
         * @return builder
         * 
         */
        public Builder teams(@Nullable Output<List<String>> teams) {
            $.teams = teams;
            return this;
        }

        /**
         * @param teams IDs of teams that the role should be assigned to.
         * 
         * @return builder
         * 
         */
        public Builder teams(List<String> teams) {
            return teams(Output.of(teams));
        }

        /**
         * @param teams IDs of teams that the role should be assigned to.
         * 
         * @return builder
         * 
         */
        public Builder teams(String... teams) {
            return teams(List.of(teams));
        }

        /**
         * @param users IDs of users that the role should be assigned to.
         * 
         * @return builder
         * 
         */
        public Builder users(@Nullable Output<List<Integer>> users) {
            $.users = users;
            return this;
        }

        /**
         * @param users IDs of users that the role should be assigned to.
         * 
         * @return builder
         * 
         */
        public Builder users(List<Integer> users) {
            return users(Output.of(users));
        }

        /**
         * @param users IDs of users that the role should be assigned to.
         * 
         * @return builder
         * 
         */
        public Builder users(Integer... users) {
            return users(List.of(users));
        }

        public RoleAssignmentArgs build() {
            $.roleUid = Objects.requireNonNull($.roleUid, "expected parameter 'roleUid' to be non-null");
            return $;
        }
    }

}
