// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDataSourceResult {
    /**
     * @return The method by which Grafana will access the data source: `proxy` or `direct`.
     * 
     */
    private String accessMode;
    /**
     * @return Whether to enable basic auth for the data source.
     * 
     */
    private Boolean basicAuthEnabled;
    /**
     * @return Basic auth username.
     * 
     */
    private String basicAuthUsername;
    /**
     * @return (Required by some data source types) The name of the database to use on the selected data source server.
     * 
     */
    private String databaseName;
    /**
     * @return The ID of this resource.
     * 
     */
    private String id;
    /**
     * @return Whether to set the data source as default. This should only be `true` to a single data source.
     * 
     */
    private Boolean isDefault;
    /**
     * @return Serialized JSON string containing the json data. This attribute can be used to pass configuration options to the data source. To figure out what options a datasource has available, see its docs or inspect the network data when saving it from the Grafana UI. Note that keys in this map are usually camelCased.
     * 
     */
    private String jsonDataEncoded;
    private String name;
    /**
     * @return The Organization ID. If not set, the Org ID defined in the provider block will be used.
     * 
     */
    private @Nullable String orgId;
    /**
     * @return The data source type. Must be one of the supported data source keywords.
     * 
     */
    private String type;
    private String uid;
    /**
     * @return The URL for the data source. The type of URL required varies depending on the chosen data source type.
     * 
     */
    private String url;
    /**
     * @return (Required by some data source types) The username to use to authenticate to the data source.
     * 
     */
    private String username;

    private GetDataSourceResult() {}
    /**
     * @return The method by which Grafana will access the data source: `proxy` or `direct`.
     * 
     */
    public String accessMode() {
        return this.accessMode;
    }
    /**
     * @return Whether to enable basic auth for the data source.
     * 
     */
    public Boolean basicAuthEnabled() {
        return this.basicAuthEnabled;
    }
    /**
     * @return Basic auth username.
     * 
     */
    public String basicAuthUsername() {
        return this.basicAuthUsername;
    }
    /**
     * @return (Required by some data source types) The name of the database to use on the selected data source server.
     * 
     */
    public String databaseName() {
        return this.databaseName;
    }
    /**
     * @return The ID of this resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Whether to set the data source as default. This should only be `true` to a single data source.
     * 
     */
    public Boolean isDefault() {
        return this.isDefault;
    }
    /**
     * @return Serialized JSON string containing the json data. This attribute can be used to pass configuration options to the data source. To figure out what options a datasource has available, see its docs or inspect the network data when saving it from the Grafana UI. Note that keys in this map are usually camelCased.
     * 
     */
    public String jsonDataEncoded() {
        return this.jsonDataEncoded;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return The Organization ID. If not set, the Org ID defined in the provider block will be used.
     * 
     */
    public Optional<String> orgId() {
        return Optional.ofNullable(this.orgId);
    }
    /**
     * @return The data source type. Must be one of the supported data source keywords.
     * 
     */
    public String type() {
        return this.type;
    }
    public String uid() {
        return this.uid;
    }
    /**
     * @return The URL for the data source. The type of URL required varies depending on the chosen data source type.
     * 
     */
    public String url() {
        return this.url;
    }
    /**
     * @return (Required by some data source types) The username to use to authenticate to the data source.
     * 
     */
    public String username() {
        return this.username;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDataSourceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accessMode;
        private Boolean basicAuthEnabled;
        private String basicAuthUsername;
        private String databaseName;
        private String id;
        private Boolean isDefault;
        private String jsonDataEncoded;
        private String name;
        private @Nullable String orgId;
        private String type;
        private String uid;
        private String url;
        private String username;
        public Builder() {}
        public Builder(GetDataSourceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessMode = defaults.accessMode;
    	      this.basicAuthEnabled = defaults.basicAuthEnabled;
    	      this.basicAuthUsername = defaults.basicAuthUsername;
    	      this.databaseName = defaults.databaseName;
    	      this.id = defaults.id;
    	      this.isDefault = defaults.isDefault;
    	      this.jsonDataEncoded = defaults.jsonDataEncoded;
    	      this.name = defaults.name;
    	      this.orgId = defaults.orgId;
    	      this.type = defaults.type;
    	      this.uid = defaults.uid;
    	      this.url = defaults.url;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder accessMode(String accessMode) {
            this.accessMode = Objects.requireNonNull(accessMode);
            return this;
        }
        @CustomType.Setter
        public Builder basicAuthEnabled(Boolean basicAuthEnabled) {
            this.basicAuthEnabled = Objects.requireNonNull(basicAuthEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder basicAuthUsername(String basicAuthUsername) {
            this.basicAuthUsername = Objects.requireNonNull(basicAuthUsername);
            return this;
        }
        @CustomType.Setter
        public Builder databaseName(String databaseName) {
            this.databaseName = Objects.requireNonNull(databaseName);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder isDefault(Boolean isDefault) {
            this.isDefault = Objects.requireNonNull(isDefault);
            return this;
        }
        @CustomType.Setter
        public Builder jsonDataEncoded(String jsonDataEncoded) {
            this.jsonDataEncoded = Objects.requireNonNull(jsonDataEncoded);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder orgId(@Nullable String orgId) {
            this.orgId = orgId;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder uid(String uid) {
            this.uid = Objects.requireNonNull(uid);
            return this;
        }
        @CustomType.Setter
        public Builder url(String url) {
            this.url = Objects.requireNonNull(url);
            return this;
        }
        @CustomType.Setter
        public Builder username(String username) {
            this.username = Objects.requireNonNull(username);
            return this;
        }
        public GetDataSourceResult build() {
            final var o = new GetDataSourceResult();
            o.accessMode = accessMode;
            o.basicAuthEnabled = basicAuthEnabled;
            o.basicAuthUsername = basicAuthUsername;
            o.databaseName = databaseName;
            o.id = id;
            o.isDefault = isDefault;
            o.jsonDataEncoded = jsonDataEncoded;
            o.name = name;
            o.orgId = orgId;
            o.type = type;
            o.uid = uid;
            o.url = url;
            o.username = username;
            return o;
        }
    }
}
