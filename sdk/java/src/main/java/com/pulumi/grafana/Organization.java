// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.grafana.OrganizationArgs;
import com.pulumi.grafana.Utilities;
import com.pulumi.grafana.inputs.OrganizationState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * * [Official documentation](https://grafana.com/docs/grafana/latest/administration/manage-organizations/)
 * * [HTTP API](https://grafana.com/docs/grafana/latest/http_api/org/)
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.grafana.Organization;
 * import com.pulumi.grafana.OrganizationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var test = new Organization(&#34;test&#34;, OrganizationArgs.builder()        
 *             .adminUser(&#34;admin&#34;)
 *             .admins(&#34;admin@example.com&#34;)
 *             .createUsers(true)
 *             .editors(            
 *                 &#34;editor-01@example.com&#34;,
 *                 &#34;editor-02@example.com&#34;)
 *             .viewers(            
 *                 &#34;viewer-01@example.com&#34;,
 *                 &#34;viewer-02@example.com&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * ```sh
 *  $ pulumi import grafana:index/organization:Organization org_name {{org_id}}
 * ```
 * 
 */
@ResourceType(type="grafana:index/organization:Organization")
public class Organization extends com.pulumi.resources.CustomResource {
    /**
     * The login name of the configured default admin user for the Grafana installation. If unset, this value defaults to
     * admin, the Grafana default. Grafana adds the default admin user to all organizations automatically upon creation, and
     * this parameter keeps Terraform from removing it from organizations.
     * 
     */
    @Export(name="adminUser", type=String.class, parameters={})
    private Output</* @Nullable */ String> adminUser;

    /**
     * @return The login name of the configured default admin user for the Grafana installation. If unset, this value defaults to
     * admin, the Grafana default. Grafana adds the default admin user to all organizations automatically upon creation, and
     * this parameter keeps Terraform from removing it from organizations.
     * 
     */
    public Output<Optional<String>> adminUser() {
        return Codegen.optional(this.adminUser);
    }
    /**
     * A list of email addresses corresponding to users who should be given admin
     * access to the organization. Note: users specified here must already exist in
     * Grafana unless &#39;create_users&#39; is set to true.
     * 
     */
    @Export(name="admins", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> admins;

    /**
     * @return A list of email addresses corresponding to users who should be given admin
     * access to the organization. Note: users specified here must already exist in
     * Grafana unless &#39;create_users&#39; is set to true.
     * 
     */
    public Output<Optional<List<String>>> admins() {
        return Codegen.optional(this.admins);
    }
    /**
     * Whether or not to create Grafana users specified in the organization&#39;s
     * membership if they don&#39;t already exist in Grafana. If unspecified, this
     * parameter defaults to true, creating placeholder users with the name, login,
     * and email set to the email of the user, and a random password. Setting this
     * option to false will cause an error to be thrown for any users that do not
     * already exist in Grafana.
     * Defaults to `true`.
     * 
     */
    @Export(name="createUsers", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> createUsers;

    /**
     * @return Whether or not to create Grafana users specified in the organization&#39;s
     * membership if they don&#39;t already exist in Grafana. If unspecified, this
     * parameter defaults to true, creating placeholder users with the name, login,
     * and email set to the email of the user, and a random password. Setting this
     * option to false will cause an error to be thrown for any users that do not
     * already exist in Grafana.
     * Defaults to `true`.
     * 
     */
    public Output<Optional<Boolean>> createUsers() {
        return Codegen.optional(this.createUsers);
    }
    /**
     * A list of email addresses corresponding to users who should be given editor
     * access to the organization. Note: users specified here must already exist in
     * Grafana unless &#39;create_users&#39; is set to true.
     * 
     */
    @Export(name="editors", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> editors;

    /**
     * @return A list of email addresses corresponding to users who should be given editor
     * access to the organization. Note: users specified here must already exist in
     * Grafana unless &#39;create_users&#39; is set to true.
     * 
     */
    public Output<Optional<List<String>>> editors() {
        return Codegen.optional(this.editors);
    }
    /**
     * The display name for the Grafana organization created.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The display name for the Grafana organization created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The organization id assigned to this organization by Grafana.
     * 
     */
    @Export(name="orgId", type=Integer.class, parameters={})
    private Output<Integer> orgId;

    /**
     * @return The organization id assigned to this organization by Grafana.
     * 
     */
    public Output<Integer> orgId() {
        return this.orgId;
    }
    /**
     * A list of email addresses corresponding to users who should be given viewer
     * access to the organization. Note: users specified here must already exist in
     * Grafana unless &#39;create_users&#39; is set to true.
     * 
     */
    @Export(name="viewers", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> viewers;

    /**
     * @return A list of email addresses corresponding to users who should be given viewer
     * access to the organization. Note: users specified here must already exist in
     * Grafana unless &#39;create_users&#39; is set to true.
     * 
     */
    public Output<Optional<List<String>>> viewers() {
        return Codegen.optional(this.viewers);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Organization(String name) {
        this(name, OrganizationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Organization(String name, @Nullable OrganizationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Organization(String name, @Nullable OrganizationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("grafana:index/organization:Organization", name, args == null ? OrganizationArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Organization(String name, Output<String> id, @Nullable OrganizationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("grafana:index/organization:Organization", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Organization get(String name, Output<String> id, @Nullable OrganizationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Organization(name, id, state, options);
    }
}
