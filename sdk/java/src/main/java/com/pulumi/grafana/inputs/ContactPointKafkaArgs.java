// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContactPointKafkaArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContactPointKafkaArgs Empty = new ContactPointKafkaArgs();

    /**
     * The API version to use when contacting the Kafka REST Server. Supported: v2 (default) and v3. Defaults to `v2`.
     * 
     */
    @Import(name="apiVersion")
    private @Nullable Output<String> apiVersion;

    /**
     * @return The API version to use when contacting the Kafka REST Server. Supported: v2 (default) and v3. Defaults to `v2`.
     * 
     */
    public Optional<Output<String>> apiVersion() {
        return Optional.ofNullable(this.apiVersion);
    }

    /**
     * The Id of cluster to use when contacting the Kafka REST Server. Required api_version to be &#39;v3&#39;
     * 
     */
    @Import(name="clusterId")
    private @Nullable Output<String> clusterId;

    /**
     * @return The Id of cluster to use when contacting the Kafka REST Server. Required api_version to be &#39;v3&#39;
     * 
     */
    public Optional<Output<String>> clusterId() {
        return Optional.ofNullable(this.clusterId);
    }

    /**
     * The templated description of the Kafka message.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The templated description of the Kafka message.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The templated details to include with the message.
     * 
     */
    @Import(name="details")
    private @Nullable Output<String> details;

    /**
     * @return The templated details to include with the message.
     * 
     */
    public Optional<Output<String>> details() {
        return Optional.ofNullable(this.details);
    }

    /**
     * Whether to disable sending resolve messages. Defaults to `false`.
     * 
     */
    @Import(name="disableResolveMessage")
    private @Nullable Output<Boolean> disableResolveMessage;

    /**
     * @return Whether to disable sending resolve messages. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> disableResolveMessage() {
        return Optional.ofNullable(this.disableResolveMessage);
    }

    /**
     * The password to use when making a call to the Kafka REST Proxy
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return The password to use when making a call to the Kafka REST Proxy
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * The URL of the Kafka REST proxy to send requests to.
     * 
     */
    @Import(name="restProxyUrl", required=true)
    private Output<String> restProxyUrl;

    /**
     * @return The URL of the Kafka REST proxy to send requests to.
     * 
     */
    public Output<String> restProxyUrl() {
        return this.restProxyUrl;
    }

    /**
     * Additional custom properties to attach to the notifier. Defaults to `map[]`.
     * 
     */
    @Import(name="settings")
    private @Nullable Output<Map<String,String>> settings;

    /**
     * @return Additional custom properties to attach to the notifier. Defaults to `map[]`.
     * 
     */
    public Optional<Output<Map<String,String>>> settings() {
        return Optional.ofNullable(this.settings);
    }

    /**
     * The name of the Kafka topic to publish to.
     * 
     */
    @Import(name="topic", required=true)
    private Output<String> topic;

    /**
     * @return The name of the Kafka topic to publish to.
     * 
     */
    public Output<String> topic() {
        return this.topic;
    }

    /**
     * The UID of the contact point.
     * 
     */
    @Import(name="uid")
    private @Nullable Output<String> uid;

    /**
     * @return The UID of the contact point.
     * 
     */
    public Optional<Output<String>> uid() {
        return Optional.ofNullable(this.uid);
    }

    /**
     * The user name to use when making a call to the Kafka REST Proxy
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return The user name to use when making a call to the Kafka REST Proxy
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private ContactPointKafkaArgs() {}

    private ContactPointKafkaArgs(ContactPointKafkaArgs $) {
        this.apiVersion = $.apiVersion;
        this.clusterId = $.clusterId;
        this.description = $.description;
        this.details = $.details;
        this.disableResolveMessage = $.disableResolveMessage;
        this.password = $.password;
        this.restProxyUrl = $.restProxyUrl;
        this.settings = $.settings;
        this.topic = $.topic;
        this.uid = $.uid;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContactPointKafkaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContactPointKafkaArgs $;

        public Builder() {
            $ = new ContactPointKafkaArgs();
        }

        public Builder(ContactPointKafkaArgs defaults) {
            $ = new ContactPointKafkaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiVersion The API version to use when contacting the Kafka REST Server. Supported: v2 (default) and v3. Defaults to `v2`.
         * 
         * @return builder
         * 
         */
        public Builder apiVersion(@Nullable Output<String> apiVersion) {
            $.apiVersion = apiVersion;
            return this;
        }

        /**
         * @param apiVersion The API version to use when contacting the Kafka REST Server. Supported: v2 (default) and v3. Defaults to `v2`.
         * 
         * @return builder
         * 
         */
        public Builder apiVersion(String apiVersion) {
            return apiVersion(Output.of(apiVersion));
        }

        /**
         * @param clusterId The Id of cluster to use when contacting the Kafka REST Server. Required api_version to be &#39;v3&#39;
         * 
         * @return builder
         * 
         */
        public Builder clusterId(@Nullable Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId The Id of cluster to use when contacting the Kafka REST Server. Required api_version to be &#39;v3&#39;
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        /**
         * @param description The templated description of the Kafka message.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The templated description of the Kafka message.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param details The templated details to include with the message.
         * 
         * @return builder
         * 
         */
        public Builder details(@Nullable Output<String> details) {
            $.details = details;
            return this;
        }

        /**
         * @param details The templated details to include with the message.
         * 
         * @return builder
         * 
         */
        public Builder details(String details) {
            return details(Output.of(details));
        }

        /**
         * @param disableResolveMessage Whether to disable sending resolve messages. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder disableResolveMessage(@Nullable Output<Boolean> disableResolveMessage) {
            $.disableResolveMessage = disableResolveMessage;
            return this;
        }

        /**
         * @param disableResolveMessage Whether to disable sending resolve messages. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder disableResolveMessage(Boolean disableResolveMessage) {
            return disableResolveMessage(Output.of(disableResolveMessage));
        }

        /**
         * @param password The password to use when making a call to the Kafka REST Proxy
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The password to use when making a call to the Kafka REST Proxy
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param restProxyUrl The URL of the Kafka REST proxy to send requests to.
         * 
         * @return builder
         * 
         */
        public Builder restProxyUrl(Output<String> restProxyUrl) {
            $.restProxyUrl = restProxyUrl;
            return this;
        }

        /**
         * @param restProxyUrl The URL of the Kafka REST proxy to send requests to.
         * 
         * @return builder
         * 
         */
        public Builder restProxyUrl(String restProxyUrl) {
            return restProxyUrl(Output.of(restProxyUrl));
        }

        /**
         * @param settings Additional custom properties to attach to the notifier. Defaults to `map[]`.
         * 
         * @return builder
         * 
         */
        public Builder settings(@Nullable Output<Map<String,String>> settings) {
            $.settings = settings;
            return this;
        }

        /**
         * @param settings Additional custom properties to attach to the notifier. Defaults to `map[]`.
         * 
         * @return builder
         * 
         */
        public Builder settings(Map<String,String> settings) {
            return settings(Output.of(settings));
        }

        /**
         * @param topic The name of the Kafka topic to publish to.
         * 
         * @return builder
         * 
         */
        public Builder topic(Output<String> topic) {
            $.topic = topic;
            return this;
        }

        /**
         * @param topic The name of the Kafka topic to publish to.
         * 
         * @return builder
         * 
         */
        public Builder topic(String topic) {
            return topic(Output.of(topic));
        }

        /**
         * @param uid The UID of the contact point.
         * 
         * @return builder
         * 
         */
        public Builder uid(@Nullable Output<String> uid) {
            $.uid = uid;
            return this;
        }

        /**
         * @param uid The UID of the contact point.
         * 
         * @return builder
         * 
         */
        public Builder uid(String uid) {
            return uid(Output.of(uid));
        }

        /**
         * @param username The user name to use when making a call to the Kafka REST Proxy
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The user name to use when making a call to the Kafka REST Proxy
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public ContactPointKafkaArgs build() {
            $.restProxyUrl = Objects.requireNonNull($.restProxyUrl, "expected parameter 'restProxyUrl' to be non-null");
            $.topic = Objects.requireNonNull($.topic, "expected parameter 'topic' to be non-null");
            return $;
        }
    }

}
