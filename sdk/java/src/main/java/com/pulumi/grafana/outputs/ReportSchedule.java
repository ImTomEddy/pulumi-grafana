// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ReportSchedule {
    /**
     * @return Custom interval of the report.
     * **Note:** This field is only available when frequency is set to `custom`.
     * 
     */
    private @Nullable String customInterval;
    /**
     * @return End time of the report. If empty, the report will be sent indefinitely (according to frequency). Note that times will be saved as UTC in Grafana.
     * 
     */
    private @Nullable String endTime;
    /**
     * @return Frequency of the report. One of `never`, `once`, `hourly`, `daily`, `weekly`, `monthly` or `custom`.
     * 
     */
    private String frequency;
    /**
     * @return Start time of the report. If empty, the start date will be set to the creation time. Note that times will be saved as UTC in Grafana.
     * 
     */
    private @Nullable String startTime;
    /**
     * @return Whether to send the report only on work days. Defaults to `false`.
     * 
     */
    private @Nullable Boolean workdaysOnly;

    private ReportSchedule() {}
    /**
     * @return Custom interval of the report.
     * **Note:** This field is only available when frequency is set to `custom`.
     * 
     */
    public Optional<String> customInterval() {
        return Optional.ofNullable(this.customInterval);
    }
    /**
     * @return End time of the report. If empty, the report will be sent indefinitely (according to frequency). Note that times will be saved as UTC in Grafana.
     * 
     */
    public Optional<String> endTime() {
        return Optional.ofNullable(this.endTime);
    }
    /**
     * @return Frequency of the report. One of `never`, `once`, `hourly`, `daily`, `weekly`, `monthly` or `custom`.
     * 
     */
    public String frequency() {
        return this.frequency;
    }
    /**
     * @return Start time of the report. If empty, the start date will be set to the creation time. Note that times will be saved as UTC in Grafana.
     * 
     */
    public Optional<String> startTime() {
        return Optional.ofNullable(this.startTime);
    }
    /**
     * @return Whether to send the report only on work days. Defaults to `false`.
     * 
     */
    public Optional<Boolean> workdaysOnly() {
        return Optional.ofNullable(this.workdaysOnly);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ReportSchedule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String customInterval;
        private @Nullable String endTime;
        private String frequency;
        private @Nullable String startTime;
        private @Nullable Boolean workdaysOnly;
        public Builder() {}
        public Builder(ReportSchedule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.customInterval = defaults.customInterval;
    	      this.endTime = defaults.endTime;
    	      this.frequency = defaults.frequency;
    	      this.startTime = defaults.startTime;
    	      this.workdaysOnly = defaults.workdaysOnly;
        }

        @CustomType.Setter
        public Builder customInterval(@Nullable String customInterval) {
            this.customInterval = customInterval;
            return this;
        }
        @CustomType.Setter
        public Builder endTime(@Nullable String endTime) {
            this.endTime = endTime;
            return this;
        }
        @CustomType.Setter
        public Builder frequency(String frequency) {
            this.frequency = Objects.requireNonNull(frequency);
            return this;
        }
        @CustomType.Setter
        public Builder startTime(@Nullable String startTime) {
            this.startTime = startTime;
            return this;
        }
        @CustomType.Setter
        public Builder workdaysOnly(@Nullable Boolean workdaysOnly) {
            this.workdaysOnly = workdaysOnly;
            return this;
        }
        public ReportSchedule build() {
            final var o = new ReportSchedule();
            o.customInterval = customInterval;
            o.endTime = endTime;
            o.frequency = frequency;
            o.startTime = startTime;
            o.workdaysOnly = workdaysOnly;
            return o;
        }
    }
}
