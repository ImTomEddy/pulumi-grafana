// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.grafana.SyntheticMonitoringProbeArgs;
import com.pulumi.grafana.Utilities;
import com.pulumi.grafana.inputs.SyntheticMonitoringProbeState;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Besides the public probes run by Grafana Labs, you can also install your
 * own private probes. These are only accessible to you and only write data to
 * your Grafana Cloud account. Private probes are instances of the open source
 * Grafana Synthetic Monitoring Agent.
 * 
 * * [Official documentation](https://grafana.com/docs/grafana-cloud/synthetic-monitoring/private-probes/)
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.grafana.SyntheticMonitoringProbe;
 * import com.pulumi.grafana.SyntheticMonitoringProbeArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var main = new SyntheticMonitoringProbe(&#34;main&#34;, SyntheticMonitoringProbeArgs.builder()        
 *             .labels(Map.of(&#34;type&#34;, &#34;mountain&#34;))
 *             .latitude(27.98606)
 *             .longitude(86.92262)
 *             .region(&#34;APAC&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * ```sh
 *  $ pulumi import grafana:index/syntheticMonitoringProbe:SyntheticMonitoringProbe probe {{probe-id}}
 * ```
 * 
 * ```sh
 *  $ pulumi import grafana:index/syntheticMonitoringProbe:SyntheticMonitoringProbe probe {{probe-id}}:{{auth_token}}
 * ```
 * 
 */
@ResourceType(type="grafana:index/syntheticMonitoringProbe:SyntheticMonitoringProbe")
public class SyntheticMonitoringProbe extends com.pulumi.resources.CustomResource {
    /**
     * The probe authentication token. Your probe must use this to authenticate with Grafana Cloud.
     * 
     */
    @Export(name="authToken", refs={String.class}, tree="[0]")
    private Output<String> authToken;

    /**
     * @return The probe authentication token. Your probe must use this to authenticate with Grafana Cloud.
     * 
     */
    public Output<String> authToken() {
        return this.authToken;
    }
    /**
     * Custom labels to be included with collected metrics and logs.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return Custom labels to be included with collected metrics and logs.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * Latitude coordinates.
     * 
     */
    @Export(name="latitude", refs={Double.class}, tree="[0]")
    private Output<Double> latitude;

    /**
     * @return Latitude coordinates.
     * 
     */
    public Output<Double> latitude() {
        return this.latitude;
    }
    /**
     * Longitude coordinates.
     * 
     */
    @Export(name="longitude", refs={Double.class}, tree="[0]")
    private Output<Double> longitude;

    /**
     * @return Longitude coordinates.
     * 
     */
    public Output<Double> longitude() {
        return this.longitude;
    }
    /**
     * Name of the probe.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the probe.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Public probes are run by Grafana Labs and can be used by all users. Only Grafana Labs managed public probes will be set to `true`. Defaults to `false`.
     * 
     */
    @Export(name="public", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> public_;

    /**
     * @return Public probes are run by Grafana Labs and can be used by all users. Only Grafana Labs managed public probes will be set to `true`. Defaults to `false`.
     * 
     */
    public Output<Optional<Boolean>> public_() {
        return Codegen.optional(this.public_);
    }
    /**
     * Region of the probe.
     * 
     */
    @Export(name="region", refs={String.class}, tree="[0]")
    private Output<String> region;

    /**
     * @return Region of the probe.
     * 
     */
    public Output<String> region() {
        return this.region;
    }
    /**
     * The tenant ID of the probe.
     * 
     */
    @Export(name="tenantId", refs={Integer.class}, tree="[0]")
    private Output<Integer> tenantId;

    /**
     * @return The tenant ID of the probe.
     * 
     */
    public Output<Integer> tenantId() {
        return this.tenantId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public SyntheticMonitoringProbe(String name) {
        this(name, SyntheticMonitoringProbeArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public SyntheticMonitoringProbe(String name, SyntheticMonitoringProbeArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public SyntheticMonitoringProbe(String name, SyntheticMonitoringProbeArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("grafana:index/syntheticMonitoringProbe:SyntheticMonitoringProbe", name, args == null ? SyntheticMonitoringProbeArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private SyntheticMonitoringProbe(String name, Output<String> id, @Nullable SyntheticMonitoringProbeState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("grafana:index/syntheticMonitoringProbe:SyntheticMonitoringProbe", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "authToken"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static SyntheticMonitoringProbe get(String name, Output<String> id, @Nullable SyntheticMonitoringProbeState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new SyntheticMonitoringProbe(name, id, state, options);
    }
}
