// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.grafana.ProviderArgs;
import com.pulumi.grafana.Utilities;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * The provider type for the grafana package. By default, resources use package-wide configuration
 * settings, however an explicit `Provider` instance may be created and passed during resource
 * construction to achieve fine-grained programmatic control over provider settings. See the
 * [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
 * 
 */
@ResourceType(type="pulumi:providers:grafana")
public class Provider extends com.pulumi.resources.ProviderResource {
    /**
     * API token, basic auth in the `username:password` format or `anonymous` (string literal). May alternatively be set via
     * the `GRAFANA_AUTH` environment variable.
     * 
     */
    @Export(name="auth", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> auth;

    /**
     * @return API token, basic auth in the `username:password` format or `anonymous` (string literal). May alternatively be set via
     * the `GRAFANA_AUTH` environment variable.
     * 
     */
    public Output<Optional<String>> auth() {
        return Codegen.optional(this.auth);
    }
    /**
     * Certificate CA bundle (file path or literal value) to use to verify the Grafana server&#39;s certificate. May alternatively
     * be set via the `GRAFANA_CA_CERT` environment variable.
     * 
     */
    @Export(name="caCert", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> caCert;

    /**
     * @return Certificate CA bundle (file path or literal value) to use to verify the Grafana server&#39;s certificate. May alternatively
     * be set via the `GRAFANA_CA_CERT` environment variable.
     * 
     */
    public Output<Optional<String>> caCert() {
        return Codegen.optional(this.caCert);
    }
    /**
     * API key for Grafana Cloud. May alternatively be set via the `GRAFANA_CLOUD_API_KEY` environment variable.
     * 
     */
    @Export(name="cloudApiKey", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> cloudApiKey;

    /**
     * @return API key for Grafana Cloud. May alternatively be set via the `GRAFANA_CLOUD_API_KEY` environment variable.
     * 
     */
    public Output<Optional<String>> cloudApiKey() {
        return Codegen.optional(this.cloudApiKey);
    }
    /**
     * Grafana Cloud&#39;s API URL. May alternatively be set via the `GRAFANA_CLOUD_API_URL` environment variable.
     * 
     */
    @Export(name="cloudApiUrl", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> cloudApiUrl;

    /**
     * @return Grafana Cloud&#39;s API URL. May alternatively be set via the `GRAFANA_CLOUD_API_URL` environment variable.
     * 
     */
    public Output<Optional<String>> cloudApiUrl() {
        return Codegen.optional(this.cloudApiUrl);
    }
    /**
     * A Grafana OnCall access token. May alternatively be set via the `GRAFANA_ONCALL_ACCESS_TOKEN` environment variable.
     * 
     */
    @Export(name="oncallAccessToken", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> oncallAccessToken;

    /**
     * @return A Grafana OnCall access token. May alternatively be set via the `GRAFANA_ONCALL_ACCESS_TOKEN` environment variable.
     * 
     */
    public Output<Optional<String>> oncallAccessToken() {
        return Codegen.optional(this.oncallAccessToken);
    }
    /**
     * An Grafana OnCall backend address. May alternatively be set via the `GRAFANA_ONCALL_URL` environment variable.
     * 
     */
    @Export(name="oncallUrl", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> oncallUrl;

    /**
     * @return An Grafana OnCall backend address. May alternatively be set via the `GRAFANA_ONCALL_URL` environment variable.
     * 
     */
    public Output<Optional<String>> oncallUrl() {
        return Codegen.optional(this.oncallUrl);
    }
    /**
     * A Synthetic Monitoring access token. May alternatively be set via the `GRAFANA_SM_ACCESS_TOKEN` environment variable.
     * 
     */
    @Export(name="smAccessToken", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> smAccessToken;

    /**
     * @return A Synthetic Monitoring access token. May alternatively be set via the `GRAFANA_SM_ACCESS_TOKEN` environment variable.
     * 
     */
    public Output<Optional<String>> smAccessToken() {
        return Codegen.optional(this.smAccessToken);
    }
    /**
     * Synthetic monitoring backend address. May alternatively be set via the `GRAFANA_SM_URL` environment variable. The
     * correct value for each service region is cited in the [Synthetic Monitoring
     * documentation](https://grafana.com/docs/grafana-cloud/synthetic-monitoring/private-probes/#probe-api-server-url). Note
     * the `sm_url` value is optional, but it must correspond with the value specified as the `region_slug` in the
     * `grafana_cloud_stack` resource. Also note that when a Terraform configuration contains multiple provider instances
     * managing SM resources associated with the same Grafana stack, specifying an explicit `sm_url` set to the same value for
     * each provider ensures all providers interact with the same SM API.
     * 
     */
    @Export(name="smUrl", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> smUrl;

    /**
     * @return Synthetic monitoring backend address. May alternatively be set via the `GRAFANA_SM_URL` environment variable. The
     * correct value for each service region is cited in the [Synthetic Monitoring
     * documentation](https://grafana.com/docs/grafana-cloud/synthetic-monitoring/private-probes/#probe-api-server-url). Note
     * the `sm_url` value is optional, but it must correspond with the value specified as the `region_slug` in the
     * `grafana_cloud_stack` resource. Also note that when a Terraform configuration contains multiple provider instances
     * managing SM resources associated with the same Grafana stack, specifying an explicit `sm_url` set to the same value for
     * each provider ensures all providers interact with the same SM API.
     * 
     */
    public Output<Optional<String>> smUrl() {
        return Codegen.optional(this.smUrl);
    }
    /**
     * Client TLS certificate (file path or literal value) to use to authenticate to the Grafana server. May alternatively be
     * set via the `GRAFANA_TLS_CERT` environment variable.
     * 
     */
    @Export(name="tlsCert", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tlsCert;

    /**
     * @return Client TLS certificate (file path or literal value) to use to authenticate to the Grafana server. May alternatively be
     * set via the `GRAFANA_TLS_CERT` environment variable.
     * 
     */
    public Output<Optional<String>> tlsCert() {
        return Codegen.optional(this.tlsCert);
    }
    /**
     * Client TLS key (file path or literal value) to use to authenticate to the Grafana server. May alternatively be set via
     * the `GRAFANA_TLS_KEY` environment variable.
     * 
     */
    @Export(name="tlsKey", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tlsKey;

    /**
     * @return Client TLS key (file path or literal value) to use to authenticate to the Grafana server. May alternatively be set via
     * the `GRAFANA_TLS_KEY` environment variable.
     * 
     */
    public Output<Optional<String>> tlsKey() {
        return Codegen.optional(this.tlsKey);
    }
    /**
     * The root URL of a Grafana server. May alternatively be set via the `GRAFANA_URL` environment variable.
     * 
     */
    @Export(name="url", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> url;

    /**
     * @return The root URL of a Grafana server. May alternatively be set via the `GRAFANA_URL` environment variable.
     * 
     */
    public Output<Optional<String>> url() {
        return Codegen.optional(this.url);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Provider(String name) {
        this(name, ProviderArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Provider(String name, @Nullable ProviderArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Provider(String name, @Nullable ProviderArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("grafana", name, args == null ? ProviderArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "auth",
                "cloudApiKey",
                "oncallAccessToken",
                "smAccessToken",
                "tlsKey"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

}
