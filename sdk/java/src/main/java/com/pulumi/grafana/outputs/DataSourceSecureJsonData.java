// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DataSourceSecureJsonData {
    /**
     * @return (CloudWatch, Athena) The access key used to access the data source.
     * 
     */
    private @Nullable String accessKey;
    /**
     * @return (Github) The access token used to access the data source.
     * 
     */
    private @Nullable String accessToken;
    /**
     * @return (Sentry) Authorization token.
     * 
     */
    private @Nullable String authToken;
    /**
     * @return (All) Password to use for basic authentication.
     * 
     */
    private @Nullable String basicAuthPassword;
    /**
     * @return (Azure Monitor) Client secret for authentication.
     * 
     */
    private @Nullable String clientSecret;
    /**
     * @return (All) Password to use for authentication.
     * 
     */
    private @Nullable String password;
    /**
     * @return (Stackdriver) The service account key `private_key` to use to access the data source.
     * 
     */
    private @Nullable String privateKey;
    /**
     * @return (CloudWatch, Athena) The secret key to use to access the data source.
     * 
     */
    private @Nullable String secretKey;
    /**
     * @return (Elasticsearch and Prometheus) SigV4 access key. Required when using &#39;keys&#39; auth provider.
     * 
     */
    private @Nullable String sigv4AccessKey;
    /**
     * @return (Elasticsearch and Prometheus) SigV4 secret key. Required when using &#39;keys&#39; auth provider.
     * 
     */
    private @Nullable String sigv4SecretKey;
    /**
     * @return (All) CA cert for out going requests.
     * 
     */
    private @Nullable String tlsCaCert;
    /**
     * @return (All) TLS Client cert for outgoing requests.
     * 
     */
    private @Nullable String tlsClientCert;
    /**
     * @return (All) TLS Client key for outgoing requests.
     * 
     */
    private @Nullable String tlsClientKey;

    private DataSourceSecureJsonData() {}
    /**
     * @return (CloudWatch, Athena) The access key used to access the data source.
     * 
     */
    public Optional<String> accessKey() {
        return Optional.ofNullable(this.accessKey);
    }
    /**
     * @return (Github) The access token used to access the data source.
     * 
     */
    public Optional<String> accessToken() {
        return Optional.ofNullable(this.accessToken);
    }
    /**
     * @return (Sentry) Authorization token.
     * 
     */
    public Optional<String> authToken() {
        return Optional.ofNullable(this.authToken);
    }
    /**
     * @return (All) Password to use for basic authentication.
     * 
     */
    public Optional<String> basicAuthPassword() {
        return Optional.ofNullable(this.basicAuthPassword);
    }
    /**
     * @return (Azure Monitor) Client secret for authentication.
     * 
     */
    public Optional<String> clientSecret() {
        return Optional.ofNullable(this.clientSecret);
    }
    /**
     * @return (All) Password to use for authentication.
     * 
     */
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }
    /**
     * @return (Stackdriver) The service account key `private_key` to use to access the data source.
     * 
     */
    public Optional<String> privateKey() {
        return Optional.ofNullable(this.privateKey);
    }
    /**
     * @return (CloudWatch, Athena) The secret key to use to access the data source.
     * 
     */
    public Optional<String> secretKey() {
        return Optional.ofNullable(this.secretKey);
    }
    /**
     * @return (Elasticsearch and Prometheus) SigV4 access key. Required when using &#39;keys&#39; auth provider.
     * 
     */
    public Optional<String> sigv4AccessKey() {
        return Optional.ofNullable(this.sigv4AccessKey);
    }
    /**
     * @return (Elasticsearch and Prometheus) SigV4 secret key. Required when using &#39;keys&#39; auth provider.
     * 
     */
    public Optional<String> sigv4SecretKey() {
        return Optional.ofNullable(this.sigv4SecretKey);
    }
    /**
     * @return (All) CA cert for out going requests.
     * 
     */
    public Optional<String> tlsCaCert() {
        return Optional.ofNullable(this.tlsCaCert);
    }
    /**
     * @return (All) TLS Client cert for outgoing requests.
     * 
     */
    public Optional<String> tlsClientCert() {
        return Optional.ofNullable(this.tlsClientCert);
    }
    /**
     * @return (All) TLS Client key for outgoing requests.
     * 
     */
    public Optional<String> tlsClientKey() {
        return Optional.ofNullable(this.tlsClientKey);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataSourceSecureJsonData defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accessKey;
        private @Nullable String accessToken;
        private @Nullable String authToken;
        private @Nullable String basicAuthPassword;
        private @Nullable String clientSecret;
        private @Nullable String password;
        private @Nullable String privateKey;
        private @Nullable String secretKey;
        private @Nullable String sigv4AccessKey;
        private @Nullable String sigv4SecretKey;
        private @Nullable String tlsCaCert;
        private @Nullable String tlsClientCert;
        private @Nullable String tlsClientKey;
        public Builder() {}
        public Builder(DataSourceSecureJsonData defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessKey = defaults.accessKey;
    	      this.accessToken = defaults.accessToken;
    	      this.authToken = defaults.authToken;
    	      this.basicAuthPassword = defaults.basicAuthPassword;
    	      this.clientSecret = defaults.clientSecret;
    	      this.password = defaults.password;
    	      this.privateKey = defaults.privateKey;
    	      this.secretKey = defaults.secretKey;
    	      this.sigv4AccessKey = defaults.sigv4AccessKey;
    	      this.sigv4SecretKey = defaults.sigv4SecretKey;
    	      this.tlsCaCert = defaults.tlsCaCert;
    	      this.tlsClientCert = defaults.tlsClientCert;
    	      this.tlsClientKey = defaults.tlsClientKey;
        }

        @CustomType.Setter
        public Builder accessKey(@Nullable String accessKey) {
            this.accessKey = accessKey;
            return this;
        }
        @CustomType.Setter
        public Builder accessToken(@Nullable String accessToken) {
            this.accessToken = accessToken;
            return this;
        }
        @CustomType.Setter
        public Builder authToken(@Nullable String authToken) {
            this.authToken = authToken;
            return this;
        }
        @CustomType.Setter
        public Builder basicAuthPassword(@Nullable String basicAuthPassword) {
            this.basicAuthPassword = basicAuthPassword;
            return this;
        }
        @CustomType.Setter
        public Builder clientSecret(@Nullable String clientSecret) {
            this.clientSecret = clientSecret;
            return this;
        }
        @CustomType.Setter
        public Builder password(@Nullable String password) {
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder privateKey(@Nullable String privateKey) {
            this.privateKey = privateKey;
            return this;
        }
        @CustomType.Setter
        public Builder secretKey(@Nullable String secretKey) {
            this.secretKey = secretKey;
            return this;
        }
        @CustomType.Setter
        public Builder sigv4AccessKey(@Nullable String sigv4AccessKey) {
            this.sigv4AccessKey = sigv4AccessKey;
            return this;
        }
        @CustomType.Setter
        public Builder sigv4SecretKey(@Nullable String sigv4SecretKey) {
            this.sigv4SecretKey = sigv4SecretKey;
            return this;
        }
        @CustomType.Setter
        public Builder tlsCaCert(@Nullable String tlsCaCert) {
            this.tlsCaCert = tlsCaCert;
            return this;
        }
        @CustomType.Setter
        public Builder tlsClientCert(@Nullable String tlsClientCert) {
            this.tlsClientCert = tlsClientCert;
            return this;
        }
        @CustomType.Setter
        public Builder tlsClientKey(@Nullable String tlsClientKey) {
            this.tlsClientKey = tlsClientKey;
            return this;
        }
        public DataSourceSecureJsonData build() {
            final var o = new DataSourceSecureJsonData();
            o.accessKey = accessKey;
            o.accessToken = accessToken;
            o.authToken = authToken;
            o.basicAuthPassword = basicAuthPassword;
            o.clientSecret = clientSecret;
            o.password = password;
            o.privateKey = privateKey;
            o.secretKey = secretKey;
            o.sigv4AccessKey = sigv4AccessKey;
            o.sigv4SecretKey = sigv4SecretKey;
            o.tlsCaCert = tlsCaCert;
            o.tlsClientCert = tlsClientCert;
            o.tlsClientKey = tlsClientKey;
            return o;
        }
    }
}
