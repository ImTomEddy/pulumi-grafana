// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.grafana.inputs.SLOAlertingSlowburnAnnotationArgs;
import com.pulumi.grafana.inputs.SLOAlertingSlowburnLabelArgs;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SLOAlertingSlowburnArgs extends com.pulumi.resources.ResourceArgs {

    public static final SLOAlertingSlowburnArgs Empty = new SLOAlertingSlowburnArgs();

    @Import(name="annotations")
    private @Nullable Output<List<SLOAlertingSlowburnAnnotationArgs>> annotations;

    public Optional<Output<List<SLOAlertingSlowburnAnnotationArgs>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * Additional labels that will be attached to all metrics generated from the query. These labels are useful for grouping SLOs in dashboard views that you create by hand.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<List<SLOAlertingSlowburnLabelArgs>> labels;

    /**
     * @return Additional labels that will be attached to all metrics generated from the query. These labels are useful for grouping SLOs in dashboard views that you create by hand.
     * 
     */
    public Optional<Output<List<SLOAlertingSlowburnLabelArgs>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    private SLOAlertingSlowburnArgs() {}

    private SLOAlertingSlowburnArgs(SLOAlertingSlowburnArgs $) {
        this.annotations = $.annotations;
        this.labels = $.labels;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SLOAlertingSlowburnArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SLOAlertingSlowburnArgs $;

        public Builder() {
            $ = new SLOAlertingSlowburnArgs();
        }

        public Builder(SLOAlertingSlowburnArgs defaults) {
            $ = new SLOAlertingSlowburnArgs(Objects.requireNonNull(defaults));
        }

        public Builder annotations(@Nullable Output<List<SLOAlertingSlowburnAnnotationArgs>> annotations) {
            $.annotations = annotations;
            return this;
        }

        public Builder annotations(List<SLOAlertingSlowburnAnnotationArgs> annotations) {
            return annotations(Output.of(annotations));
        }

        public Builder annotations(SLOAlertingSlowburnAnnotationArgs... annotations) {
            return annotations(List.of(annotations));
        }

        /**
         * @param labels Additional labels that will be attached to all metrics generated from the query. These labels are useful for grouping SLOs in dashboard views that you create by hand.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<List<SLOAlertingSlowburnLabelArgs>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Additional labels that will be attached to all metrics generated from the query. These labels are useful for grouping SLOs in dashboard views that you create by hand.
         * 
         * @return builder
         * 
         */
        public Builder labels(List<SLOAlertingSlowburnLabelArgs> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param labels Additional labels that will be attached to all metrics generated from the query. These labels are useful for grouping SLOs in dashboard views that you create by hand.
         * 
         * @return builder
         * 
         */
        public Builder labels(SLOAlertingSlowburnLabelArgs... labels) {
            return labels(List.of(labels));
        }

        public SLOAlertingSlowburnArgs build() {
            return $;
        }
    }

}
