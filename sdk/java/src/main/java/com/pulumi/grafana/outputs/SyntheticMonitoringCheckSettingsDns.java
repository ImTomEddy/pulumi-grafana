// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.grafana.outputs.SyntheticMonitoringCheckSettingsDnsValidateAdditionalRr;
import com.pulumi.grafana.outputs.SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs;
import com.pulumi.grafana.outputs.SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SyntheticMonitoringCheckSettingsDns {
    /**
     * @return Options are `V4`, `V6`, `Any`. Specifies whether the corresponding check will be performed using IPv4 or IPv6. The `Any` value indicates that IPv6 should be used, falling back to IPv4 if that&#39;s not available. Defaults to `V4`.
     * 
     */
    private @Nullable String ipVersion;
    /**
     * @return Port to target. Defaults to `53`.
     * 
     */
    private @Nullable Integer port;
    /**
     * @return `TCP` or `UDP`. Defaults to `UDP`.
     * 
     */
    private @Nullable String protocol;
    /**
     * @return One of `ANY`, `A`, `AAAA`, `CNAME`, `MX`, `NS`, `PTR`, `SOA`, `SRV`, `TXT`. Defaults to `A`.
     * 
     */
    private @Nullable String recordType;
    /**
     * @return DNS server address to target. Defaults to `8.8.8.8`.
     * 
     */
    private @Nullable String server;
    /**
     * @return Source IP address.
     * 
     */
    private @Nullable String sourceIpAddress;
    /**
     * @return List of valid response codes. Options include `NOERROR`, `BADALG`, `BADMODE`, `BADKEY`, `BADCOOKIE`, `BADNAME`, `BADSIG`, `BADTIME`, `BADTRUNC`, `BADVERS`, `FORMERR`, `NOTIMP`, `NOTAUTH`, `NOTZONE`, `NXDOMAIN`, `NXRRSET`, `REFUSED`, `SERVFAIL`, `YXDOMAIN`, `YXRRSET`.
     * 
     */
    private @Nullable List<String> validRCodes;
    /**
     * @return Validate additional matches.
     * 
     */
    private @Nullable List<SyntheticMonitoringCheckSettingsDnsValidateAdditionalRr> validateAdditionalRrs;
    /**
     * @return Validate response answer.
     * 
     */
    private @Nullable SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs validateAnswerRrs;
    /**
     * @return Validate response authority.
     * 
     */
    private @Nullable SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs validateAuthorityRrs;

    private SyntheticMonitoringCheckSettingsDns() {}
    /**
     * @return Options are `V4`, `V6`, `Any`. Specifies whether the corresponding check will be performed using IPv4 or IPv6. The `Any` value indicates that IPv6 should be used, falling back to IPv4 if that&#39;s not available. Defaults to `V4`.
     * 
     */
    public Optional<String> ipVersion() {
        return Optional.ofNullable(this.ipVersion);
    }
    /**
     * @return Port to target. Defaults to `53`.
     * 
     */
    public Optional<Integer> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return `TCP` or `UDP`. Defaults to `UDP`.
     * 
     */
    public Optional<String> protocol() {
        return Optional.ofNullable(this.protocol);
    }
    /**
     * @return One of `ANY`, `A`, `AAAA`, `CNAME`, `MX`, `NS`, `PTR`, `SOA`, `SRV`, `TXT`. Defaults to `A`.
     * 
     */
    public Optional<String> recordType() {
        return Optional.ofNullable(this.recordType);
    }
    /**
     * @return DNS server address to target. Defaults to `8.8.8.8`.
     * 
     */
    public Optional<String> server() {
        return Optional.ofNullable(this.server);
    }
    /**
     * @return Source IP address.
     * 
     */
    public Optional<String> sourceIpAddress() {
        return Optional.ofNullable(this.sourceIpAddress);
    }
    /**
     * @return List of valid response codes. Options include `NOERROR`, `BADALG`, `BADMODE`, `BADKEY`, `BADCOOKIE`, `BADNAME`, `BADSIG`, `BADTIME`, `BADTRUNC`, `BADVERS`, `FORMERR`, `NOTIMP`, `NOTAUTH`, `NOTZONE`, `NXDOMAIN`, `NXRRSET`, `REFUSED`, `SERVFAIL`, `YXDOMAIN`, `YXRRSET`.
     * 
     */
    public List<String> validRCodes() {
        return this.validRCodes == null ? List.of() : this.validRCodes;
    }
    /**
     * @return Validate additional matches.
     * 
     */
    public List<SyntheticMonitoringCheckSettingsDnsValidateAdditionalRr> validateAdditionalRrs() {
        return this.validateAdditionalRrs == null ? List.of() : this.validateAdditionalRrs;
    }
    /**
     * @return Validate response answer.
     * 
     */
    public Optional<SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs> validateAnswerRrs() {
        return Optional.ofNullable(this.validateAnswerRrs);
    }
    /**
     * @return Validate response authority.
     * 
     */
    public Optional<SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs> validateAuthorityRrs() {
        return Optional.ofNullable(this.validateAuthorityRrs);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SyntheticMonitoringCheckSettingsDns defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String ipVersion;
        private @Nullable Integer port;
        private @Nullable String protocol;
        private @Nullable String recordType;
        private @Nullable String server;
        private @Nullable String sourceIpAddress;
        private @Nullable List<String> validRCodes;
        private @Nullable List<SyntheticMonitoringCheckSettingsDnsValidateAdditionalRr> validateAdditionalRrs;
        private @Nullable SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs validateAnswerRrs;
        private @Nullable SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs validateAuthorityRrs;
        public Builder() {}
        public Builder(SyntheticMonitoringCheckSettingsDns defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ipVersion = defaults.ipVersion;
    	      this.port = defaults.port;
    	      this.protocol = defaults.protocol;
    	      this.recordType = defaults.recordType;
    	      this.server = defaults.server;
    	      this.sourceIpAddress = defaults.sourceIpAddress;
    	      this.validRCodes = defaults.validRCodes;
    	      this.validateAdditionalRrs = defaults.validateAdditionalRrs;
    	      this.validateAnswerRrs = defaults.validateAnswerRrs;
    	      this.validateAuthorityRrs = defaults.validateAuthorityRrs;
        }

        @CustomType.Setter
        public Builder ipVersion(@Nullable String ipVersion) {
            this.ipVersion = ipVersion;
            return this;
        }
        @CustomType.Setter
        public Builder port(@Nullable Integer port) {
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(@Nullable String protocol) {
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder recordType(@Nullable String recordType) {
            this.recordType = recordType;
            return this;
        }
        @CustomType.Setter
        public Builder server(@Nullable String server) {
            this.server = server;
            return this;
        }
        @CustomType.Setter
        public Builder sourceIpAddress(@Nullable String sourceIpAddress) {
            this.sourceIpAddress = sourceIpAddress;
            return this;
        }
        @CustomType.Setter
        public Builder validRCodes(@Nullable List<String> validRCodes) {
            this.validRCodes = validRCodes;
            return this;
        }
        public Builder validRCodes(String... validRCodes) {
            return validRCodes(List.of(validRCodes));
        }
        @CustomType.Setter
        public Builder validateAdditionalRrs(@Nullable List<SyntheticMonitoringCheckSettingsDnsValidateAdditionalRr> validateAdditionalRrs) {
            this.validateAdditionalRrs = validateAdditionalRrs;
            return this;
        }
        public Builder validateAdditionalRrs(SyntheticMonitoringCheckSettingsDnsValidateAdditionalRr... validateAdditionalRrs) {
            return validateAdditionalRrs(List.of(validateAdditionalRrs));
        }
        @CustomType.Setter
        public Builder validateAnswerRrs(@Nullable SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs validateAnswerRrs) {
            this.validateAnswerRrs = validateAnswerRrs;
            return this;
        }
        @CustomType.Setter
        public Builder validateAuthorityRrs(@Nullable SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs validateAuthorityRrs) {
            this.validateAuthorityRrs = validateAuthorityRrs;
            return this;
        }
        public SyntheticMonitoringCheckSettingsDns build() {
            final var o = new SyntheticMonitoringCheckSettingsDns();
            o.ipVersion = ipVersion;
            o.port = port;
            o.protocol = protocol;
            o.recordType = recordType;
            o.server = server;
            o.sourceIpAddress = sourceIpAddress;
            o.validRCodes = validRCodes;
            o.validateAdditionalRrs = validateAdditionalRrs;
            o.validateAnswerRrs = validateAnswerRrs;
            o.validateAuthorityRrs = validateAuthorityRrs;
            return o;
        }
    }
}
