// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.grafana.inputs.DataSourcePermissionPermissionArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataSourcePermissionState extends com.pulumi.resources.ResourceArgs {

    public static final DataSourcePermissionState Empty = new DataSourcePermissionState();

    /**
     * ID of the datasource to apply permissions to.
     * 
     */
    @Import(name="datasourceId")
    private @Nullable Output<String> datasourceId;

    /**
     * @return ID of the datasource to apply permissions to.
     * 
     */
    public Optional<Output<String>> datasourceId() {
        return Optional.ofNullable(this.datasourceId);
    }

    /**
     * The Organization ID. If not set, the Org ID defined in the provider block will be used.
     * 
     */
    @Import(name="orgId")
    private @Nullable Output<String> orgId;

    /**
     * @return The Organization ID. If not set, the Org ID defined in the provider block will be used.
     * 
     */
    public Optional<Output<String>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * The permission items to add/update. Items that are omitted from the list will be removed.
     * 
     */
    @Import(name="permissions")
    private @Nullable Output<List<DataSourcePermissionPermissionArgs>> permissions;

    /**
     * @return The permission items to add/update. Items that are omitted from the list will be removed.
     * 
     */
    public Optional<Output<List<DataSourcePermissionPermissionArgs>>> permissions() {
        return Optional.ofNullable(this.permissions);
    }

    private DataSourcePermissionState() {}

    private DataSourcePermissionState(DataSourcePermissionState $) {
        this.datasourceId = $.datasourceId;
        this.orgId = $.orgId;
        this.permissions = $.permissions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataSourcePermissionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataSourcePermissionState $;

        public Builder() {
            $ = new DataSourcePermissionState();
        }

        public Builder(DataSourcePermissionState defaults) {
            $ = new DataSourcePermissionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param datasourceId ID of the datasource to apply permissions to.
         * 
         * @return builder
         * 
         */
        public Builder datasourceId(@Nullable Output<String> datasourceId) {
            $.datasourceId = datasourceId;
            return this;
        }

        /**
         * @param datasourceId ID of the datasource to apply permissions to.
         * 
         * @return builder
         * 
         */
        public Builder datasourceId(String datasourceId) {
            return datasourceId(Output.of(datasourceId));
        }

        /**
         * @param orgId The Organization ID. If not set, the Org ID defined in the provider block will be used.
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId The Organization ID. If not set, the Org ID defined in the provider block will be used.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param permissions The permission items to add/update. Items that are omitted from the list will be removed.
         * 
         * @return builder
         * 
         */
        public Builder permissions(@Nullable Output<List<DataSourcePermissionPermissionArgs>> permissions) {
            $.permissions = permissions;
            return this;
        }

        /**
         * @param permissions The permission items to add/update. Items that are omitted from the list will be removed.
         * 
         * @return builder
         * 
         */
        public Builder permissions(List<DataSourcePermissionPermissionArgs> permissions) {
            return permissions(Output.of(permissions));
        }

        /**
         * @param permissions The permission items to add/update. Items that are omitted from the list will be removed.
         * 
         * @return builder
         * 
         */
        public Builder permissions(DataSourcePermissionPermissionArgs... permissions) {
            return permissions(List.of(permissions));
        }

        public DataSourcePermissionState build() {
            return $;
        }
    }

}
