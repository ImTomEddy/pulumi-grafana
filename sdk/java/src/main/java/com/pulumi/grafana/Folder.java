// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.grafana.FolderArgs;
import com.pulumi.grafana.Utilities;
import com.pulumi.grafana.inputs.FolderState;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * * [Official documentation](https://grafana.com/docs/grafana/latest/dashboards/manage-dashboards/)
 * * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/folder/)
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.grafana.Folder;
 * import com.pulumi.grafana.FolderArgs;
 * import com.pulumi.grafana.Dashboard;
 * import com.pulumi.grafana.DashboardArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var testFolderFolder = new Folder(&#34;testFolderFolder&#34;, FolderArgs.builder()        
 *             .title(&#34;Terraform Test Folder&#34;)
 *             .build());
 * 
 *         var testFolderDashboard = new Dashboard(&#34;testFolderDashboard&#34;, DashboardArgs.builder()        
 *             .folder(testFolderFolder.id())
 *             .configJson(&#34;&#34;&#34;
 * {
 *   &#34;title&#34;: &#34;Dashboard in folder&#34;,
 *   &#34;uid&#34;: &#34;dashboard-in-folder&#34;
 * }
 *             &#34;&#34;&#34;)
 *             .build());
 * 
 *         var testFolderWithUid = new Folder(&#34;testFolderWithUid&#34;, FolderArgs.builder()        
 *             .uid(&#34;test-folder-uid&#34;)
 *             .title(&#34;Terraform Test Folder With UID&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * ```sh
 *  $ pulumi import grafana:index/folder:Folder by_integer_id {{folder_id}}
 * ```
 * 
 * ```sh
 *  $ pulumi import grafana:index/folder:Folder by_uid {{folder_uid}}
 * ```
 * 
 */
@ResourceType(type="grafana:index/folder:Folder")
public class Folder extends com.pulumi.resources.CustomResource {
    /**
     * Prevent deletion of the folder if it is not empty (contains dashboards or alert rules). Defaults to `false`.
     * 
     */
    @Export(name="preventDestroyIfNotEmpty", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> preventDestroyIfNotEmpty;

    /**
     * @return Prevent deletion of the folder if it is not empty (contains dashboards or alert rules). Defaults to `false`.
     * 
     */
    public Output<Optional<Boolean>> preventDestroyIfNotEmpty() {
        return Codegen.optional(this.preventDestroyIfNotEmpty);
    }
    /**
     * The title of the folder.
     * 
     */
    @Export(name="title", refs={String.class}, tree="[0]")
    private Output<String> title;

    /**
     * @return The title of the folder.
     * 
     */
    public Output<String> title() {
        return this.title;
    }
    /**
     * Unique identifier.
     * 
     */
    @Export(name="uid", refs={String.class}, tree="[0]")
    private Output<String> uid;

    /**
     * @return Unique identifier.
     * 
     */
    public Output<String> uid() {
        return this.uid;
    }
    /**
     * The full URL of the folder.
     * 
     */
    @Export(name="url", refs={String.class}, tree="[0]")
    private Output<String> url;

    /**
     * @return The full URL of the folder.
     * 
     */
    public Output<String> url() {
        return this.url;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Folder(String name) {
        this(name, FolderArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Folder(String name, FolderArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Folder(String name, FolderArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("grafana:index/folder:Folder", name, args == null ? FolderArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Folder(String name, Output<String> id, @Nullable FolderState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("grafana:index/folder:Folder", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Folder get(String name, Output<String> id, @Nullable FolderState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Folder(name, id, state, options);
    }
}
