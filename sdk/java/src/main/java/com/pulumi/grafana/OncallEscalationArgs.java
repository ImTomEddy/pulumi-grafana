// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OncallEscalationArgs extends com.pulumi.resources.ResourceArgs {

    public static final OncallEscalationArgs Empty = new OncallEscalationArgs();

    /**
     * The ID of an Action for trigger_action type step.
     * 
     */
    @Import(name="actionToTrigger")
    private @Nullable Output<String> actionToTrigger;

    /**
     * @return The ID of an Action for trigger_action type step.
     * 
     */
    public Optional<Output<String>> actionToTrigger() {
        return Optional.ofNullable(this.actionToTrigger);
    }

    /**
     * The duration of delay for wait type step.
     * 
     */
    @Import(name="duration")
    private @Nullable Output<Integer> duration;

    /**
     * @return The duration of delay for wait type step.
     * 
     */
    public Optional<Output<Integer>> duration() {
        return Optional.ofNullable(this.duration);
    }

    /**
     * The ID of the escalation chain.
     * 
     */
    @Import(name="escalationChainId", required=true)
    private Output<String> escalationChainId;

    /**
     * @return The ID of the escalation chain.
     * 
     */
    public Output<String> escalationChainId() {
        return this.escalationChainId;
    }

    /**
     * The ID of a User Group for notify*user*group type step.
     * 
     */
    @Import(name="groupToNotify")
    private @Nullable Output<String> groupToNotify;

    /**
     * @return The ID of a User Group for notify*user*group type step.
     * 
     */
    public Optional<Output<String>> groupToNotify() {
        return Optional.ofNullable(this.groupToNotify);
    }

    /**
     * Will activate &#34;important&#34; personal notification rules. Actual for steps: notify*persons, notify*on*call*from*schedule and notify*user_group
     * 
     */
    @Import(name="important")
    private @Nullable Output<Boolean> important;

    /**
     * @return Will activate &#34;important&#34; personal notification rules. Actual for steps: notify*persons, notify*on*call*from*schedule and notify*user_group
     * 
     */
    public Optional<Output<Boolean>> important() {
        return Optional.ofNullable(this.important);
    }

    /**
     * The beginning of the time interval for notify*if*time*from*to type step in UTC (for example 08:00:00Z).
     * 
     */
    @Import(name="notifyIfTimeFrom")
    private @Nullable Output<String> notifyIfTimeFrom;

    /**
     * @return The beginning of the time interval for notify*if*time*from*to type step in UTC (for example 08:00:00Z).
     * 
     */
    public Optional<Output<String>> notifyIfTimeFrom() {
        return Optional.ofNullable(this.notifyIfTimeFrom);
    }

    /**
     * The end of the time interval for notify*if*time*from*to type step in UTC (for example 18:00:00Z).
     * 
     */
    @Import(name="notifyIfTimeTo")
    private @Nullable Output<String> notifyIfTimeTo;

    /**
     * @return The end of the time interval for notify*if*time*from*to type step in UTC (for example 18:00:00Z).
     * 
     */
    public Optional<Output<String>> notifyIfTimeTo() {
        return Optional.ofNullable(this.notifyIfTimeTo);
    }

    /**
     * ID of a Schedule for notify*on*call*from*schedule type step.
     * 
     */
    @Import(name="notifyOnCallFromSchedule")
    private @Nullable Output<String> notifyOnCallFromSchedule;

    /**
     * @return ID of a Schedule for notify*on*call*from*schedule type step.
     * 
     */
    public Optional<Output<String>> notifyOnCallFromSchedule() {
        return Optional.ofNullable(this.notifyOnCallFromSchedule);
    }

    /**
     * The list of ID&#39;s of users for notify_persons type step.
     * 
     */
    @Import(name="personsToNotifies")
    private @Nullable Output<List<String>> personsToNotifies;

    /**
     * @return The list of ID&#39;s of users for notify_persons type step.
     * 
     */
    public Optional<Output<List<String>>> personsToNotifies() {
        return Optional.ofNullable(this.personsToNotifies);
    }

    /**
     * The list of ID&#39;s of users for notify*person*next*each*time type step.
     * 
     */
    @Import(name="personsToNotifyNextEachTimes")
    private @Nullable Output<List<String>> personsToNotifyNextEachTimes;

    /**
     * @return The list of ID&#39;s of users for notify*person*next*each*time type step.
     * 
     */
    public Optional<Output<List<String>>> personsToNotifyNextEachTimes() {
        return Optional.ofNullable(this.personsToNotifyNextEachTimes);
    }

    /**
     * The position of the escalation step (starts from 0).
     * 
     */
    @Import(name="position", required=true)
    private Output<Integer> position;

    /**
     * @return The position of the escalation step (starts from 0).
     * 
     */
    public Output<Integer> position() {
        return this.position;
    }

    /**
     * The type of escalation policy. Can be wait, notify*persons, notify*person*next*each*time, notify*on*call*from*schedule, trigger*action, notify*user*group, resolve, notify*whole*channel, notify*if*time*from*to, repeat_escalation
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of escalation policy. Can be wait, notify*persons, notify*person*next*each*time, notify*on*call*from*schedule, trigger*action, notify*user*group, resolve, notify*whole*channel, notify*if*time*from*to, repeat_escalation
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private OncallEscalationArgs() {}

    private OncallEscalationArgs(OncallEscalationArgs $) {
        this.actionToTrigger = $.actionToTrigger;
        this.duration = $.duration;
        this.escalationChainId = $.escalationChainId;
        this.groupToNotify = $.groupToNotify;
        this.important = $.important;
        this.notifyIfTimeFrom = $.notifyIfTimeFrom;
        this.notifyIfTimeTo = $.notifyIfTimeTo;
        this.notifyOnCallFromSchedule = $.notifyOnCallFromSchedule;
        this.personsToNotifies = $.personsToNotifies;
        this.personsToNotifyNextEachTimes = $.personsToNotifyNextEachTimes;
        this.position = $.position;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OncallEscalationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OncallEscalationArgs $;

        public Builder() {
            $ = new OncallEscalationArgs();
        }

        public Builder(OncallEscalationArgs defaults) {
            $ = new OncallEscalationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param actionToTrigger The ID of an Action for trigger_action type step.
         * 
         * @return builder
         * 
         */
        public Builder actionToTrigger(@Nullable Output<String> actionToTrigger) {
            $.actionToTrigger = actionToTrigger;
            return this;
        }

        /**
         * @param actionToTrigger The ID of an Action for trigger_action type step.
         * 
         * @return builder
         * 
         */
        public Builder actionToTrigger(String actionToTrigger) {
            return actionToTrigger(Output.of(actionToTrigger));
        }

        /**
         * @param duration The duration of delay for wait type step.
         * 
         * @return builder
         * 
         */
        public Builder duration(@Nullable Output<Integer> duration) {
            $.duration = duration;
            return this;
        }

        /**
         * @param duration The duration of delay for wait type step.
         * 
         * @return builder
         * 
         */
        public Builder duration(Integer duration) {
            return duration(Output.of(duration));
        }

        /**
         * @param escalationChainId The ID of the escalation chain.
         * 
         * @return builder
         * 
         */
        public Builder escalationChainId(Output<String> escalationChainId) {
            $.escalationChainId = escalationChainId;
            return this;
        }

        /**
         * @param escalationChainId The ID of the escalation chain.
         * 
         * @return builder
         * 
         */
        public Builder escalationChainId(String escalationChainId) {
            return escalationChainId(Output.of(escalationChainId));
        }

        /**
         * @param groupToNotify The ID of a User Group for notify*user*group type step.
         * 
         * @return builder
         * 
         */
        public Builder groupToNotify(@Nullable Output<String> groupToNotify) {
            $.groupToNotify = groupToNotify;
            return this;
        }

        /**
         * @param groupToNotify The ID of a User Group for notify*user*group type step.
         * 
         * @return builder
         * 
         */
        public Builder groupToNotify(String groupToNotify) {
            return groupToNotify(Output.of(groupToNotify));
        }

        /**
         * @param important Will activate &#34;important&#34; personal notification rules. Actual for steps: notify*persons, notify*on*call*from*schedule and notify*user_group
         * 
         * @return builder
         * 
         */
        public Builder important(@Nullable Output<Boolean> important) {
            $.important = important;
            return this;
        }

        /**
         * @param important Will activate &#34;important&#34; personal notification rules. Actual for steps: notify*persons, notify*on*call*from*schedule and notify*user_group
         * 
         * @return builder
         * 
         */
        public Builder important(Boolean important) {
            return important(Output.of(important));
        }

        /**
         * @param notifyIfTimeFrom The beginning of the time interval for notify*if*time*from*to type step in UTC (for example 08:00:00Z).
         * 
         * @return builder
         * 
         */
        public Builder notifyIfTimeFrom(@Nullable Output<String> notifyIfTimeFrom) {
            $.notifyIfTimeFrom = notifyIfTimeFrom;
            return this;
        }

        /**
         * @param notifyIfTimeFrom The beginning of the time interval for notify*if*time*from*to type step in UTC (for example 08:00:00Z).
         * 
         * @return builder
         * 
         */
        public Builder notifyIfTimeFrom(String notifyIfTimeFrom) {
            return notifyIfTimeFrom(Output.of(notifyIfTimeFrom));
        }

        /**
         * @param notifyIfTimeTo The end of the time interval for notify*if*time*from*to type step in UTC (for example 18:00:00Z).
         * 
         * @return builder
         * 
         */
        public Builder notifyIfTimeTo(@Nullable Output<String> notifyIfTimeTo) {
            $.notifyIfTimeTo = notifyIfTimeTo;
            return this;
        }

        /**
         * @param notifyIfTimeTo The end of the time interval for notify*if*time*from*to type step in UTC (for example 18:00:00Z).
         * 
         * @return builder
         * 
         */
        public Builder notifyIfTimeTo(String notifyIfTimeTo) {
            return notifyIfTimeTo(Output.of(notifyIfTimeTo));
        }

        /**
         * @param notifyOnCallFromSchedule ID of a Schedule for notify*on*call*from*schedule type step.
         * 
         * @return builder
         * 
         */
        public Builder notifyOnCallFromSchedule(@Nullable Output<String> notifyOnCallFromSchedule) {
            $.notifyOnCallFromSchedule = notifyOnCallFromSchedule;
            return this;
        }

        /**
         * @param notifyOnCallFromSchedule ID of a Schedule for notify*on*call*from*schedule type step.
         * 
         * @return builder
         * 
         */
        public Builder notifyOnCallFromSchedule(String notifyOnCallFromSchedule) {
            return notifyOnCallFromSchedule(Output.of(notifyOnCallFromSchedule));
        }

        /**
         * @param personsToNotifies The list of ID&#39;s of users for notify_persons type step.
         * 
         * @return builder
         * 
         */
        public Builder personsToNotifies(@Nullable Output<List<String>> personsToNotifies) {
            $.personsToNotifies = personsToNotifies;
            return this;
        }

        /**
         * @param personsToNotifies The list of ID&#39;s of users for notify_persons type step.
         * 
         * @return builder
         * 
         */
        public Builder personsToNotifies(List<String> personsToNotifies) {
            return personsToNotifies(Output.of(personsToNotifies));
        }

        /**
         * @param personsToNotifies The list of ID&#39;s of users for notify_persons type step.
         * 
         * @return builder
         * 
         */
        public Builder personsToNotifies(String... personsToNotifies) {
            return personsToNotifies(List.of(personsToNotifies));
        }

        /**
         * @param personsToNotifyNextEachTimes The list of ID&#39;s of users for notify*person*next*each*time type step.
         * 
         * @return builder
         * 
         */
        public Builder personsToNotifyNextEachTimes(@Nullable Output<List<String>> personsToNotifyNextEachTimes) {
            $.personsToNotifyNextEachTimes = personsToNotifyNextEachTimes;
            return this;
        }

        /**
         * @param personsToNotifyNextEachTimes The list of ID&#39;s of users for notify*person*next*each*time type step.
         * 
         * @return builder
         * 
         */
        public Builder personsToNotifyNextEachTimes(List<String> personsToNotifyNextEachTimes) {
            return personsToNotifyNextEachTimes(Output.of(personsToNotifyNextEachTimes));
        }

        /**
         * @param personsToNotifyNextEachTimes The list of ID&#39;s of users for notify*person*next*each*time type step.
         * 
         * @return builder
         * 
         */
        public Builder personsToNotifyNextEachTimes(String... personsToNotifyNextEachTimes) {
            return personsToNotifyNextEachTimes(List.of(personsToNotifyNextEachTimes));
        }

        /**
         * @param position The position of the escalation step (starts from 0).
         * 
         * @return builder
         * 
         */
        public Builder position(Output<Integer> position) {
            $.position = position;
            return this;
        }

        /**
         * @param position The position of the escalation step (starts from 0).
         * 
         * @return builder
         * 
         */
        public Builder position(Integer position) {
            return position(Output.of(position));
        }

        /**
         * @param type The type of escalation policy. Can be wait, notify*persons, notify*person*next*each*time, notify*on*call*from*schedule, trigger*action, notify*user*group, resolve, notify*whole*channel, notify*if*time*from*to, repeat_escalation
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of escalation policy. Can be wait, notify*persons, notify*person*next*each*time, notify*on*call*from*schedule, trigger*action, notify*user*group, resolve, notify*whole*channel, notify*if*time*from*to, repeat_escalation
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public OncallEscalationArgs build() {
            $.escalationChainId = Objects.requireNonNull($.escalationChainId, "expected parameter 'escalationChainId' to be non-null");
            $.position = Objects.requireNonNull($.position, "expected parameter 'position' to be non-null");
            return $;
        }
    }

}
