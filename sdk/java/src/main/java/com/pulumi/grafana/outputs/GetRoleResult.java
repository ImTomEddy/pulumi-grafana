// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.grafana.outputs.GetRolePermission;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetRoleResult {
    /**
     * @return Description of the role.
     * 
     */
    private String description;
    /**
     * @return Display name of the role. Available with Grafana 8.5+.
     * 
     */
    private String displayName;
    /**
     * @return Boolean to state whether the role is available across all organizations or not.
     * 
     */
    private Boolean global;
    /**
     * @return Group of the role. Available with Grafana 8.5+.
     * 
     */
    private String group;
    /**
     * @return Boolean to state whether the role should be visible in the Grafana UI or not. Available with Grafana 8.5+.
     * 
     */
    private Boolean hidden;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Name of the role
     * 
     */
    private String name;
    /**
     * @return The Organization ID. If not set, the Org ID defined in the provider block will be used.
     * 
     */
    private String orgId;
    /**
     * @return Specific set of actions granted by the role.
     * 
     */
    private List<GetRolePermission> permissions;
    /**
     * @return Unique identifier of the role. Used for assignments.
     * 
     */
    private String uid;
    /**
     * @return Version of the role. A role is updated only on version increase. This field or `auto_increment_version` should be set.
     * 
     */
    private Integer version;

    private GetRoleResult() {}
    /**
     * @return Description of the role.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Display name of the role. Available with Grafana 8.5+.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Boolean to state whether the role is available across all organizations or not.
     * 
     */
    public Boolean global() {
        return this.global;
    }
    /**
     * @return Group of the role. Available with Grafana 8.5+.
     * 
     */
    public String group() {
        return this.group;
    }
    /**
     * @return Boolean to state whether the role should be visible in the Grafana UI or not. Available with Grafana 8.5+.
     * 
     */
    public Boolean hidden() {
        return this.hidden;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Name of the role
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The Organization ID. If not set, the Org ID defined in the provider block will be used.
     * 
     */
    public String orgId() {
        return this.orgId;
    }
    /**
     * @return Specific set of actions granted by the role.
     * 
     */
    public List<GetRolePermission> permissions() {
        return this.permissions;
    }
    /**
     * @return Unique identifier of the role. Used for assignments.
     * 
     */
    public String uid() {
        return this.uid;
    }
    /**
     * @return Version of the role. A role is updated only on version increase. This field or `auto_increment_version` should be set.
     * 
     */
    public Integer version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRoleResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String description;
        private String displayName;
        private Boolean global;
        private String group;
        private Boolean hidden;
        private String id;
        private String name;
        private String orgId;
        private List<GetRolePermission> permissions;
        private String uid;
        private Integer version;
        public Builder() {}
        public Builder(GetRoleResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.global = defaults.global;
    	      this.group = defaults.group;
    	      this.hidden = defaults.hidden;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.orgId = defaults.orgId;
    	      this.permissions = defaults.permissions;
    	      this.uid = defaults.uid;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder global(Boolean global) {
            this.global = Objects.requireNonNull(global);
            return this;
        }
        @CustomType.Setter
        public Builder group(String group) {
            this.group = Objects.requireNonNull(group);
            return this;
        }
        @CustomType.Setter
        public Builder hidden(Boolean hidden) {
            this.hidden = Objects.requireNonNull(hidden);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder orgId(String orgId) {
            this.orgId = Objects.requireNonNull(orgId);
            return this;
        }
        @CustomType.Setter
        public Builder permissions(List<GetRolePermission> permissions) {
            this.permissions = Objects.requireNonNull(permissions);
            return this;
        }
        public Builder permissions(GetRolePermission... permissions) {
            return permissions(List.of(permissions));
        }
        @CustomType.Setter
        public Builder uid(String uid) {
            this.uid = Objects.requireNonNull(uid);
            return this;
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }
        public GetRoleResult build() {
            final var o = new GetRoleResult();
            o.description = description;
            o.displayName = displayName;
            o.global = global;
            o.group = group;
            o.hidden = hidden;
            o.id = id;
            o.name = name;
            o.orgId = orgId;
            o.permissions = permissions;
            o.uid = uid;
            o.version = version;
            return o;
        }
    }
}
