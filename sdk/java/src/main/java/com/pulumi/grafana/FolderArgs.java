// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FolderArgs extends com.pulumi.resources.ResourceArgs {

    public static final FolderArgs Empty = new FolderArgs();

    /**
     * Prevent deletion of the folder if it is not empty (contains dashboards or alert rules). Defaults to `false`.
     * 
     */
    @Import(name="preventDestroyIfNotEmpty")
    private @Nullable Output<Boolean> preventDestroyIfNotEmpty;

    /**
     * @return Prevent deletion of the folder if it is not empty (contains dashboards or alert rules). Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> preventDestroyIfNotEmpty() {
        return Optional.ofNullable(this.preventDestroyIfNotEmpty);
    }

    /**
     * The title of the folder.
     * 
     */
    @Import(name="title", required=true)
    private Output<String> title;

    /**
     * @return The title of the folder.
     * 
     */
    public Output<String> title() {
        return this.title;
    }

    /**
     * Unique identifier.
     * 
     */
    @Import(name="uid")
    private @Nullable Output<String> uid;

    /**
     * @return Unique identifier.
     * 
     */
    public Optional<Output<String>> uid() {
        return Optional.ofNullable(this.uid);
    }

    private FolderArgs() {}

    private FolderArgs(FolderArgs $) {
        this.preventDestroyIfNotEmpty = $.preventDestroyIfNotEmpty;
        this.title = $.title;
        this.uid = $.uid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FolderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FolderArgs $;

        public Builder() {
            $ = new FolderArgs();
        }

        public Builder(FolderArgs defaults) {
            $ = new FolderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param preventDestroyIfNotEmpty Prevent deletion of the folder if it is not empty (contains dashboards or alert rules). Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder preventDestroyIfNotEmpty(@Nullable Output<Boolean> preventDestroyIfNotEmpty) {
            $.preventDestroyIfNotEmpty = preventDestroyIfNotEmpty;
            return this;
        }

        /**
         * @param preventDestroyIfNotEmpty Prevent deletion of the folder if it is not empty (contains dashboards or alert rules). Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder preventDestroyIfNotEmpty(Boolean preventDestroyIfNotEmpty) {
            return preventDestroyIfNotEmpty(Output.of(preventDestroyIfNotEmpty));
        }

        /**
         * @param title The title of the folder.
         * 
         * @return builder
         * 
         */
        public Builder title(Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title The title of the folder.
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        /**
         * @param uid Unique identifier.
         * 
         * @return builder
         * 
         */
        public Builder uid(@Nullable Output<String> uid) {
            $.uid = uid;
            return this;
        }

        /**
         * @param uid Unique identifier.
         * 
         * @return builder
         * 
         */
        public Builder uid(String uid) {
            return uid(Output.of(uid));
        }

        public FolderArgs build() {
            $.title = Objects.requireNonNull($.title, "expected parameter 'title' to be non-null");
            return $;
        }
    }

}
