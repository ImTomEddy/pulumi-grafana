// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.grafana.inputs.ReportScheduleArgs;
import com.pulumi.grafana.inputs.ReportTimeRangeArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReportState extends com.pulumi.resources.ResourceArgs {

    public static final ReportState Empty = new ReportState();

    /**
     * Dashboard to be sent in the report. This field is deprecated, use `dashboard_uid` instead.
     * 
     * @deprecated
     * Use dashboard_uid instead
     * 
     */
    @Deprecated /* Use dashboard_uid instead */
    @Import(name="dashboardId")
    private @Nullable Output<Integer> dashboardId;

    /**
     * @return Dashboard to be sent in the report. This field is deprecated, use `dashboard_uid` instead.
     * 
     * @deprecated
     * Use dashboard_uid instead
     * 
     */
    @Deprecated /* Use dashboard_uid instead */
    public Optional<Output<Integer>> dashboardId() {
        return Optional.ofNullable(this.dashboardId);
    }

    /**
     * Dashboard to be sent in the report.
     * 
     */
    @Import(name="dashboardUid")
    private @Nullable Output<String> dashboardUid;

    /**
     * @return Dashboard to be sent in the report.
     * 
     */
    public Optional<Output<String>> dashboardUid() {
        return Optional.ofNullable(this.dashboardUid);
    }

    /**
     * Specifies what kind of attachment to generate for the report. Allowed values: `pdf`, `csv`, `image`.
     * 
     */
    @Import(name="formats")
    private @Nullable Output<List<String>> formats;

    /**
     * @return Specifies what kind of attachment to generate for the report. Allowed values: `pdf`, `csv`, `image`.
     * 
     */
    public Optional<Output<List<String>>> formats() {
        return Optional.ofNullable(this.formats);
    }

    /**
     * Whether to include a link to the dashboard in the report. Defaults to `true`.
     * 
     */
    @Import(name="includeDashboardLink")
    private @Nullable Output<Boolean> includeDashboardLink;

    /**
     * @return Whether to include a link to the dashboard in the report. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> includeDashboardLink() {
        return Optional.ofNullable(this.includeDashboardLink);
    }

    /**
     * Whether to include a CSV file of table panel data. Defaults to `false`.
     * 
     */
    @Import(name="includeTableCsv")
    private @Nullable Output<Boolean> includeTableCsv;

    /**
     * @return Whether to include a CSV file of table panel data. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> includeTableCsv() {
        return Optional.ofNullable(this.includeTableCsv);
    }

    /**
     * Layout of the report. Allowed values: `simple`, `grid`. Defaults to `grid`.
     * 
     */
    @Import(name="layout")
    private @Nullable Output<String> layout;

    /**
     * @return Layout of the report. Allowed values: `simple`, `grid`. Defaults to `grid`.
     * 
     */
    public Optional<Output<String>> layout() {
        return Optional.ofNullable(this.layout);
    }

    /**
     * Message to be sent in the report.
     * 
     */
    @Import(name="message")
    private @Nullable Output<String> message;

    /**
     * @return Message to be sent in the report.
     * 
     */
    public Optional<Output<String>> message() {
        return Optional.ofNullable(this.message);
    }

    /**
     * Name of the report.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the report.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The Organization ID. If not set, the Org ID defined in the provider block will be used.
     * 
     */
    @Import(name="orgId")
    private @Nullable Output<String> orgId;

    /**
     * @return The Organization ID. If not set, the Org ID defined in the provider block will be used.
     * 
     */
    public Optional<Output<String>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * Orientation of the report. Allowed values: `landscape`, `portrait`. Defaults to `landscape`.
     * 
     */
    @Import(name="orientation")
    private @Nullable Output<String> orientation;

    /**
     * @return Orientation of the report. Allowed values: `landscape`, `portrait`. Defaults to `landscape`.
     * 
     */
    public Optional<Output<String>> orientation() {
        return Optional.ofNullable(this.orientation);
    }

    /**
     * List of recipients of the report.
     * 
     */
    @Import(name="recipients")
    private @Nullable Output<List<String>> recipients;

    /**
     * @return List of recipients of the report.
     * 
     */
    public Optional<Output<List<String>>> recipients() {
        return Optional.ofNullable(this.recipients);
    }

    /**
     * Reply-to email address of the report.
     * 
     */
    @Import(name="replyTo")
    private @Nullable Output<String> replyTo;

    /**
     * @return Reply-to email address of the report.
     * 
     */
    public Optional<Output<String>> replyTo() {
        return Optional.ofNullable(this.replyTo);
    }

    /**
     * Schedule of the report.
     * 
     */
    @Import(name="schedule")
    private @Nullable Output<ReportScheduleArgs> schedule;

    /**
     * @return Schedule of the report.
     * 
     */
    public Optional<Output<ReportScheduleArgs>> schedule() {
        return Optional.ofNullable(this.schedule);
    }

    /**
     * Time range of the report.
     * 
     */
    @Import(name="timeRange")
    private @Nullable Output<ReportTimeRangeArgs> timeRange;

    /**
     * @return Time range of the report.
     * 
     */
    public Optional<Output<ReportTimeRangeArgs>> timeRange() {
        return Optional.ofNullable(this.timeRange);
    }

    private ReportState() {}

    private ReportState(ReportState $) {
        this.dashboardId = $.dashboardId;
        this.dashboardUid = $.dashboardUid;
        this.formats = $.formats;
        this.includeDashboardLink = $.includeDashboardLink;
        this.includeTableCsv = $.includeTableCsv;
        this.layout = $.layout;
        this.message = $.message;
        this.name = $.name;
        this.orgId = $.orgId;
        this.orientation = $.orientation;
        this.recipients = $.recipients;
        this.replyTo = $.replyTo;
        this.schedule = $.schedule;
        this.timeRange = $.timeRange;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReportState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReportState $;

        public Builder() {
            $ = new ReportState();
        }

        public Builder(ReportState defaults) {
            $ = new ReportState(Objects.requireNonNull(defaults));
        }

        /**
         * @param dashboardId Dashboard to be sent in the report. This field is deprecated, use `dashboard_uid` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Use dashboard_uid instead
         * 
         */
        @Deprecated /* Use dashboard_uid instead */
        public Builder dashboardId(@Nullable Output<Integer> dashboardId) {
            $.dashboardId = dashboardId;
            return this;
        }

        /**
         * @param dashboardId Dashboard to be sent in the report. This field is deprecated, use `dashboard_uid` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Use dashboard_uid instead
         * 
         */
        @Deprecated /* Use dashboard_uid instead */
        public Builder dashboardId(Integer dashboardId) {
            return dashboardId(Output.of(dashboardId));
        }

        /**
         * @param dashboardUid Dashboard to be sent in the report.
         * 
         * @return builder
         * 
         */
        public Builder dashboardUid(@Nullable Output<String> dashboardUid) {
            $.dashboardUid = dashboardUid;
            return this;
        }

        /**
         * @param dashboardUid Dashboard to be sent in the report.
         * 
         * @return builder
         * 
         */
        public Builder dashboardUid(String dashboardUid) {
            return dashboardUid(Output.of(dashboardUid));
        }

        /**
         * @param formats Specifies what kind of attachment to generate for the report. Allowed values: `pdf`, `csv`, `image`.
         * 
         * @return builder
         * 
         */
        public Builder formats(@Nullable Output<List<String>> formats) {
            $.formats = formats;
            return this;
        }

        /**
         * @param formats Specifies what kind of attachment to generate for the report. Allowed values: `pdf`, `csv`, `image`.
         * 
         * @return builder
         * 
         */
        public Builder formats(List<String> formats) {
            return formats(Output.of(formats));
        }

        /**
         * @param formats Specifies what kind of attachment to generate for the report. Allowed values: `pdf`, `csv`, `image`.
         * 
         * @return builder
         * 
         */
        public Builder formats(String... formats) {
            return formats(List.of(formats));
        }

        /**
         * @param includeDashboardLink Whether to include a link to the dashboard in the report. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder includeDashboardLink(@Nullable Output<Boolean> includeDashboardLink) {
            $.includeDashboardLink = includeDashboardLink;
            return this;
        }

        /**
         * @param includeDashboardLink Whether to include a link to the dashboard in the report. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder includeDashboardLink(Boolean includeDashboardLink) {
            return includeDashboardLink(Output.of(includeDashboardLink));
        }

        /**
         * @param includeTableCsv Whether to include a CSV file of table panel data. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder includeTableCsv(@Nullable Output<Boolean> includeTableCsv) {
            $.includeTableCsv = includeTableCsv;
            return this;
        }

        /**
         * @param includeTableCsv Whether to include a CSV file of table panel data. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder includeTableCsv(Boolean includeTableCsv) {
            return includeTableCsv(Output.of(includeTableCsv));
        }

        /**
         * @param layout Layout of the report. Allowed values: `simple`, `grid`. Defaults to `grid`.
         * 
         * @return builder
         * 
         */
        public Builder layout(@Nullable Output<String> layout) {
            $.layout = layout;
            return this;
        }

        /**
         * @param layout Layout of the report. Allowed values: `simple`, `grid`. Defaults to `grid`.
         * 
         * @return builder
         * 
         */
        public Builder layout(String layout) {
            return layout(Output.of(layout));
        }

        /**
         * @param message Message to be sent in the report.
         * 
         * @return builder
         * 
         */
        public Builder message(@Nullable Output<String> message) {
            $.message = message;
            return this;
        }

        /**
         * @param message Message to be sent in the report.
         * 
         * @return builder
         * 
         */
        public Builder message(String message) {
            return message(Output.of(message));
        }

        /**
         * @param name Name of the report.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the report.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param orgId The Organization ID. If not set, the Org ID defined in the provider block will be used.
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId The Organization ID. If not set, the Org ID defined in the provider block will be used.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param orientation Orientation of the report. Allowed values: `landscape`, `portrait`. Defaults to `landscape`.
         * 
         * @return builder
         * 
         */
        public Builder orientation(@Nullable Output<String> orientation) {
            $.orientation = orientation;
            return this;
        }

        /**
         * @param orientation Orientation of the report. Allowed values: `landscape`, `portrait`. Defaults to `landscape`.
         * 
         * @return builder
         * 
         */
        public Builder orientation(String orientation) {
            return orientation(Output.of(orientation));
        }

        /**
         * @param recipients List of recipients of the report.
         * 
         * @return builder
         * 
         */
        public Builder recipients(@Nullable Output<List<String>> recipients) {
            $.recipients = recipients;
            return this;
        }

        /**
         * @param recipients List of recipients of the report.
         * 
         * @return builder
         * 
         */
        public Builder recipients(List<String> recipients) {
            return recipients(Output.of(recipients));
        }

        /**
         * @param recipients List of recipients of the report.
         * 
         * @return builder
         * 
         */
        public Builder recipients(String... recipients) {
            return recipients(List.of(recipients));
        }

        /**
         * @param replyTo Reply-to email address of the report.
         * 
         * @return builder
         * 
         */
        public Builder replyTo(@Nullable Output<String> replyTo) {
            $.replyTo = replyTo;
            return this;
        }

        /**
         * @param replyTo Reply-to email address of the report.
         * 
         * @return builder
         * 
         */
        public Builder replyTo(String replyTo) {
            return replyTo(Output.of(replyTo));
        }

        /**
         * @param schedule Schedule of the report.
         * 
         * @return builder
         * 
         */
        public Builder schedule(@Nullable Output<ReportScheduleArgs> schedule) {
            $.schedule = schedule;
            return this;
        }

        /**
         * @param schedule Schedule of the report.
         * 
         * @return builder
         * 
         */
        public Builder schedule(ReportScheduleArgs schedule) {
            return schedule(Output.of(schedule));
        }

        /**
         * @param timeRange Time range of the report.
         * 
         * @return builder
         * 
         */
        public Builder timeRange(@Nullable Output<ReportTimeRangeArgs> timeRange) {
            $.timeRange = timeRange;
            return this;
        }

        /**
         * @param timeRange Time range of the report.
         * 
         * @return builder
         * 
         */
        public Builder timeRange(ReportTimeRangeArgs timeRange) {
            return timeRange(Output.of(timeRange));
        }

        public ReportState build() {
            return $;
        }
    }

}
