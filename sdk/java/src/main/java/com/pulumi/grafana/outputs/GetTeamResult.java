// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.grafana.outputs.GetTeamPreference;
import com.pulumi.grafana.outputs.GetTeamTeamSync;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetTeamResult {
    private String email;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private List<String> members;
    private String name;
    private @Nullable String orgId;
    private List<GetTeamPreference> preferences;
    private @Nullable Boolean readTeamSync;
    private Integer teamId;
    private List<GetTeamTeamSync> teamSyncs;

    private GetTeamResult() {}
    public String email() {
        return this.email;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public List<String> members() {
        return this.members;
    }
    public String name() {
        return this.name;
    }
    public Optional<String> orgId() {
        return Optional.ofNullable(this.orgId);
    }
    public List<GetTeamPreference> preferences() {
        return this.preferences;
    }
    public Optional<Boolean> readTeamSync() {
        return Optional.ofNullable(this.readTeamSync);
    }
    public Integer teamId() {
        return this.teamId;
    }
    public List<GetTeamTeamSync> teamSyncs() {
        return this.teamSyncs;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTeamResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String email;
        private String id;
        private List<String> members;
        private String name;
        private @Nullable String orgId;
        private List<GetTeamPreference> preferences;
        private @Nullable Boolean readTeamSync;
        private Integer teamId;
        private List<GetTeamTeamSync> teamSyncs;
        public Builder() {}
        public Builder(GetTeamResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.email = defaults.email;
    	      this.id = defaults.id;
    	      this.members = defaults.members;
    	      this.name = defaults.name;
    	      this.orgId = defaults.orgId;
    	      this.preferences = defaults.preferences;
    	      this.readTeamSync = defaults.readTeamSync;
    	      this.teamId = defaults.teamId;
    	      this.teamSyncs = defaults.teamSyncs;
        }

        @CustomType.Setter
        public Builder email(String email) {
            this.email = Objects.requireNonNull(email);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder members(List<String> members) {
            this.members = Objects.requireNonNull(members);
            return this;
        }
        public Builder members(String... members) {
            return members(List.of(members));
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder orgId(@Nullable String orgId) {
            this.orgId = orgId;
            return this;
        }
        @CustomType.Setter
        public Builder preferences(List<GetTeamPreference> preferences) {
            this.preferences = Objects.requireNonNull(preferences);
            return this;
        }
        public Builder preferences(GetTeamPreference... preferences) {
            return preferences(List.of(preferences));
        }
        @CustomType.Setter
        public Builder readTeamSync(@Nullable Boolean readTeamSync) {
            this.readTeamSync = readTeamSync;
            return this;
        }
        @CustomType.Setter
        public Builder teamId(Integer teamId) {
            this.teamId = Objects.requireNonNull(teamId);
            return this;
        }
        @CustomType.Setter
        public Builder teamSyncs(List<GetTeamTeamSync> teamSyncs) {
            this.teamSyncs = Objects.requireNonNull(teamSyncs);
            return this;
        }
        public Builder teamSyncs(GetTeamTeamSync... teamSyncs) {
            return teamSyncs(List.of(teamSyncs));
        }
        public GetTeamResult build() {
            final var o = new GetTeamResult();
            o.email = email;
            o.id = id;
            o.members = members;
            o.name = name;
            o.orgId = orgId;
            o.preferences = preferences;
            o.readTeamSync = readTeamSync;
            o.teamId = teamId;
            o.teamSyncs = teamSyncs;
            return o;
        }
    }
}
