// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceAccountTokenState extends com.pulumi.resources.ResourceArgs {

    public static final ServiceAccountTokenState Empty = new ServiceAccountTokenState();

    @Import(name="expiration")
    private @Nullable Output<String> expiration;

    public Optional<Output<String>> expiration() {
        return Optional.ofNullable(this.expiration);
    }

    @Import(name="hasExpired")
    private @Nullable Output<Boolean> hasExpired;

    public Optional<Output<Boolean>> hasExpired() {
        return Optional.ofNullable(this.hasExpired);
    }

    @Import(name="key")
    private @Nullable Output<String> key;

    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="secondsToLive")
    private @Nullable Output<Integer> secondsToLive;

    public Optional<Output<Integer>> secondsToLive() {
        return Optional.ofNullable(this.secondsToLive);
    }

    @Import(name="serviceAccountId")
    private @Nullable Output<String> serviceAccountId;

    public Optional<Output<String>> serviceAccountId() {
        return Optional.ofNullable(this.serviceAccountId);
    }

    private ServiceAccountTokenState() {}

    private ServiceAccountTokenState(ServiceAccountTokenState $) {
        this.expiration = $.expiration;
        this.hasExpired = $.hasExpired;
        this.key = $.key;
        this.name = $.name;
        this.secondsToLive = $.secondsToLive;
        this.serviceAccountId = $.serviceAccountId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceAccountTokenState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceAccountTokenState $;

        public Builder() {
            $ = new ServiceAccountTokenState();
        }

        public Builder(ServiceAccountTokenState defaults) {
            $ = new ServiceAccountTokenState(Objects.requireNonNull(defaults));
        }

        public Builder expiration(@Nullable Output<String> expiration) {
            $.expiration = expiration;
            return this;
        }

        public Builder expiration(String expiration) {
            return expiration(Output.of(expiration));
        }

        public Builder hasExpired(@Nullable Output<Boolean> hasExpired) {
            $.hasExpired = hasExpired;
            return this;
        }

        public Builder hasExpired(Boolean hasExpired) {
            return hasExpired(Output.of(hasExpired));
        }

        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        public Builder key(String key) {
            return key(Output.of(key));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder secondsToLive(@Nullable Output<Integer> secondsToLive) {
            $.secondsToLive = secondsToLive;
            return this;
        }

        public Builder secondsToLive(Integer secondsToLive) {
            return secondsToLive(Output.of(secondsToLive));
        }

        public Builder serviceAccountId(@Nullable Output<String> serviceAccountId) {
            $.serviceAccountId = serviceAccountId;
            return this;
        }

        public Builder serviceAccountId(String serviceAccountId) {
            return serviceAccountId(Output.of(serviceAccountId));
        }

        public ServiceAccountTokenState build() {
            return $;
        }
    }

}
