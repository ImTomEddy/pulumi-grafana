// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.grafana.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.grafana.outputs.DataSourceJsonDataDerivedField;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DataSourceJsonData {
    /**
     * @return (CloudWatch, Athena) The ARN of the role to be assumed by Grafana when using the CloudWatch or Athena data source.
     * 
     */
    private @Nullable String assumeRoleArn;
    /**
     * @return (CloudWatch, Athena) The authentication type used to access the data source.
     * 
     */
    private @Nullable String authType;
    /**
     * @return (Stackdriver) The authentication type: `jwt` or `gce`.
     * 
     */
    private @Nullable String authenticationType;
    /**
     * @return (Athena) Athena catalog.
     * 
     */
    private @Nullable String catalog;
    /**
     * @return (Stackdriver) Service account email address.
     * 
     */
    private @Nullable String clientEmail;
    /**
     * @return (Azure Monitor) The service account client id.
     * 
     */
    private @Nullable String clientId;
    /**
     * @return (Azure Monitor) The cloud name.
     * 
     */
    private @Nullable String cloudName;
    /**
     * @return (MySQL, PostgreSQL, and MSSQL) Maximum amount of time in seconds a connection may be reused (Grafana v5.4+).
     * 
     */
    private @Nullable Integer connMaxLifetime;
    /**
     * @return (CloudWatch) A comma-separated list of custom namespaces to be queried by the CloudWatch data source.
     * 
     */
    private @Nullable String customMetricsNamespaces;
    /**
     * @return (Athena) Name of the database within the catalog.
     * 
     */
    private @Nullable String database;
    /**
     * @return (InfluxDB) The default bucket for the data source.
     * 
     */
    private @Nullable String defaultBucket;
    /**
     * @return (Stackdriver) The default project for the data source.
     * 
     */
    private @Nullable String defaultProject;
    /**
     * @return (CloudWatch, Athena) The default region for the data source.
     * 
     */
    private @Nullable String defaultRegion;
    /**
     * @return (Loki) See https://grafana.com/docs/grafana/latest/datasources/loki/#derived-fields
     * 
     */
    private @Nullable List<DataSourceJsonDataDerivedField> derivedFields;
    /**
     * @return (MSSQL) Connection SSL encryption handling: &#39;disable&#39;, &#39;false&#39; or &#39;true&#39;.
     * 
     */
    private @Nullable String encrypt;
    /**
     * @return (Elasticsearch) Elasticsearch semantic version (Grafana v8.0+).
     * 
     */
    private @Nullable String esVersion;
    /**
     * @return (CloudWatch, Athena) If you are assuming a role in another account, that has been created with an external ID, specify the external ID here.
     * 
     */
    private @Nullable String externalId;
    /**
     * @return (Github) Github URL
     * 
     */
    private @Nullable String githubUrl;
    /**
     * @return (Graphite) Graphite version.
     * 
     */
    private @Nullable String graphiteVersion;
    /**
     * @return (Prometheus) HTTP method to use for making requests.
     * 
     */
    private @Nullable String httpMethod;
    /**
     * @return (Alertmanager) Implementation of Alertmanager. Either &#39;cortex&#39; or &#39;prometheus&#39;
     * 
     */
    private @Nullable String implementation;
    /**
     * @return (Elasticsearch) Index date time format. nil(No Pattern), &#39;Hourly&#39;, &#39;Daily&#39;, &#39;Weekly&#39;, &#39;Monthly&#39; or &#39;Yearly&#39;.
     * 
     */
    private @Nullable String interval;
    /**
     * @return (Elasticsearch) Which field should be used to indicate the priority of the log message.
     * 
     */
    private @Nullable String logLevelField;
    /**
     * @return (Elasticsearch) Which field should be used as the log message.
     * 
     */
    private @Nullable String logMessageField;
    /**
     * @return (Prometheus) Manage alerts.
     * 
     */
    private @Nullable Boolean manageAlerts;
    /**
     * @return (Elasticsearch) Maximum number of concurrent shard requests.
     * 
     */
    private @Nullable Integer maxConcurrentShardRequests;
    /**
     * @return (MySQL, PostgreSQL and MSSQL) Maximum number of connections in the idle connection pool (Grafana v5.4+).
     * 
     */
    private @Nullable Integer maxIdleConns;
    /**
     * @return (Loki) Upper limit for the number of log lines returned by Loki
     * 
     */
    private @Nullable Integer maxLines;
    /**
     * @return (MySQL, PostgreSQL and MSSQL) Maximum number of open connections to the database (Grafana v5.4+).
     * 
     */
    private @Nullable Integer maxOpenConns;
    /**
     * @return (Sentry) Organization slug.
     * 
     */
    private @Nullable String orgSlug;
    /**
     * @return (InfluxDB) An organization is a workspace for a group of users. All dashboards, tasks, buckets, members, etc., belong to an organization.
     * 
     */
    private @Nullable String organization;
    /**
     * @return (Athena) AWS S3 bucket to store execution outputs. If not specified, the default query result location from the Workgroup configuration will be used.
     * 
     */
    private @Nullable String outputLocation;
    /**
     * @return (PostgreSQL) Postgres version as a number (903/904/905/906/1000) meaning v9.3, v9.4, etc.
     * 
     */
    private @Nullable Integer postgresVersion;
    /**
     * @return (CloudWatch, Athena) The credentials profile name to use when authentication type is set as &#39;Credentials file&#39;.
     * 
     */
    private @Nullable String profile;
    /**
     * @return (Prometheus) Timeout for queries made to the Prometheus data source in seconds.
     * 
     */
    private @Nullable String queryTimeout;
    /**
     * @return (Elasticsearch and Prometheus) Specifies the ARN of an IAM role to assume.
     * 
     */
    private @Nullable String sigv4AssumeRoleArn;
    /**
     * @return (Elasticsearch and Prometheus) Enable usage of SigV4.
     * 
     */
    private @Nullable Boolean sigv4Auth;
    /**
     * @return (Elasticsearch and Prometheus) The Sigv4 authentication provider to use: &#39;default&#39;, &#39;credentials&#39; or &#39;keys&#39; (AMG: &#39;workspace-iam-role&#39;).
     * 
     */
    private @Nullable String sigv4AuthType;
    /**
     * @return (Elasticsearch and Prometheus) When assuming a role in another account use this external ID.
     * 
     */
    private @Nullable String sigv4ExternalId;
    /**
     * @return (Elasticsearch and Prometheus) Credentials profile name, leave blank for default.
     * 
     */
    private @Nullable String sigv4Profile;
    /**
     * @return (Elasticsearch and Prometheus) AWS region to use for Sigv4.
     * 
     */
    private @Nullable String sigv4Region;
    /**
     * @return (PostgreSQL) SSLmode. &#39;disable&#39;, &#39;require&#39;, &#39;verify-ca&#39; or &#39;verify-full&#39;.
     * 
     */
    private @Nullable String sslMode;
    /**
     * @return (Azure Monitor) The subscription id
     * 
     */
    private @Nullable String subscriptionId;
    /**
     * @return (Azure Monitor) Service account tenant ID.
     * 
     */
    private @Nullable String tenantId;
    /**
     * @return (Elasticsearch) Which field that should be used as timestamp.
     * 
     */
    private @Nullable String timeField;
    /**
     * @return (Prometheus, Elasticsearch, InfluxDB, MySQL, PostgreSQL, and MSSQL) Lowest interval/step value that should be used for this data source. Sometimes called &#34;Scrape Interval&#34; in the Grafana UI.
     * 
     */
    private @Nullable String timeInterval;
    /**
     * @return (PostgreSQL) Enable usage of TimescaleDB extension.
     * 
     */
    private @Nullable Boolean timescaledb;
    /**
     * @return (All) Enable TLS authentication using client cert configured in secure json data.
     * 
     */
    private @Nullable Boolean tlsAuth;
    /**
     * @return (All) Enable TLS authentication using CA cert.
     * 
     */
    private @Nullable Boolean tlsAuthWithCaCert;
    /**
     * @return (All) SSL Certificate configuration, either by ‘file-path’ or ‘file-content’.
     * 
     */
    private @Nullable String tlsConfigurationMethod;
    /**
     * @return (All) Controls whether a client verifies the server’s certificate chain and host name.
     * 
     */
    private @Nullable Boolean tlsSkipVerify;
    /**
     * @return (Stackdriver) The token URI used, provided in the service account key.
     * 
     */
    private @Nullable String tokenUri;
    /**
     * @return (Cloudwatch) The X-Ray datasource uid to associate to this Cloudwatch datasource.
     * 
     */
    private @Nullable String tracingDatasourceUid;
    /**
     * @return (OpenTSDB) Resolution.
     * 
     */
    private @Nullable Integer tsdbResolution;
    /**
     * @return (OpenTSDB) Version.
     * 
     */
    private @Nullable Integer tsdbVersion;
    /**
     * @return (InfluxDB) InfluxQL or Flux.
     * 
     */
    private @Nullable String version;
    /**
     * @return (Athena) Workgroup to use.
     * 
     */
    private @Nullable String workgroup;
    /**
     * @return (Elasticsearch) Enable X-Pack support.
     * 
     */
    private @Nullable Boolean xpackEnabled;

    private DataSourceJsonData() {}
    /**
     * @return (CloudWatch, Athena) The ARN of the role to be assumed by Grafana when using the CloudWatch or Athena data source.
     * 
     */
    public Optional<String> assumeRoleArn() {
        return Optional.ofNullable(this.assumeRoleArn);
    }
    /**
     * @return (CloudWatch, Athena) The authentication type used to access the data source.
     * 
     */
    public Optional<String> authType() {
        return Optional.ofNullable(this.authType);
    }
    /**
     * @return (Stackdriver) The authentication type: `jwt` or `gce`.
     * 
     */
    public Optional<String> authenticationType() {
        return Optional.ofNullable(this.authenticationType);
    }
    /**
     * @return (Athena) Athena catalog.
     * 
     */
    public Optional<String> catalog() {
        return Optional.ofNullable(this.catalog);
    }
    /**
     * @return (Stackdriver) Service account email address.
     * 
     */
    public Optional<String> clientEmail() {
        return Optional.ofNullable(this.clientEmail);
    }
    /**
     * @return (Azure Monitor) The service account client id.
     * 
     */
    public Optional<String> clientId() {
        return Optional.ofNullable(this.clientId);
    }
    /**
     * @return (Azure Monitor) The cloud name.
     * 
     */
    public Optional<String> cloudName() {
        return Optional.ofNullable(this.cloudName);
    }
    /**
     * @return (MySQL, PostgreSQL, and MSSQL) Maximum amount of time in seconds a connection may be reused (Grafana v5.4+).
     * 
     */
    public Optional<Integer> connMaxLifetime() {
        return Optional.ofNullable(this.connMaxLifetime);
    }
    /**
     * @return (CloudWatch) A comma-separated list of custom namespaces to be queried by the CloudWatch data source.
     * 
     */
    public Optional<String> customMetricsNamespaces() {
        return Optional.ofNullable(this.customMetricsNamespaces);
    }
    /**
     * @return (Athena) Name of the database within the catalog.
     * 
     */
    public Optional<String> database() {
        return Optional.ofNullable(this.database);
    }
    /**
     * @return (InfluxDB) The default bucket for the data source.
     * 
     */
    public Optional<String> defaultBucket() {
        return Optional.ofNullable(this.defaultBucket);
    }
    /**
     * @return (Stackdriver) The default project for the data source.
     * 
     */
    public Optional<String> defaultProject() {
        return Optional.ofNullable(this.defaultProject);
    }
    /**
     * @return (CloudWatch, Athena) The default region for the data source.
     * 
     */
    public Optional<String> defaultRegion() {
        return Optional.ofNullable(this.defaultRegion);
    }
    /**
     * @return (Loki) See https://grafana.com/docs/grafana/latest/datasources/loki/#derived-fields
     * 
     */
    public List<DataSourceJsonDataDerivedField> derivedFields() {
        return this.derivedFields == null ? List.of() : this.derivedFields;
    }
    /**
     * @return (MSSQL) Connection SSL encryption handling: &#39;disable&#39;, &#39;false&#39; or &#39;true&#39;.
     * 
     */
    public Optional<String> encrypt() {
        return Optional.ofNullable(this.encrypt);
    }
    /**
     * @return (Elasticsearch) Elasticsearch semantic version (Grafana v8.0+).
     * 
     */
    public Optional<String> esVersion() {
        return Optional.ofNullable(this.esVersion);
    }
    /**
     * @return (CloudWatch, Athena) If you are assuming a role in another account, that has been created with an external ID, specify the external ID here.
     * 
     */
    public Optional<String> externalId() {
        return Optional.ofNullable(this.externalId);
    }
    /**
     * @return (Github) Github URL
     * 
     */
    public Optional<String> githubUrl() {
        return Optional.ofNullable(this.githubUrl);
    }
    /**
     * @return (Graphite) Graphite version.
     * 
     */
    public Optional<String> graphiteVersion() {
        return Optional.ofNullable(this.graphiteVersion);
    }
    /**
     * @return (Prometheus) HTTP method to use for making requests.
     * 
     */
    public Optional<String> httpMethod() {
        return Optional.ofNullable(this.httpMethod);
    }
    /**
     * @return (Alertmanager) Implementation of Alertmanager. Either &#39;cortex&#39; or &#39;prometheus&#39;
     * 
     */
    public Optional<String> implementation() {
        return Optional.ofNullable(this.implementation);
    }
    /**
     * @return (Elasticsearch) Index date time format. nil(No Pattern), &#39;Hourly&#39;, &#39;Daily&#39;, &#39;Weekly&#39;, &#39;Monthly&#39; or &#39;Yearly&#39;.
     * 
     */
    public Optional<String> interval() {
        return Optional.ofNullable(this.interval);
    }
    /**
     * @return (Elasticsearch) Which field should be used to indicate the priority of the log message.
     * 
     */
    public Optional<String> logLevelField() {
        return Optional.ofNullable(this.logLevelField);
    }
    /**
     * @return (Elasticsearch) Which field should be used as the log message.
     * 
     */
    public Optional<String> logMessageField() {
        return Optional.ofNullable(this.logMessageField);
    }
    /**
     * @return (Prometheus) Manage alerts.
     * 
     */
    public Optional<Boolean> manageAlerts() {
        return Optional.ofNullable(this.manageAlerts);
    }
    /**
     * @return (Elasticsearch) Maximum number of concurrent shard requests.
     * 
     */
    public Optional<Integer> maxConcurrentShardRequests() {
        return Optional.ofNullable(this.maxConcurrentShardRequests);
    }
    /**
     * @return (MySQL, PostgreSQL and MSSQL) Maximum number of connections in the idle connection pool (Grafana v5.4+).
     * 
     */
    public Optional<Integer> maxIdleConns() {
        return Optional.ofNullable(this.maxIdleConns);
    }
    /**
     * @return (Loki) Upper limit for the number of log lines returned by Loki
     * 
     */
    public Optional<Integer> maxLines() {
        return Optional.ofNullable(this.maxLines);
    }
    /**
     * @return (MySQL, PostgreSQL and MSSQL) Maximum number of open connections to the database (Grafana v5.4+).
     * 
     */
    public Optional<Integer> maxOpenConns() {
        return Optional.ofNullable(this.maxOpenConns);
    }
    /**
     * @return (Sentry) Organization slug.
     * 
     */
    public Optional<String> orgSlug() {
        return Optional.ofNullable(this.orgSlug);
    }
    /**
     * @return (InfluxDB) An organization is a workspace for a group of users. All dashboards, tasks, buckets, members, etc., belong to an organization.
     * 
     */
    public Optional<String> organization() {
        return Optional.ofNullable(this.organization);
    }
    /**
     * @return (Athena) AWS S3 bucket to store execution outputs. If not specified, the default query result location from the Workgroup configuration will be used.
     * 
     */
    public Optional<String> outputLocation() {
        return Optional.ofNullable(this.outputLocation);
    }
    /**
     * @return (PostgreSQL) Postgres version as a number (903/904/905/906/1000) meaning v9.3, v9.4, etc.
     * 
     */
    public Optional<Integer> postgresVersion() {
        return Optional.ofNullable(this.postgresVersion);
    }
    /**
     * @return (CloudWatch, Athena) The credentials profile name to use when authentication type is set as &#39;Credentials file&#39;.
     * 
     */
    public Optional<String> profile() {
        return Optional.ofNullable(this.profile);
    }
    /**
     * @return (Prometheus) Timeout for queries made to the Prometheus data source in seconds.
     * 
     */
    public Optional<String> queryTimeout() {
        return Optional.ofNullable(this.queryTimeout);
    }
    /**
     * @return (Elasticsearch and Prometheus) Specifies the ARN of an IAM role to assume.
     * 
     */
    public Optional<String> sigv4AssumeRoleArn() {
        return Optional.ofNullable(this.sigv4AssumeRoleArn);
    }
    /**
     * @return (Elasticsearch and Prometheus) Enable usage of SigV4.
     * 
     */
    public Optional<Boolean> sigv4Auth() {
        return Optional.ofNullable(this.sigv4Auth);
    }
    /**
     * @return (Elasticsearch and Prometheus) The Sigv4 authentication provider to use: &#39;default&#39;, &#39;credentials&#39; or &#39;keys&#39; (AMG: &#39;workspace-iam-role&#39;).
     * 
     */
    public Optional<String> sigv4AuthType() {
        return Optional.ofNullable(this.sigv4AuthType);
    }
    /**
     * @return (Elasticsearch and Prometheus) When assuming a role in another account use this external ID.
     * 
     */
    public Optional<String> sigv4ExternalId() {
        return Optional.ofNullable(this.sigv4ExternalId);
    }
    /**
     * @return (Elasticsearch and Prometheus) Credentials profile name, leave blank for default.
     * 
     */
    public Optional<String> sigv4Profile() {
        return Optional.ofNullable(this.sigv4Profile);
    }
    /**
     * @return (Elasticsearch and Prometheus) AWS region to use for Sigv4.
     * 
     */
    public Optional<String> sigv4Region() {
        return Optional.ofNullable(this.sigv4Region);
    }
    /**
     * @return (PostgreSQL) SSLmode. &#39;disable&#39;, &#39;require&#39;, &#39;verify-ca&#39; or &#39;verify-full&#39;.
     * 
     */
    public Optional<String> sslMode() {
        return Optional.ofNullable(this.sslMode);
    }
    /**
     * @return (Azure Monitor) The subscription id
     * 
     */
    public Optional<String> subscriptionId() {
        return Optional.ofNullable(this.subscriptionId);
    }
    /**
     * @return (Azure Monitor) Service account tenant ID.
     * 
     */
    public Optional<String> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }
    /**
     * @return (Elasticsearch) Which field that should be used as timestamp.
     * 
     */
    public Optional<String> timeField() {
        return Optional.ofNullable(this.timeField);
    }
    /**
     * @return (Prometheus, Elasticsearch, InfluxDB, MySQL, PostgreSQL, and MSSQL) Lowest interval/step value that should be used for this data source. Sometimes called &#34;Scrape Interval&#34; in the Grafana UI.
     * 
     */
    public Optional<String> timeInterval() {
        return Optional.ofNullable(this.timeInterval);
    }
    /**
     * @return (PostgreSQL) Enable usage of TimescaleDB extension.
     * 
     */
    public Optional<Boolean> timescaledb() {
        return Optional.ofNullable(this.timescaledb);
    }
    /**
     * @return (All) Enable TLS authentication using client cert configured in secure json data.
     * 
     */
    public Optional<Boolean> tlsAuth() {
        return Optional.ofNullable(this.tlsAuth);
    }
    /**
     * @return (All) Enable TLS authentication using CA cert.
     * 
     */
    public Optional<Boolean> tlsAuthWithCaCert() {
        return Optional.ofNullable(this.tlsAuthWithCaCert);
    }
    /**
     * @return (All) SSL Certificate configuration, either by ‘file-path’ or ‘file-content’.
     * 
     */
    public Optional<String> tlsConfigurationMethod() {
        return Optional.ofNullable(this.tlsConfigurationMethod);
    }
    /**
     * @return (All) Controls whether a client verifies the server’s certificate chain and host name.
     * 
     */
    public Optional<Boolean> tlsSkipVerify() {
        return Optional.ofNullable(this.tlsSkipVerify);
    }
    /**
     * @return (Stackdriver) The token URI used, provided in the service account key.
     * 
     */
    public Optional<String> tokenUri() {
        return Optional.ofNullable(this.tokenUri);
    }
    /**
     * @return (Cloudwatch) The X-Ray datasource uid to associate to this Cloudwatch datasource.
     * 
     */
    public Optional<String> tracingDatasourceUid() {
        return Optional.ofNullable(this.tracingDatasourceUid);
    }
    /**
     * @return (OpenTSDB) Resolution.
     * 
     */
    public Optional<Integer> tsdbResolution() {
        return Optional.ofNullable(this.tsdbResolution);
    }
    /**
     * @return (OpenTSDB) Version.
     * 
     */
    public Optional<Integer> tsdbVersion() {
        return Optional.ofNullable(this.tsdbVersion);
    }
    /**
     * @return (InfluxDB) InfluxQL or Flux.
     * 
     */
    public Optional<String> version() {
        return Optional.ofNullable(this.version);
    }
    /**
     * @return (Athena) Workgroup to use.
     * 
     */
    public Optional<String> workgroup() {
        return Optional.ofNullable(this.workgroup);
    }
    /**
     * @return (Elasticsearch) Enable X-Pack support.
     * 
     */
    public Optional<Boolean> xpackEnabled() {
        return Optional.ofNullable(this.xpackEnabled);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataSourceJsonData defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String assumeRoleArn;
        private @Nullable String authType;
        private @Nullable String authenticationType;
        private @Nullable String catalog;
        private @Nullable String clientEmail;
        private @Nullable String clientId;
        private @Nullable String cloudName;
        private @Nullable Integer connMaxLifetime;
        private @Nullable String customMetricsNamespaces;
        private @Nullable String database;
        private @Nullable String defaultBucket;
        private @Nullable String defaultProject;
        private @Nullable String defaultRegion;
        private @Nullable List<DataSourceJsonDataDerivedField> derivedFields;
        private @Nullable String encrypt;
        private @Nullable String esVersion;
        private @Nullable String externalId;
        private @Nullable String githubUrl;
        private @Nullable String graphiteVersion;
        private @Nullable String httpMethod;
        private @Nullable String implementation;
        private @Nullable String interval;
        private @Nullable String logLevelField;
        private @Nullable String logMessageField;
        private @Nullable Boolean manageAlerts;
        private @Nullable Integer maxConcurrentShardRequests;
        private @Nullable Integer maxIdleConns;
        private @Nullable Integer maxLines;
        private @Nullable Integer maxOpenConns;
        private @Nullable String orgSlug;
        private @Nullable String organization;
        private @Nullable String outputLocation;
        private @Nullable Integer postgresVersion;
        private @Nullable String profile;
        private @Nullable String queryTimeout;
        private @Nullable String sigv4AssumeRoleArn;
        private @Nullable Boolean sigv4Auth;
        private @Nullable String sigv4AuthType;
        private @Nullable String sigv4ExternalId;
        private @Nullable String sigv4Profile;
        private @Nullable String sigv4Region;
        private @Nullable String sslMode;
        private @Nullable String subscriptionId;
        private @Nullable String tenantId;
        private @Nullable String timeField;
        private @Nullable String timeInterval;
        private @Nullable Boolean timescaledb;
        private @Nullable Boolean tlsAuth;
        private @Nullable Boolean tlsAuthWithCaCert;
        private @Nullable String tlsConfigurationMethod;
        private @Nullable Boolean tlsSkipVerify;
        private @Nullable String tokenUri;
        private @Nullable String tracingDatasourceUid;
        private @Nullable Integer tsdbResolution;
        private @Nullable Integer tsdbVersion;
        private @Nullable String version;
        private @Nullable String workgroup;
        private @Nullable Boolean xpackEnabled;
        public Builder() {}
        public Builder(DataSourceJsonData defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.assumeRoleArn = defaults.assumeRoleArn;
    	      this.authType = defaults.authType;
    	      this.authenticationType = defaults.authenticationType;
    	      this.catalog = defaults.catalog;
    	      this.clientEmail = defaults.clientEmail;
    	      this.clientId = defaults.clientId;
    	      this.cloudName = defaults.cloudName;
    	      this.connMaxLifetime = defaults.connMaxLifetime;
    	      this.customMetricsNamespaces = defaults.customMetricsNamespaces;
    	      this.database = defaults.database;
    	      this.defaultBucket = defaults.defaultBucket;
    	      this.defaultProject = defaults.defaultProject;
    	      this.defaultRegion = defaults.defaultRegion;
    	      this.derivedFields = defaults.derivedFields;
    	      this.encrypt = defaults.encrypt;
    	      this.esVersion = defaults.esVersion;
    	      this.externalId = defaults.externalId;
    	      this.githubUrl = defaults.githubUrl;
    	      this.graphiteVersion = defaults.graphiteVersion;
    	      this.httpMethod = defaults.httpMethod;
    	      this.implementation = defaults.implementation;
    	      this.interval = defaults.interval;
    	      this.logLevelField = defaults.logLevelField;
    	      this.logMessageField = defaults.logMessageField;
    	      this.manageAlerts = defaults.manageAlerts;
    	      this.maxConcurrentShardRequests = defaults.maxConcurrentShardRequests;
    	      this.maxIdleConns = defaults.maxIdleConns;
    	      this.maxLines = defaults.maxLines;
    	      this.maxOpenConns = defaults.maxOpenConns;
    	      this.orgSlug = defaults.orgSlug;
    	      this.organization = defaults.organization;
    	      this.outputLocation = defaults.outputLocation;
    	      this.postgresVersion = defaults.postgresVersion;
    	      this.profile = defaults.profile;
    	      this.queryTimeout = defaults.queryTimeout;
    	      this.sigv4AssumeRoleArn = defaults.sigv4AssumeRoleArn;
    	      this.sigv4Auth = defaults.sigv4Auth;
    	      this.sigv4AuthType = defaults.sigv4AuthType;
    	      this.sigv4ExternalId = defaults.sigv4ExternalId;
    	      this.sigv4Profile = defaults.sigv4Profile;
    	      this.sigv4Region = defaults.sigv4Region;
    	      this.sslMode = defaults.sslMode;
    	      this.subscriptionId = defaults.subscriptionId;
    	      this.tenantId = defaults.tenantId;
    	      this.timeField = defaults.timeField;
    	      this.timeInterval = defaults.timeInterval;
    	      this.timescaledb = defaults.timescaledb;
    	      this.tlsAuth = defaults.tlsAuth;
    	      this.tlsAuthWithCaCert = defaults.tlsAuthWithCaCert;
    	      this.tlsConfigurationMethod = defaults.tlsConfigurationMethod;
    	      this.tlsSkipVerify = defaults.tlsSkipVerify;
    	      this.tokenUri = defaults.tokenUri;
    	      this.tracingDatasourceUid = defaults.tracingDatasourceUid;
    	      this.tsdbResolution = defaults.tsdbResolution;
    	      this.tsdbVersion = defaults.tsdbVersion;
    	      this.version = defaults.version;
    	      this.workgroup = defaults.workgroup;
    	      this.xpackEnabled = defaults.xpackEnabled;
        }

        @CustomType.Setter
        public Builder assumeRoleArn(@Nullable String assumeRoleArn) {
            this.assumeRoleArn = assumeRoleArn;
            return this;
        }
        @CustomType.Setter
        public Builder authType(@Nullable String authType) {
            this.authType = authType;
            return this;
        }
        @CustomType.Setter
        public Builder authenticationType(@Nullable String authenticationType) {
            this.authenticationType = authenticationType;
            return this;
        }
        @CustomType.Setter
        public Builder catalog(@Nullable String catalog) {
            this.catalog = catalog;
            return this;
        }
        @CustomType.Setter
        public Builder clientEmail(@Nullable String clientEmail) {
            this.clientEmail = clientEmail;
            return this;
        }
        @CustomType.Setter
        public Builder clientId(@Nullable String clientId) {
            this.clientId = clientId;
            return this;
        }
        @CustomType.Setter
        public Builder cloudName(@Nullable String cloudName) {
            this.cloudName = cloudName;
            return this;
        }
        @CustomType.Setter
        public Builder connMaxLifetime(@Nullable Integer connMaxLifetime) {
            this.connMaxLifetime = connMaxLifetime;
            return this;
        }
        @CustomType.Setter
        public Builder customMetricsNamespaces(@Nullable String customMetricsNamespaces) {
            this.customMetricsNamespaces = customMetricsNamespaces;
            return this;
        }
        @CustomType.Setter
        public Builder database(@Nullable String database) {
            this.database = database;
            return this;
        }
        @CustomType.Setter
        public Builder defaultBucket(@Nullable String defaultBucket) {
            this.defaultBucket = defaultBucket;
            return this;
        }
        @CustomType.Setter
        public Builder defaultProject(@Nullable String defaultProject) {
            this.defaultProject = defaultProject;
            return this;
        }
        @CustomType.Setter
        public Builder defaultRegion(@Nullable String defaultRegion) {
            this.defaultRegion = defaultRegion;
            return this;
        }
        @CustomType.Setter
        public Builder derivedFields(@Nullable List<DataSourceJsonDataDerivedField> derivedFields) {
            this.derivedFields = derivedFields;
            return this;
        }
        public Builder derivedFields(DataSourceJsonDataDerivedField... derivedFields) {
            return derivedFields(List.of(derivedFields));
        }
        @CustomType.Setter
        public Builder encrypt(@Nullable String encrypt) {
            this.encrypt = encrypt;
            return this;
        }
        @CustomType.Setter
        public Builder esVersion(@Nullable String esVersion) {
            this.esVersion = esVersion;
            return this;
        }
        @CustomType.Setter
        public Builder externalId(@Nullable String externalId) {
            this.externalId = externalId;
            return this;
        }
        @CustomType.Setter
        public Builder githubUrl(@Nullable String githubUrl) {
            this.githubUrl = githubUrl;
            return this;
        }
        @CustomType.Setter
        public Builder graphiteVersion(@Nullable String graphiteVersion) {
            this.graphiteVersion = graphiteVersion;
            return this;
        }
        @CustomType.Setter
        public Builder httpMethod(@Nullable String httpMethod) {
            this.httpMethod = httpMethod;
            return this;
        }
        @CustomType.Setter
        public Builder implementation(@Nullable String implementation) {
            this.implementation = implementation;
            return this;
        }
        @CustomType.Setter
        public Builder interval(@Nullable String interval) {
            this.interval = interval;
            return this;
        }
        @CustomType.Setter
        public Builder logLevelField(@Nullable String logLevelField) {
            this.logLevelField = logLevelField;
            return this;
        }
        @CustomType.Setter
        public Builder logMessageField(@Nullable String logMessageField) {
            this.logMessageField = logMessageField;
            return this;
        }
        @CustomType.Setter
        public Builder manageAlerts(@Nullable Boolean manageAlerts) {
            this.manageAlerts = manageAlerts;
            return this;
        }
        @CustomType.Setter
        public Builder maxConcurrentShardRequests(@Nullable Integer maxConcurrentShardRequests) {
            this.maxConcurrentShardRequests = maxConcurrentShardRequests;
            return this;
        }
        @CustomType.Setter
        public Builder maxIdleConns(@Nullable Integer maxIdleConns) {
            this.maxIdleConns = maxIdleConns;
            return this;
        }
        @CustomType.Setter
        public Builder maxLines(@Nullable Integer maxLines) {
            this.maxLines = maxLines;
            return this;
        }
        @CustomType.Setter
        public Builder maxOpenConns(@Nullable Integer maxOpenConns) {
            this.maxOpenConns = maxOpenConns;
            return this;
        }
        @CustomType.Setter
        public Builder orgSlug(@Nullable String orgSlug) {
            this.orgSlug = orgSlug;
            return this;
        }
        @CustomType.Setter
        public Builder organization(@Nullable String organization) {
            this.organization = organization;
            return this;
        }
        @CustomType.Setter
        public Builder outputLocation(@Nullable String outputLocation) {
            this.outputLocation = outputLocation;
            return this;
        }
        @CustomType.Setter
        public Builder postgresVersion(@Nullable Integer postgresVersion) {
            this.postgresVersion = postgresVersion;
            return this;
        }
        @CustomType.Setter
        public Builder profile(@Nullable String profile) {
            this.profile = profile;
            return this;
        }
        @CustomType.Setter
        public Builder queryTimeout(@Nullable String queryTimeout) {
            this.queryTimeout = queryTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder sigv4AssumeRoleArn(@Nullable String sigv4AssumeRoleArn) {
            this.sigv4AssumeRoleArn = sigv4AssumeRoleArn;
            return this;
        }
        @CustomType.Setter
        public Builder sigv4Auth(@Nullable Boolean sigv4Auth) {
            this.sigv4Auth = sigv4Auth;
            return this;
        }
        @CustomType.Setter
        public Builder sigv4AuthType(@Nullable String sigv4AuthType) {
            this.sigv4AuthType = sigv4AuthType;
            return this;
        }
        @CustomType.Setter
        public Builder sigv4ExternalId(@Nullable String sigv4ExternalId) {
            this.sigv4ExternalId = sigv4ExternalId;
            return this;
        }
        @CustomType.Setter
        public Builder sigv4Profile(@Nullable String sigv4Profile) {
            this.sigv4Profile = sigv4Profile;
            return this;
        }
        @CustomType.Setter
        public Builder sigv4Region(@Nullable String sigv4Region) {
            this.sigv4Region = sigv4Region;
            return this;
        }
        @CustomType.Setter
        public Builder sslMode(@Nullable String sslMode) {
            this.sslMode = sslMode;
            return this;
        }
        @CustomType.Setter
        public Builder subscriptionId(@Nullable String subscriptionId) {
            this.subscriptionId = subscriptionId;
            return this;
        }
        @CustomType.Setter
        public Builder tenantId(@Nullable String tenantId) {
            this.tenantId = tenantId;
            return this;
        }
        @CustomType.Setter
        public Builder timeField(@Nullable String timeField) {
            this.timeField = timeField;
            return this;
        }
        @CustomType.Setter
        public Builder timeInterval(@Nullable String timeInterval) {
            this.timeInterval = timeInterval;
            return this;
        }
        @CustomType.Setter
        public Builder timescaledb(@Nullable Boolean timescaledb) {
            this.timescaledb = timescaledb;
            return this;
        }
        @CustomType.Setter
        public Builder tlsAuth(@Nullable Boolean tlsAuth) {
            this.tlsAuth = tlsAuth;
            return this;
        }
        @CustomType.Setter
        public Builder tlsAuthWithCaCert(@Nullable Boolean tlsAuthWithCaCert) {
            this.tlsAuthWithCaCert = tlsAuthWithCaCert;
            return this;
        }
        @CustomType.Setter
        public Builder tlsConfigurationMethod(@Nullable String tlsConfigurationMethod) {
            this.tlsConfigurationMethod = tlsConfigurationMethod;
            return this;
        }
        @CustomType.Setter
        public Builder tlsSkipVerify(@Nullable Boolean tlsSkipVerify) {
            this.tlsSkipVerify = tlsSkipVerify;
            return this;
        }
        @CustomType.Setter
        public Builder tokenUri(@Nullable String tokenUri) {
            this.tokenUri = tokenUri;
            return this;
        }
        @CustomType.Setter
        public Builder tracingDatasourceUid(@Nullable String tracingDatasourceUid) {
            this.tracingDatasourceUid = tracingDatasourceUid;
            return this;
        }
        @CustomType.Setter
        public Builder tsdbResolution(@Nullable Integer tsdbResolution) {
            this.tsdbResolution = tsdbResolution;
            return this;
        }
        @CustomType.Setter
        public Builder tsdbVersion(@Nullable Integer tsdbVersion) {
            this.tsdbVersion = tsdbVersion;
            return this;
        }
        @CustomType.Setter
        public Builder version(@Nullable String version) {
            this.version = version;
            return this;
        }
        @CustomType.Setter
        public Builder workgroup(@Nullable String workgroup) {
            this.workgroup = workgroup;
            return this;
        }
        @CustomType.Setter
        public Builder xpackEnabled(@Nullable Boolean xpackEnabled) {
            this.xpackEnabled = xpackEnabled;
            return this;
        }
        public DataSourceJsonData build() {
            final var o = new DataSourceJsonData();
            o.assumeRoleArn = assumeRoleArn;
            o.authType = authType;
            o.authenticationType = authenticationType;
            o.catalog = catalog;
            o.clientEmail = clientEmail;
            o.clientId = clientId;
            o.cloudName = cloudName;
            o.connMaxLifetime = connMaxLifetime;
            o.customMetricsNamespaces = customMetricsNamespaces;
            o.database = database;
            o.defaultBucket = defaultBucket;
            o.defaultProject = defaultProject;
            o.defaultRegion = defaultRegion;
            o.derivedFields = derivedFields;
            o.encrypt = encrypt;
            o.esVersion = esVersion;
            o.externalId = externalId;
            o.githubUrl = githubUrl;
            o.graphiteVersion = graphiteVersion;
            o.httpMethod = httpMethod;
            o.implementation = implementation;
            o.interval = interval;
            o.logLevelField = logLevelField;
            o.logMessageField = logMessageField;
            o.manageAlerts = manageAlerts;
            o.maxConcurrentShardRequests = maxConcurrentShardRequests;
            o.maxIdleConns = maxIdleConns;
            o.maxLines = maxLines;
            o.maxOpenConns = maxOpenConns;
            o.orgSlug = orgSlug;
            o.organization = organization;
            o.outputLocation = outputLocation;
            o.postgresVersion = postgresVersion;
            o.profile = profile;
            o.queryTimeout = queryTimeout;
            o.sigv4AssumeRoleArn = sigv4AssumeRoleArn;
            o.sigv4Auth = sigv4Auth;
            o.sigv4AuthType = sigv4AuthType;
            o.sigv4ExternalId = sigv4ExternalId;
            o.sigv4Profile = sigv4Profile;
            o.sigv4Region = sigv4Region;
            o.sslMode = sslMode;
            o.subscriptionId = subscriptionId;
            o.tenantId = tenantId;
            o.timeField = timeField;
            o.timeInterval = timeInterval;
            o.timescaledb = timescaledb;
            o.tlsAuth = tlsAuth;
            o.tlsAuthWithCaCert = tlsAuthWithCaCert;
            o.tlsConfigurationMethod = tlsConfigurationMethod;
            o.tlsSkipVerify = tlsSkipVerify;
            o.tokenUri = tokenUri;
            o.tracingDatasourceUid = tracingDatasourceUid;
            o.tsdbResolution = tsdbResolution;
            o.tsdbVersion = tsdbVersion;
            o.version = version;
            o.workgroup = workgroup;
            o.xpackEnabled = xpackEnabled;
            return o;
        }
    }
}
