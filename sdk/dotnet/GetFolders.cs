// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Grafana
{
    [Obsolete(@"grafana.index/getfolders.getFolders has been deprecated in favor of grafana.oss/getfolders.getFolders")]
    public static class GetFolders
    {
        public static Task<GetFoldersResult> InvokeAsync(GetFoldersArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFoldersResult>("grafana:index/getFolders:getFolders", args ?? new GetFoldersArgs(), options.WithDefaults());

        public static Output<GetFoldersResult> Invoke(GetFoldersInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFoldersResult>("grafana:index/getFolders:getFolders", args ?? new GetFoldersInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFoldersArgs : global::Pulumi.InvokeArgs
    {
        [Input("orgId")]
        public string? OrgId { get; set; }

        public GetFoldersArgs()
        {
        }
        public static new GetFoldersArgs Empty => new GetFoldersArgs();
    }

    public sealed class GetFoldersInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        public GetFoldersInvokeArgs()
        {
        }
        public static new GetFoldersInvokeArgs Empty => new GetFoldersInvokeArgs();
    }


    [OutputType]
    public sealed class GetFoldersResult
    {
        public readonly ImmutableArray<Outputs.GetFoldersFolderResult> Folders;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? OrgId;

        [OutputConstructor]
        private GetFoldersResult(
            ImmutableArray<Outputs.GetFoldersFolderResult> folders,

            string id,

            string? orgId)
        {
            Folders = folders;
            Id = id;
            OrgId = orgId;
        }
    }
}
